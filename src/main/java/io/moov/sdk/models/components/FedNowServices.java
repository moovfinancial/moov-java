/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;


public class FedNowServices {
    /**
     * Indicates if the institution can receive instant payments.
     */
    @JsonProperty("receivePayments")
    private boolean receivePayments;

    /**
     * Indicates if the institution can send instant payments.
     */
    @JsonProperty("sendPayments")
    private boolean sendPayments;

    /**
     * Indicates if the institution can process request for payment messages.
     */
    @JsonProperty("requestForPayment")
    private boolean requestForPayment;

    @JsonCreator
    public FedNowServices(
            @JsonProperty("receivePayments") boolean receivePayments,
            @JsonProperty("sendPayments") boolean sendPayments,
            @JsonProperty("requestForPayment") boolean requestForPayment) {
        Utils.checkNotNull(receivePayments, "receivePayments");
        Utils.checkNotNull(sendPayments, "sendPayments");
        Utils.checkNotNull(requestForPayment, "requestForPayment");
        this.receivePayments = receivePayments;
        this.sendPayments = sendPayments;
        this.requestForPayment = requestForPayment;
    }

    /**
     * Indicates if the institution can receive instant payments.
     */
    @JsonIgnore
    public boolean receivePayments() {
        return receivePayments;
    }

    /**
     * Indicates if the institution can send instant payments.
     */
    @JsonIgnore
    public boolean sendPayments() {
        return sendPayments;
    }

    /**
     * Indicates if the institution can process request for payment messages.
     */
    @JsonIgnore
    public boolean requestForPayment() {
        return requestForPayment;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates if the institution can receive instant payments.
     */
    public FedNowServices withReceivePayments(boolean receivePayments) {
        Utils.checkNotNull(receivePayments, "receivePayments");
        this.receivePayments = receivePayments;
        return this;
    }

    /**
     * Indicates if the institution can send instant payments.
     */
    public FedNowServices withSendPayments(boolean sendPayments) {
        Utils.checkNotNull(sendPayments, "sendPayments");
        this.sendPayments = sendPayments;
        return this;
    }

    /**
     * Indicates if the institution can process request for payment messages.
     */
    public FedNowServices withRequestForPayment(boolean requestForPayment) {
        Utils.checkNotNull(requestForPayment, "requestForPayment");
        this.requestForPayment = requestForPayment;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FedNowServices other = (FedNowServices) o;
        return 
            Utils.enhancedDeepEquals(this.receivePayments, other.receivePayments) &&
            Utils.enhancedDeepEquals(this.sendPayments, other.sendPayments) &&
            Utils.enhancedDeepEquals(this.requestForPayment, other.requestForPayment);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            receivePayments, sendPayments, requestForPayment);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FedNowServices.class,
                "receivePayments", receivePayments,
                "sendPayments", sendPayments,
                "requestForPayment", requestForPayment);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Boolean receivePayments;

        private Boolean sendPayments;

        private Boolean requestForPayment;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates if the institution can receive instant payments.
         */
        public Builder receivePayments(boolean receivePayments) {
            Utils.checkNotNull(receivePayments, "receivePayments");
            this.receivePayments = receivePayments;
            return this;
        }


        /**
         * Indicates if the institution can send instant payments.
         */
        public Builder sendPayments(boolean sendPayments) {
            Utils.checkNotNull(sendPayments, "sendPayments");
            this.sendPayments = sendPayments;
            return this;
        }


        /**
         * Indicates if the institution can process request for payment messages.
         */
        public Builder requestForPayment(boolean requestForPayment) {
            Utils.checkNotNull(requestForPayment, "requestForPayment");
            this.requestForPayment = requestForPayment;
            return this;
        }

        public FedNowServices build() {

            return new FedNowServices(
                receivePayments, sendPayments, requestForPayment);
        }

    }
}
