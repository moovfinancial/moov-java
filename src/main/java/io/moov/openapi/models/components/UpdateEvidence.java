/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * UpdateEvidence - The template for adding optional properties.
 */

public class UpdateEvidence {

    /**
     * The text to associate with the dispute as evidence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evidenceType")
    private Optional<? extends EvidenceType> evidenceType;

    @JsonCreator
    public UpdateEvidence(
            @JsonProperty("text") Optional<String> text,
            @JsonProperty("evidenceType") Optional<? extends EvidenceType> evidenceType) {
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(evidenceType, "evidenceType");
        this.text = text;
        this.evidenceType = evidenceType;
    }
    
    public UpdateEvidence() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The text to associate with the dispute as evidence.
     */
    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EvidenceType> evidenceType() {
        return (Optional<EvidenceType>) evidenceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The text to associate with the dispute as evidence.
     */
    public UpdateEvidence withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    /**
     * The text to associate with the dispute as evidence.
     */
    public UpdateEvidence withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    public UpdateEvidence withEvidenceType(EvidenceType evidenceType) {
        Utils.checkNotNull(evidenceType, "evidenceType");
        this.evidenceType = Optional.ofNullable(evidenceType);
        return this;
    }

    public UpdateEvidence withEvidenceType(Optional<? extends EvidenceType> evidenceType) {
        Utils.checkNotNull(evidenceType, "evidenceType");
        this.evidenceType = evidenceType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateEvidence other = (UpdateEvidence) o;
        return 
            Objects.deepEquals(this.text, other.text) &&
            Objects.deepEquals(this.evidenceType, other.evidenceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            text,
            evidenceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateEvidence.class,
                "text", text,
                "evidenceType", evidenceType);
    }
    
    public final static class Builder {
 
        private Optional<String> text = Optional.empty();
 
        private Optional<? extends EvidenceType> evidenceType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The text to associate with the dispute as evidence.
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        /**
         * The text to associate with the dispute as evidence.
         */
        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        public Builder evidenceType(EvidenceType evidenceType) {
            Utils.checkNotNull(evidenceType, "evidenceType");
            this.evidenceType = Optional.ofNullable(evidenceType);
            return this;
        }

        public Builder evidenceType(Optional<? extends EvidenceType> evidenceType) {
            Utils.checkNotNull(evidenceType, "evidenceType");
            this.evidenceType = evidenceType;
            return this;
        }
        
        public UpdateEvidence build() {
            return new UpdateEvidence(
                text,
                evidenceType);
        }
    }
}

