/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.moov.openapi.models.components.FeePlanAgreementStatus;
import io.moov.openapi.models.components.Versions;
import io.moov.openapi.utils.SpeakeasyMetadata;
import io.moov.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ListFeePlanAgreementsRequest {

    /**
     * Specify an API version.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-moov-version")
    private Optional<? extends Versions> xMoovVersion;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountID")
    private String accountID;

    /**
     * A comma-separated list of agreement IDs to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=agreementID")
    private Optional<? extends List<String>> agreementID;

    /**
     * A comma-separated list of statuses to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=status")
    private Optional<? extends List<FeePlanAgreementStatus>> status;

    @JsonCreator
    public ListFeePlanAgreementsRequest(
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Optional<? extends List<String>> agreementID,
            Optional<? extends List<FeePlanAgreementStatus>> status) {
        Utils.checkNotNull(xMoovVersion, "xMoovVersion");
        Utils.checkNotNull(accountID, "accountID");
        Utils.checkNotNull(agreementID, "agreementID");
        Utils.checkNotNull(status, "status");
        this.xMoovVersion = xMoovVersion;
        this.accountID = accountID;
        this.agreementID = agreementID;
        this.status = status;
    }
    
    public ListFeePlanAgreementsRequest(
            String accountID) {
        this(Optional.empty(), accountID, Optional.empty(), Optional.empty());
    }

    /**
     * Specify an API version.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Versions> xMoovVersion() {
        return (Optional<Versions>) xMoovVersion;
    }

    @JsonIgnore
    public String accountID() {
        return accountID;
    }

    /**
     * A comma-separated list of agreement IDs to filter the results by.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> agreementID() {
        return (Optional<List<String>>) agreementID;
    }

    /**
     * A comma-separated list of statuses to filter the results by.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FeePlanAgreementStatus>> status() {
        return (Optional<List<FeePlanAgreementStatus>>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Specify an API version.
     */
    public ListFeePlanAgreementsRequest withXMoovVersion(Versions xMoovVersion) {
        Utils.checkNotNull(xMoovVersion, "xMoovVersion");
        this.xMoovVersion = Optional.ofNullable(xMoovVersion);
        return this;
    }

    /**
     * Specify an API version.
     */
    public ListFeePlanAgreementsRequest withXMoovVersion(Optional<? extends Versions> xMoovVersion) {
        Utils.checkNotNull(xMoovVersion, "xMoovVersion");
        this.xMoovVersion = xMoovVersion;
        return this;
    }

    public ListFeePlanAgreementsRequest withAccountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    /**
     * A comma-separated list of agreement IDs to filter the results by.
     */
    public ListFeePlanAgreementsRequest withAgreementID(List<String> agreementID) {
        Utils.checkNotNull(agreementID, "agreementID");
        this.agreementID = Optional.ofNullable(agreementID);
        return this;
    }

    /**
     * A comma-separated list of agreement IDs to filter the results by.
     */
    public ListFeePlanAgreementsRequest withAgreementID(Optional<? extends List<String>> agreementID) {
        Utils.checkNotNull(agreementID, "agreementID");
        this.agreementID = agreementID;
        return this;
    }

    /**
     * A comma-separated list of statuses to filter the results by.
     */
    public ListFeePlanAgreementsRequest withStatus(List<FeePlanAgreementStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * A comma-separated list of statuses to filter the results by.
     */
    public ListFeePlanAgreementsRequest withStatus(Optional<? extends List<FeePlanAgreementStatus>> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListFeePlanAgreementsRequest other = (ListFeePlanAgreementsRequest) o;
        return 
            Objects.deepEquals(this.xMoovVersion, other.xMoovVersion) &&
            Objects.deepEquals(this.accountID, other.accountID) &&
            Objects.deepEquals(this.agreementID, other.agreementID) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            xMoovVersion,
            accountID,
            agreementID,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListFeePlanAgreementsRequest.class,
                "xMoovVersion", xMoovVersion,
                "accountID", accountID,
                "agreementID", agreementID,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends Versions> xMoovVersion = Optional.empty();
 
        private String accountID;
 
        private Optional<? extends List<String>> agreementID = Optional.empty();
 
        private Optional<? extends List<FeePlanAgreementStatus>> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Specify an API version.
         */
        public Builder xMoovVersion(Versions xMoovVersion) {
            Utils.checkNotNull(xMoovVersion, "xMoovVersion");
            this.xMoovVersion = Optional.ofNullable(xMoovVersion);
            return this;
        }

        /**
         * Specify an API version.
         */
        public Builder xMoovVersion(Optional<? extends Versions> xMoovVersion) {
            Utils.checkNotNull(xMoovVersion, "xMoovVersion");
            this.xMoovVersion = xMoovVersion;
            return this;
        }

        public Builder accountID(String accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = accountID;
            return this;
        }

        /**
         * A comma-separated list of agreement IDs to filter the results by.
         */
        public Builder agreementID(List<String> agreementID) {
            Utils.checkNotNull(agreementID, "agreementID");
            this.agreementID = Optional.ofNullable(agreementID);
            return this;
        }

        /**
         * A comma-separated list of agreement IDs to filter the results by.
         */
        public Builder agreementID(Optional<? extends List<String>> agreementID) {
            Utils.checkNotNull(agreementID, "agreementID");
            this.agreementID = agreementID;
            return this;
        }

        /**
         * A comma-separated list of statuses to filter the results by.
         */
        public Builder status(List<FeePlanAgreementStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * A comma-separated list of statuses to filter the results by.
         */
        public Builder status(Optional<? extends List<FeePlanAgreementStatus>> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public ListFeePlanAgreementsRequest build() {
            return new ListFeePlanAgreementsRequest(
                xMoovVersion,
                accountID,
                agreementID,
                status);
        }
    }
}

