/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class IndustryCodes {

    @JsonProperty("naics")
    private String naics;

    @JsonProperty("sic")
    private String sic;

    @JsonProperty("mcc")
    private String mcc;

    @JsonCreator
    public IndustryCodes(
            @JsonProperty("naics") String naics,
            @JsonProperty("sic") String sic,
            @JsonProperty("mcc") String mcc) {
        Utils.checkNotNull(naics, "naics");
        Utils.checkNotNull(sic, "sic");
        Utils.checkNotNull(mcc, "mcc");
        this.naics = naics;
        this.sic = sic;
        this.mcc = mcc;
    }

    @JsonIgnore
    public String naics() {
        return naics;
    }

    @JsonIgnore
    public String sic() {
        return sic;
    }

    @JsonIgnore
    public String mcc() {
        return mcc;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IndustryCodes withNaics(String naics) {
        Utils.checkNotNull(naics, "naics");
        this.naics = naics;
        return this;
    }

    public IndustryCodes withSic(String sic) {
        Utils.checkNotNull(sic, "sic");
        this.sic = sic;
        return this;
    }

    public IndustryCodes withMcc(String mcc) {
        Utils.checkNotNull(mcc, "mcc");
        this.mcc = mcc;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndustryCodes other = (IndustryCodes) o;
        return 
            Objects.deepEquals(this.naics, other.naics) &&
            Objects.deepEquals(this.sic, other.sic) &&
            Objects.deepEquals(this.mcc, other.mcc);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            naics,
            sic,
            mcc);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IndustryCodes.class,
                "naics", naics,
                "sic", sic,
                "mcc", mcc);
    }
    
    public final static class Builder {
 
        private String naics;
 
        private String sic;
 
        private String mcc;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder naics(String naics) {
            Utils.checkNotNull(naics, "naics");
            this.naics = naics;
            return this;
        }

        public Builder sic(String sic) {
            Utils.checkNotNull(sic, "sic");
            this.sic = sic;
            return this;
        }

        public Builder mcc(String mcc) {
            Utils.checkNotNull(mcc, "mcc");
            this.mcc = mcc;
            return this;
        }
        
        public IndustryCodes build() {
            return new IndustryCodes(
                naics,
                sic,
                mcc);
        }
    }
}

