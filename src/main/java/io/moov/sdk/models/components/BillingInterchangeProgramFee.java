/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.math.BigDecimal;

/**
 * BillingInterchangeProgramFee
 * 
 * <p>Details of a specific interchange program fee.
 */
public class BillingInterchangeProgramFee {
    /**
     * The name of the interchange program.
     */
    @JsonProperty("programName")
    private String programName;

    /**
     * The number of transactions for this program.
     */
    @JsonProperty("count")
    private long count;

    /**
     * The percentage rate for this program.
     */
    @JsonProperty("percentageRate")
    private BigDecimal percentageRate;

    /**
     * The per-item rate for this program.
     */
    @JsonProperty("perItemRate")
    private AmountDecimal perItemRate;

    /**
     * The total fee amount for this program.
     */
    @JsonProperty("total")
    private AmountDecimal total;

    /**
     * The total transfer volume for this program.
     */
    @JsonProperty("transferVolume")
    private AmountDecimal transferVolume;

    @JsonCreator
    public BillingInterchangeProgramFee(
            @JsonProperty("programName") String programName,
            @JsonProperty("count") long count,
            @JsonProperty("percentageRate") BigDecimal percentageRate,
            @JsonProperty("perItemRate") AmountDecimal perItemRate,
            @JsonProperty("total") AmountDecimal total,
            @JsonProperty("transferVolume") AmountDecimal transferVolume) {
        Utils.checkNotNull(programName, "programName");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(percentageRate, "percentageRate");
        Utils.checkNotNull(perItemRate, "perItemRate");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(transferVolume, "transferVolume");
        this.programName = programName;
        this.count = count;
        this.percentageRate = percentageRate;
        this.perItemRate = perItemRate;
        this.total = total;
        this.transferVolume = transferVolume;
    }

    /**
     * The name of the interchange program.
     */
    @JsonIgnore
    public String programName() {
        return programName;
    }

    /**
     * The number of transactions for this program.
     */
    @JsonIgnore
    public long count() {
        return count;
    }

    /**
     * The percentage rate for this program.
     */
    @JsonIgnore
    public BigDecimal percentageRate() {
        return percentageRate;
    }

    /**
     * The per-item rate for this program.
     */
    @JsonIgnore
    public AmountDecimal perItemRate() {
        return perItemRate;
    }

    /**
     * The total fee amount for this program.
     */
    @JsonIgnore
    public AmountDecimal total() {
        return total;
    }

    /**
     * The total transfer volume for this program.
     */
    @JsonIgnore
    public AmountDecimal transferVolume() {
        return transferVolume;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the interchange program.
     */
    public BillingInterchangeProgramFee withProgramName(String programName) {
        Utils.checkNotNull(programName, "programName");
        this.programName = programName;
        return this;
    }

    /**
     * The number of transactions for this program.
     */
    public BillingInterchangeProgramFee withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * The percentage rate for this program.
     */
    public BillingInterchangeProgramFee withPercentageRate(double percentageRate) {
        this.percentageRate = BigDecimal.valueOf(percentageRate);
        return this;
    }
    /**
     * The percentage rate for this program.
     */
    public BillingInterchangeProgramFee withPercentageRate(BigDecimal percentageRate) {
        Utils.checkNotNull(percentageRate, "percentageRate");
        this.percentageRate = percentageRate;
        return this;
    }

    /**
     * The per-item rate for this program.
     */
    public BillingInterchangeProgramFee withPerItemRate(AmountDecimal perItemRate) {
        Utils.checkNotNull(perItemRate, "perItemRate");
        this.perItemRate = perItemRate;
        return this;
    }

    /**
     * The total fee amount for this program.
     */
    public BillingInterchangeProgramFee withTotal(AmountDecimal total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * The total transfer volume for this program.
     */
    public BillingInterchangeProgramFee withTransferVolume(AmountDecimal transferVolume) {
        Utils.checkNotNull(transferVolume, "transferVolume");
        this.transferVolume = transferVolume;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillingInterchangeProgramFee other = (BillingInterchangeProgramFee) o;
        return 
            Utils.enhancedDeepEquals(this.programName, other.programName) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.percentageRate, other.percentageRate) &&
            Utils.enhancedDeepEquals(this.perItemRate, other.perItemRate) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.transferVolume, other.transferVolume);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            programName, count, percentageRate,
            perItemRate, total, transferVolume);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillingInterchangeProgramFee.class,
                "programName", programName,
                "count", count,
                "percentageRate", percentageRate,
                "perItemRate", perItemRate,
                "total", total,
                "transferVolume", transferVolume);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String programName;

        private Long count;

        private BigDecimal percentageRate;

        private AmountDecimal perItemRate;

        private AmountDecimal total;

        private AmountDecimal transferVolume;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the interchange program.
         */
        public Builder programName(String programName) {
            Utils.checkNotNull(programName, "programName");
            this.programName = programName;
            return this;
        }


        /**
         * The number of transactions for this program.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        /**
         * The percentage rate for this program.
         */
        public Builder percentageRate(double percentageRate) {
            this.percentageRate = BigDecimal.valueOf(percentageRate);
            return this;
        }

        /**
         * The percentage rate for this program.
         */
        public Builder percentageRate(BigDecimal percentageRate) {
            Utils.checkNotNull(percentageRate, "percentageRate");
            this.percentageRate = percentageRate;
            return this;
        }


        /**
         * The per-item rate for this program.
         */
        public Builder perItemRate(AmountDecimal perItemRate) {
            Utils.checkNotNull(perItemRate, "perItemRate");
            this.perItemRate = perItemRate;
            return this;
        }


        /**
         * The total fee amount for this program.
         */
        public Builder total(AmountDecimal total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }


        /**
         * The total transfer volume for this program.
         */
        public Builder transferVolume(AmountDecimal transferVolume) {
            Utils.checkNotNull(transferVolume, "transferVolume");
            this.transferVolume = transferVolume;
            return this;
        }

        public BillingInterchangeProgramFee build() {

            return new BillingInterchangeProgramFee(
                programName, count, percentageRate,
                perItemRate, total, transferVolume);
        }

    }
}
