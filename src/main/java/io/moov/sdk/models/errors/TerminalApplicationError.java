/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.net.http.HttpResponse;
import java.util.Optional;

@SuppressWarnings("serial")
public class TerminalApplicationError extends MoovError {

    @Nullable
    private final Data data;

    @Nullable
    private final Throwable deserializationException;

    public TerminalApplicationError(
                int code,
                byte[] body,
                HttpResponse<?> rawResponse,
                @Nullable Data data,
                @Nullable Throwable deserializationException) {
        super("API error occurred", code, body, rawResponse, null);
        this.data = data;
        this.deserializationException = deserializationException;
    }

    /**
    * Parse a response into an instance of TerminalApplicationError. If deserialization of the response body fails,
    * the resulting TerminalApplicationError instance will have a null data() value and a non-null deserializationException().
    */
    public static TerminalApplicationError from(HttpResponse<InputStream> response) {
        try {
            byte[] bytes = Utils.extractByteArrayFromBody(response);
            Data data = Utils.mapper().readValue(bytes, Data.class);
            return new TerminalApplicationError(response.statusCode(), bytes, response, data, null);
        } catch (Exception e) {
            return new TerminalApplicationError(response.statusCode(), null, response, null, e);
        }
    }

    @Deprecated
    public Optional<String> platform() {
        return data().flatMap(Data::platform);
    }

    @Deprecated
    public Optional<String> appBundleID() {
        return data().flatMap(Data::appBundleID);
    }

    @Deprecated
    public Optional<String> packageName() {
        return data().flatMap(Data::packageName);
    }

    @Deprecated
    public Optional<String> sha256Digest() {
        return data().flatMap(Data::sha256Digest);
    }

    @Deprecated
    public Optional<String> versionCode() {
        return data().flatMap(Data::versionCode);
    }

    public Optional<Data> data() {
        return Optional.ofNullable(data);
    }

    /**
     * Returns the exception if an error occurs while deserializing the response body.
     */
    public Optional<Throwable> deserializationException() {
        return Optional.ofNullable(deserializationException);
    }

    public static class Data {

        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("platform")
        private Optional<String> platform;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("appBundleID")
        private Optional<String> appBundleID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("packageName")
        private Optional<String> packageName;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("sha256Digest")
        private Optional<String> sha256Digest;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("versionCode")
        private Optional<String> versionCode;

        @JsonCreator
        public Data(
                @JsonProperty("platform") Optional<String> platform,
                @JsonProperty("appBundleID") Optional<String> appBundleID,
                @JsonProperty("packageName") Optional<String> packageName,
                @JsonProperty("sha256Digest") Optional<String> sha256Digest,
                @JsonProperty("versionCode") Optional<String> versionCode) {
            Utils.checkNotNull(platform, "platform");
            Utils.checkNotNull(appBundleID, "appBundleID");
            Utils.checkNotNull(packageName, "packageName");
            Utils.checkNotNull(sha256Digest, "sha256Digest");
            Utils.checkNotNull(versionCode, "versionCode");
            this.platform = platform;
            this.appBundleID = appBundleID;
            this.packageName = packageName;
            this.sha256Digest = sha256Digest;
            this.versionCode = versionCode;
        }
        
        public Data() {
            this(Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty());
        }

        @JsonIgnore
        public Optional<String> platform() {
            return platform;
        }

        @JsonIgnore
        public Optional<String> appBundleID() {
            return appBundleID;
        }

        @JsonIgnore
        public Optional<String> packageName() {
            return packageName;
        }

        @JsonIgnore
        public Optional<String> sha256Digest() {
            return sha256Digest;
        }

        @JsonIgnore
        public Optional<String> versionCode() {
            return versionCode;
        }

        public static Builder builder() {
            return new Builder();
        }


        public Data withPlatform(String platform) {
            Utils.checkNotNull(platform, "platform");
            this.platform = Optional.ofNullable(platform);
            return this;
        }


        public Data withPlatform(Optional<String> platform) {
            Utils.checkNotNull(platform, "platform");
            this.platform = platform;
            return this;
        }

        public Data withAppBundleID(String appBundleID) {
            Utils.checkNotNull(appBundleID, "appBundleID");
            this.appBundleID = Optional.ofNullable(appBundleID);
            return this;
        }


        public Data withAppBundleID(Optional<String> appBundleID) {
            Utils.checkNotNull(appBundleID, "appBundleID");
            this.appBundleID = appBundleID;
            return this;
        }

        public Data withPackageName(String packageName) {
            Utils.checkNotNull(packageName, "packageName");
            this.packageName = Optional.ofNullable(packageName);
            return this;
        }


        public Data withPackageName(Optional<String> packageName) {
            Utils.checkNotNull(packageName, "packageName");
            this.packageName = packageName;
            return this;
        }

        public Data withSha256Digest(String sha256Digest) {
            Utils.checkNotNull(sha256Digest, "sha256Digest");
            this.sha256Digest = Optional.ofNullable(sha256Digest);
            return this;
        }


        public Data withSha256Digest(Optional<String> sha256Digest) {
            Utils.checkNotNull(sha256Digest, "sha256Digest");
            this.sha256Digest = sha256Digest;
            return this;
        }

        public Data withVersionCode(String versionCode) {
            Utils.checkNotNull(versionCode, "versionCode");
            this.versionCode = Optional.ofNullable(versionCode);
            return this;
        }


        public Data withVersionCode(Optional<String> versionCode) {
            Utils.checkNotNull(versionCode, "versionCode");
            this.versionCode = versionCode;
            return this;
        }

        @Override
        public boolean equals(java.lang.Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Data other = (Data) o;
            return 
                Utils.enhancedDeepEquals(this.platform, other.platform) &&
                Utils.enhancedDeepEquals(this.appBundleID, other.appBundleID) &&
                Utils.enhancedDeepEquals(this.packageName, other.packageName) &&
                Utils.enhancedDeepEquals(this.sha256Digest, other.sha256Digest) &&
                Utils.enhancedDeepEquals(this.versionCode, other.versionCode);
        }
        
        @Override
        public int hashCode() {
            return Utils.enhancedHash(
                platform, appBundleID, packageName,
                sha256Digest, versionCode);
        }
        
        @Override
        public String toString() {
            return Utils.toString(Data.class,
                    "platform", platform,
                    "appBundleID", appBundleID,
                    "packageName", packageName,
                    "sha256Digest", sha256Digest,
                    "versionCode", versionCode);
        }

        @SuppressWarnings("UnusedReturnValue")
        public final static class Builder {

            private Optional<String> platform = Optional.empty();

            private Optional<String> appBundleID = Optional.empty();

            private Optional<String> packageName = Optional.empty();

            private Optional<String> sha256Digest = Optional.empty();

            private Optional<String> versionCode = Optional.empty();

            private Builder() {
              // force use of static builder() method
            }


            public Builder platform(String platform) {
                Utils.checkNotNull(platform, "platform");
                this.platform = Optional.ofNullable(platform);
                return this;
            }

            public Builder platform(Optional<String> platform) {
                Utils.checkNotNull(platform, "platform");
                this.platform = platform;
                return this;
            }


            public Builder appBundleID(String appBundleID) {
                Utils.checkNotNull(appBundleID, "appBundleID");
                this.appBundleID = Optional.ofNullable(appBundleID);
                return this;
            }

            public Builder appBundleID(Optional<String> appBundleID) {
                Utils.checkNotNull(appBundleID, "appBundleID");
                this.appBundleID = appBundleID;
                return this;
            }


            public Builder packageName(String packageName) {
                Utils.checkNotNull(packageName, "packageName");
                this.packageName = Optional.ofNullable(packageName);
                return this;
            }

            public Builder packageName(Optional<String> packageName) {
                Utils.checkNotNull(packageName, "packageName");
                this.packageName = packageName;
                return this;
            }


            public Builder sha256Digest(String sha256Digest) {
                Utils.checkNotNull(sha256Digest, "sha256Digest");
                this.sha256Digest = Optional.ofNullable(sha256Digest);
                return this;
            }

            public Builder sha256Digest(Optional<String> sha256Digest) {
                Utils.checkNotNull(sha256Digest, "sha256Digest");
                this.sha256Digest = sha256Digest;
                return this;
            }


            public Builder versionCode(String versionCode) {
                Utils.checkNotNull(versionCode, "versionCode");
                this.versionCode = Optional.ofNullable(versionCode);
                return this;
            }

            public Builder versionCode(Optional<String> versionCode) {
                Utils.checkNotNull(versionCode, "versionCode");
                this.versionCode = versionCode;
                return this;
            }

            public Data build() {

                return new Data(
                    platform, appBundleID, packageName,
                    sha256Digest, versionCode);
            }

        }
    }

}

