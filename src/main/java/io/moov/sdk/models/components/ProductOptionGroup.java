/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;

/**
 * ProductOptionGroup
 * 
 * <p>Represents a group of product configuration options, such as size or color.
 */
public class ProductOptionGroup {

    @JsonProperty("name")
    private String name;

    /**
     * A detailed description of the option group.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The minimum number of options that must be selected from this group.
     * 
     * <p>A value of 0 indicates that no selection from this group is required.
     */
    @JsonProperty("minSelect")
    private int minSelect;

    /**
     * The maximum number of options that can be selected from this group.
     */
    @JsonProperty("maxSelect")
    private int maxSelect;

    /**
     * The options available within this group.
     */
    @JsonProperty("options")
    private List<ProductOption> options;

    @JsonCreator
    public ProductOptionGroup(
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("minSelect") int minSelect,
            @JsonProperty("maxSelect") int maxSelect,
            @JsonProperty("options") List<ProductOption> options) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(minSelect, "minSelect");
        Utils.checkNotNull(maxSelect, "maxSelect");
        Utils.checkNotNull(options, "options");
        this.name = name;
        this.description = description;
        this.minSelect = minSelect;
        this.maxSelect = maxSelect;
        this.options = options;
    }
    
    public ProductOptionGroup(
            String name,
            int minSelect,
            int maxSelect,
            List<ProductOption> options) {
        this(name, Optional.empty(), minSelect,
            maxSelect, options);
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A detailed description of the option group.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The minimum number of options that must be selected from this group.
     * 
     * <p>A value of 0 indicates that no selection from this group is required.
     */
    @JsonIgnore
    public int minSelect() {
        return minSelect;
    }

    /**
     * The maximum number of options that can be selected from this group.
     */
    @JsonIgnore
    public int maxSelect() {
        return maxSelect;
    }

    /**
     * The options available within this group.
     */
    @JsonIgnore
    public List<ProductOption> options() {
        return options;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ProductOptionGroup withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A detailed description of the option group.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    public ProductOptionGroup withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A detailed description of the option group.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    public ProductOptionGroup withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The minimum number of options that must be selected from this group.
     * 
     * <p>A value of 0 indicates that no selection from this group is required.
     */
    public ProductOptionGroup withMinSelect(int minSelect) {
        Utils.checkNotNull(minSelect, "minSelect");
        this.minSelect = minSelect;
        return this;
    }

    /**
     * The maximum number of options that can be selected from this group.
     */
    public ProductOptionGroup withMaxSelect(int maxSelect) {
        Utils.checkNotNull(maxSelect, "maxSelect");
        this.maxSelect = maxSelect;
        return this;
    }

    /**
     * The options available within this group.
     */
    public ProductOptionGroup withOptions(List<ProductOption> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductOptionGroup other = (ProductOptionGroup) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.minSelect, other.minSelect) &&
            Utils.enhancedDeepEquals(this.maxSelect, other.maxSelect) &&
            Utils.enhancedDeepEquals(this.options, other.options);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, minSelect,
            maxSelect, options);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductOptionGroup.class,
                "name", name,
                "description", description,
                "minSelect", minSelect,
                "maxSelect", maxSelect,
                "options", options);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private Optional<String> description = Optional.empty();

        private Integer minSelect;

        private Integer maxSelect;

        private List<ProductOption> options;

        private Builder() {
          // force use of static builder() method
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * A detailed description of the option group.
         * 
         * <p>- Must be valid UTF-8 text
         * - Supports Markdown for formatting
         * - HTML is not permitted and will be rejected
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A detailed description of the option group.
         * 
         * <p>- Must be valid UTF-8 text
         * - Supports Markdown for formatting
         * - HTML is not permitted and will be rejected
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The minimum number of options that must be selected from this group.
         * 
         * <p>A value of 0 indicates that no selection from this group is required.
         */
        public Builder minSelect(int minSelect) {
            Utils.checkNotNull(minSelect, "minSelect");
            this.minSelect = minSelect;
            return this;
        }


        /**
         * The maximum number of options that can be selected from this group.
         */
        public Builder maxSelect(int maxSelect) {
            Utils.checkNotNull(maxSelect, "maxSelect");
            this.maxSelect = maxSelect;
            return this;
        }


        /**
         * The options available within this group.
         */
        public Builder options(List<ProductOption> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        public ProductOptionGroup build() {

            return new ProductOptionGroup(
                name, description, minSelect,
                maxSelect, options);
        }

    }
}
