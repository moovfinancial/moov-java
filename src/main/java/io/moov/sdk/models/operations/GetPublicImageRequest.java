/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.moov.sdk.utils.LazySingletonValue;
import io.moov.sdk.utils.SpeakeasyMetadata;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class GetPublicImageRequest {

    @SpeakeasyMetadata("header:style=simple,explode=false,name=if-none-match")
    private Optional<String> ifNoneMatch;


    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=publicID")
    private String publicID;

    /**
     * Optional parameter to request a resized version of the image (WxH).
     * 
     * <p>If either dimension is 0, the image will be scaled proportionally based on
     * the non-zero dimension. Dimensions are capped at 2048 pixels. A default size
     * of 400x400 will be used if this parameter is omitted.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=size")
    private Optional<String> size;

    @JsonCreator
    public GetPublicImageRequest(
            Optional<String> ifNoneMatch,
            String publicID,
            Optional<String> size) {
        Utils.checkNotNull(ifNoneMatch, "ifNoneMatch");
        Utils.checkNotNull(publicID, "publicID");
        Utils.checkNotNull(size, "size");
        this.ifNoneMatch = ifNoneMatch;
        this.publicID = publicID;
        this.size = size;
    }
    
    public GetPublicImageRequest(
            String publicID) {
        this(Optional.empty(), publicID, Optional.empty());
    }

    @JsonIgnore
    public Optional<String> ifNoneMatch() {
        return ifNoneMatch;
    }

    @JsonIgnore
    public String publicID() {
        return publicID;
    }

    /**
     * Optional parameter to request a resized version of the image (WxH).
     * 
     * <p>If either dimension is 0, the image will be scaled proportionally based on
     * the non-zero dimension. Dimensions are capped at 2048 pixels. A default size
     * of 400x400 will be used if this parameter is omitted.
     */
    @JsonIgnore
    public Optional<String> size() {
        return size;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetPublicImageRequest withIfNoneMatch(String ifNoneMatch) {
        Utils.checkNotNull(ifNoneMatch, "ifNoneMatch");
        this.ifNoneMatch = Optional.ofNullable(ifNoneMatch);
        return this;
    }


    public GetPublicImageRequest withIfNoneMatch(Optional<String> ifNoneMatch) {
        Utils.checkNotNull(ifNoneMatch, "ifNoneMatch");
        this.ifNoneMatch = ifNoneMatch;
        return this;
    }

    public GetPublicImageRequest withPublicID(String publicID) {
        Utils.checkNotNull(publicID, "publicID");
        this.publicID = publicID;
        return this;
    }

    /**
     * Optional parameter to request a resized version of the image (WxH).
     * 
     * <p>If either dimension is 0, the image will be scaled proportionally based on
     * the non-zero dimension. Dimensions are capped at 2048 pixels. A default size
     * of 400x400 will be used if this parameter is omitted.
     */
    public GetPublicImageRequest withSize(String size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * Optional parameter to request a resized version of the image (WxH).
     * 
     * <p>If either dimension is 0, the image will be scaled proportionally based on
     * the non-zero dimension. Dimensions are capped at 2048 pixels. A default size
     * of 400x400 will be used if this parameter is omitted.
     */
    public GetPublicImageRequest withSize(Optional<String> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPublicImageRequest other = (GetPublicImageRequest) o;
        return 
            Utils.enhancedDeepEquals(this.ifNoneMatch, other.ifNoneMatch) &&
            Utils.enhancedDeepEquals(this.publicID, other.publicID) &&
            Utils.enhancedDeepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ifNoneMatch, publicID, size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPublicImageRequest.class,
                "ifNoneMatch", ifNoneMatch,
                "publicID", publicID,
                "size", size);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> ifNoneMatch = Optional.empty();

        private String publicID;

        private Optional<String> size;

        private Builder() {
          // force use of static builder() method
        }


        public Builder ifNoneMatch(String ifNoneMatch) {
            Utils.checkNotNull(ifNoneMatch, "ifNoneMatch");
            this.ifNoneMatch = Optional.ofNullable(ifNoneMatch);
            return this;
        }

        public Builder ifNoneMatch(Optional<String> ifNoneMatch) {
            Utils.checkNotNull(ifNoneMatch, "ifNoneMatch");
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }


        public Builder publicID(String publicID) {
            Utils.checkNotNull(publicID, "publicID");
            this.publicID = publicID;
            return this;
        }


        /**
         * Optional parameter to request a resized version of the image (WxH).
         * 
         * <p>If either dimension is 0, the image will be scaled proportionally based on
         * the non-zero dimension. Dimensions are capped at 2048 pixels. A default size
         * of 400x400 will be used if this parameter is omitted.
         */
        public Builder size(String size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Optional parameter to request a resized version of the image (WxH).
         * 
         * <p>If either dimension is 0, the image will be scaled proportionally based on
         * the non-zero dimension. Dimensions are capped at 2048 pixels. A default size
         * of 400x400 will be used if this parameter is omitted.
         */
        public Builder size(Optional<String> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public GetPublicImageRequest build() {
            if (size == null) {
                size = _SINGLETON_VALUE_Size.value();
            }

            return new GetPublicImageRequest(
                ifNoneMatch, publicID, size);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Size =
                new LazySingletonValue<>(
                        "size",
                        "\"400x400\"",
                        new TypeReference<Optional<String>>() {});
    }
}
