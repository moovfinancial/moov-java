/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Product
 * 
 * <p>A product available for purchase, which may have optional configuration options.
 */
public class Product {
    /**
     * Unique identifier for a product.
     */
    @JsonProperty("productID")
    private String productID;


    @JsonProperty("title")
    private String title;

    /**
     * A detailed description of the product.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * A product's starting price, before applying modifiers.
     */
    @JsonProperty("basePrice")
    private AmountDecimal basePrice;

    /**
     * Optional configuration options for a product, such as size or color.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optionGroups")
    private Optional<? extends List<ProductOptionGroup>> optionGroups;

    /**
     * Optional images associated with the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private Optional<? extends List<ProductImageMetadata>> images;

    /**
     * The date and time when the product was added.
     */
    @JsonProperty("createdOn")
    private OffsetDateTime createdOn;

    /**
     * The date and time when the product was last updated.
     */
    @JsonProperty("updatedOn")
    private OffsetDateTime updatedOn;

    /**
     * The date and time when the product was disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabledOn")
    private Optional<OffsetDateTime> disabledOn;

    @JsonCreator
    public Product(
            @JsonProperty("productID") String productID,
            @JsonProperty("title") String title,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("basePrice") AmountDecimal basePrice,
            @JsonProperty("optionGroups") Optional<? extends List<ProductOptionGroup>> optionGroups,
            @JsonProperty("images") Optional<? extends List<ProductImageMetadata>> images,
            @JsonProperty("createdOn") OffsetDateTime createdOn,
            @JsonProperty("updatedOn") OffsetDateTime updatedOn,
            @JsonProperty("disabledOn") Optional<OffsetDateTime> disabledOn) {
        Utils.checkNotNull(productID, "productID");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(basePrice, "basePrice");
        Utils.checkNotNull(optionGroups, "optionGroups");
        Utils.checkNotNull(images, "images");
        Utils.checkNotNull(createdOn, "createdOn");
        Utils.checkNotNull(updatedOn, "updatedOn");
        Utils.checkNotNull(disabledOn, "disabledOn");
        this.productID = productID;
        this.title = title;
        this.description = description;
        this.basePrice = basePrice;
        this.optionGroups = optionGroups;
        this.images = images;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
        this.disabledOn = disabledOn;
    }
    
    public Product(
            String productID,
            String title,
            AmountDecimal basePrice,
            OffsetDateTime createdOn,
            OffsetDateTime updatedOn) {
        this(productID, title, Optional.empty(),
            basePrice, Optional.empty(), Optional.empty(),
            createdOn, updatedOn, Optional.empty());
    }

    /**
     * Unique identifier for a product.
     */
    @JsonIgnore
    public String productID() {
        return productID;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    /**
     * A detailed description of the product.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * A product's starting price, before applying modifiers.
     */
    @JsonIgnore
    public AmountDecimal basePrice() {
        return basePrice;
    }

    /**
     * Optional configuration options for a product, such as size or color.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ProductOptionGroup>> optionGroups() {
        return (Optional<List<ProductOptionGroup>>) optionGroups;
    }

    /**
     * Optional images associated with the product.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ProductImageMetadata>> images() {
        return (Optional<List<ProductImageMetadata>>) images;
    }

    /**
     * The date and time when the product was added.
     */
    @JsonIgnore
    public OffsetDateTime createdOn() {
        return createdOn;
    }

    /**
     * The date and time when the product was last updated.
     */
    @JsonIgnore
    public OffsetDateTime updatedOn() {
        return updatedOn;
    }

    /**
     * The date and time when the product was disabled.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> disabledOn() {
        return disabledOn;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for a product.
     */
    public Product withProductID(String productID) {
        Utils.checkNotNull(productID, "productID");
        this.productID = productID;
        return this;
    }

    public Product withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * A detailed description of the product.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    public Product withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A detailed description of the product.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    public Product withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A product's starting price, before applying modifiers.
     */
    public Product withBasePrice(AmountDecimal basePrice) {
        Utils.checkNotNull(basePrice, "basePrice");
        this.basePrice = basePrice;
        return this;
    }

    /**
     * Optional configuration options for a product, such as size or color.
     */
    public Product withOptionGroups(List<ProductOptionGroup> optionGroups) {
        Utils.checkNotNull(optionGroups, "optionGroups");
        this.optionGroups = Optional.ofNullable(optionGroups);
        return this;
    }


    /**
     * Optional configuration options for a product, such as size or color.
     */
    public Product withOptionGroups(Optional<? extends List<ProductOptionGroup>> optionGroups) {
        Utils.checkNotNull(optionGroups, "optionGroups");
        this.optionGroups = optionGroups;
        return this;
    }

    /**
     * Optional images associated with the product.
     */
    public Product withImages(List<ProductImageMetadata> images) {
        Utils.checkNotNull(images, "images");
        this.images = Optional.ofNullable(images);
        return this;
    }


    /**
     * Optional images associated with the product.
     */
    public Product withImages(Optional<? extends List<ProductImageMetadata>> images) {
        Utils.checkNotNull(images, "images");
        this.images = images;
        return this;
    }

    /**
     * The date and time when the product was added.
     */
    public Product withCreatedOn(OffsetDateTime createdOn) {
        Utils.checkNotNull(createdOn, "createdOn");
        this.createdOn = createdOn;
        return this;
    }

    /**
     * The date and time when the product was last updated.
     */
    public Product withUpdatedOn(OffsetDateTime updatedOn) {
        Utils.checkNotNull(updatedOn, "updatedOn");
        this.updatedOn = updatedOn;
        return this;
    }

    /**
     * The date and time when the product was disabled.
     */
    public Product withDisabledOn(OffsetDateTime disabledOn) {
        Utils.checkNotNull(disabledOn, "disabledOn");
        this.disabledOn = Optional.ofNullable(disabledOn);
        return this;
    }


    /**
     * The date and time when the product was disabled.
     */
    public Product withDisabledOn(Optional<OffsetDateTime> disabledOn) {
        Utils.checkNotNull(disabledOn, "disabledOn");
        this.disabledOn = disabledOn;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Product other = (Product) o;
        return 
            Utils.enhancedDeepEquals(this.productID, other.productID) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.basePrice, other.basePrice) &&
            Utils.enhancedDeepEquals(this.optionGroups, other.optionGroups) &&
            Utils.enhancedDeepEquals(this.images, other.images) &&
            Utils.enhancedDeepEquals(this.createdOn, other.createdOn) &&
            Utils.enhancedDeepEquals(this.updatedOn, other.updatedOn) &&
            Utils.enhancedDeepEquals(this.disabledOn, other.disabledOn);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            productID, title, description,
            basePrice, optionGroups, images,
            createdOn, updatedOn, disabledOn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Product.class,
                "productID", productID,
                "title", title,
                "description", description,
                "basePrice", basePrice,
                "optionGroups", optionGroups,
                "images", images,
                "createdOn", createdOn,
                "updatedOn", updatedOn,
                "disabledOn", disabledOn);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String productID;

        private String title;

        private Optional<String> description = Optional.empty();

        private AmountDecimal basePrice;

        private Optional<? extends List<ProductOptionGroup>> optionGroups = Optional.empty();

        private Optional<? extends List<ProductImageMetadata>> images = Optional.empty();

        private OffsetDateTime createdOn;

        private OffsetDateTime updatedOn;

        private Optional<OffsetDateTime> disabledOn = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier for a product.
         */
        public Builder productID(String productID) {
            Utils.checkNotNull(productID, "productID");
            this.productID = productID;
            return this;
        }


        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * A detailed description of the product.
         * 
         * <p>- Must be valid UTF-8 text
         * - Supports Markdown for formatting
         * - HTML is not permitted and will be rejected
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A detailed description of the product.
         * 
         * <p>- Must be valid UTF-8 text
         * - Supports Markdown for formatting
         * - HTML is not permitted and will be rejected
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * A product's starting price, before applying modifiers.
         */
        public Builder basePrice(AmountDecimal basePrice) {
            Utils.checkNotNull(basePrice, "basePrice");
            this.basePrice = basePrice;
            return this;
        }


        /**
         * Optional configuration options for a product, such as size or color.
         */
        public Builder optionGroups(List<ProductOptionGroup> optionGroups) {
            Utils.checkNotNull(optionGroups, "optionGroups");
            this.optionGroups = Optional.ofNullable(optionGroups);
            return this;
        }

        /**
         * Optional configuration options for a product, such as size or color.
         */
        public Builder optionGroups(Optional<? extends List<ProductOptionGroup>> optionGroups) {
            Utils.checkNotNull(optionGroups, "optionGroups");
            this.optionGroups = optionGroups;
            return this;
        }


        /**
         * Optional images associated with the product.
         */
        public Builder images(List<ProductImageMetadata> images) {
            Utils.checkNotNull(images, "images");
            this.images = Optional.ofNullable(images);
            return this;
        }

        /**
         * Optional images associated with the product.
         */
        public Builder images(Optional<? extends List<ProductImageMetadata>> images) {
            Utils.checkNotNull(images, "images");
            this.images = images;
            return this;
        }


        /**
         * The date and time when the product was added.
         */
        public Builder createdOn(OffsetDateTime createdOn) {
            Utils.checkNotNull(createdOn, "createdOn");
            this.createdOn = createdOn;
            return this;
        }


        /**
         * The date and time when the product was last updated.
         */
        public Builder updatedOn(OffsetDateTime updatedOn) {
            Utils.checkNotNull(updatedOn, "updatedOn");
            this.updatedOn = updatedOn;
            return this;
        }


        /**
         * The date and time when the product was disabled.
         */
        public Builder disabledOn(OffsetDateTime disabledOn) {
            Utils.checkNotNull(disabledOn, "disabledOn");
            this.disabledOn = Optional.ofNullable(disabledOn);
            return this;
        }

        /**
         * The date and time when the product was disabled.
         */
        public Builder disabledOn(Optional<OffsetDateTime> disabledOn) {
            Utils.checkNotNull(disabledOn, "disabledOn");
            this.disabledOn = disabledOn;
            return this;
        }

        public Product build() {

            return new Product(
                productID, title, description,
                basePrice, optionGroups, images,
                createdOn, updatedOn, disabledOn);
        }

    }
}
