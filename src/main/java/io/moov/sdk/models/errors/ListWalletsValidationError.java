/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


@SuppressWarnings("serial")
public class ListWalletsValidationError extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("walletType")
    private Optional<String> walletType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip")
    private Optional<String> skip;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<String> count;

    @JsonCreator
    public ListWalletsValidationError(
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("walletType") Optional<String> walletType,
            @JsonProperty("skip") Optional<String> skip,
            @JsonProperty("count") Optional<String> count) {
        super("API error occurred");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(walletType, "walletType");
        Utils.checkNotNull(skip, "skip");
        Utils.checkNotNull(count, "count");
        this.status = status;
        this.walletType = walletType;
        this.skip = skip;
        this.count = count;
    }
    
    public ListWalletsValidationError() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    @JsonIgnore
    public Optional<String> walletType() {
        return walletType;
    }

    @JsonIgnore
    public Optional<String> skip() {
        return skip;
    }

    @JsonIgnore
    public Optional<String> count() {
        return count;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ListWalletsValidationError withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public ListWalletsValidationError withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ListWalletsValidationError withWalletType(String walletType) {
        Utils.checkNotNull(walletType, "walletType");
        this.walletType = Optional.ofNullable(walletType);
        return this;
    }


    public ListWalletsValidationError withWalletType(Optional<String> walletType) {
        Utils.checkNotNull(walletType, "walletType");
        this.walletType = walletType;
        return this;
    }

    public ListWalletsValidationError withSkip(String skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = Optional.ofNullable(skip);
        return this;
    }


    public ListWalletsValidationError withSkip(Optional<String> skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = skip;
        return this;
    }

    public ListWalletsValidationError withCount(String count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    public ListWalletsValidationError withCount(Optional<String> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListWalletsValidationError other = (ListWalletsValidationError) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.walletType, other.walletType) &&
            Utils.enhancedDeepEquals(this.skip, other.skip) &&
            Utils.enhancedDeepEquals(this.count, other.count);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status, walletType, skip,
            count);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListWalletsValidationError.class,
                "status", status,
                "walletType", walletType,
                "skip", skip,
                "count", count);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> status = Optional.empty();

        private Optional<String> walletType = Optional.empty();

        private Optional<String> skip = Optional.empty();

        private Optional<String> count = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder walletType(String walletType) {
            Utils.checkNotNull(walletType, "walletType");
            this.walletType = Optional.ofNullable(walletType);
            return this;
        }

        public Builder walletType(Optional<String> walletType) {
            Utils.checkNotNull(walletType, "walletType");
            this.walletType = walletType;
            return this;
        }


        public Builder skip(String skip) {
            Utils.checkNotNull(skip, "skip");
            this.skip = Optional.ofNullable(skip);
            return this;
        }

        public Builder skip(Optional<String> skip) {
            Utils.checkNotNull(skip, "skip");
            this.skip = skip;
            return this;
        }


        public Builder count(String count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        public Builder count(Optional<String> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public ListWalletsValidationError build() {

            return new ListWalletsValidationError(
                status, walletType, skip,
                count);
        }

    }
}

