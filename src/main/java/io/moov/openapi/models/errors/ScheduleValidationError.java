/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

@SuppressWarnings("serial")
public class ScheduleValidationError extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("occurrences")
    private Optional<String> occurrences;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recur")
    private Optional<String> recur;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonCreator
    public ScheduleValidationError(
            @JsonProperty("occurrences") Optional<String> occurrences,
            @JsonProperty("recur") Optional<String> recur,
            @JsonProperty("description") Optional<String> description) {
        Utils.checkNotNull(occurrences, "occurrences");
        Utils.checkNotNull(recur, "recur");
        Utils.checkNotNull(description, "description");
        this.occurrences = occurrences;
        this.recur = recur;
        this.description = description;
    }
    
    public ScheduleValidationError() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    public Optional<String> occurrences(){
        return occurrences;
    }

    public Optional<String> recur(){
        return recur;
    }

    public Optional<String> description(){
        return description;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public ScheduleValidationError withOccurrences(String occurrences) {
        Utils.checkNotNull(occurrences, "occurrences");
        this.occurrences = Optional.ofNullable(occurrences);
        return this;
    }
    
    public ScheduleValidationError withOccurrences(Optional<String> occurrences) {
        Utils.checkNotNull(occurrences, "occurrences");
        this.occurrences = occurrences;
        return this;
    }

    public ScheduleValidationError withRecur(String recur) {
        Utils.checkNotNull(recur, "recur");
        this.recur = Optional.ofNullable(recur);
        return this;
    }
    
    public ScheduleValidationError withRecur(Optional<String> recur) {
        Utils.checkNotNull(recur, "recur");
        this.recur = recur;
        return this;
    }

    public ScheduleValidationError withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }
    
    public ScheduleValidationError withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ScheduleValidationError other = (ScheduleValidationError) o;
        return
            Objects.deepEquals(this.occurrences, other.occurrences) &&
            Objects.deepEquals(this.recur, other.recur) &&
            Objects.deepEquals(this.description, other.description);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            occurrences,
            recur,
            description);
    }

    @Override
    public String toString() {
        return Utils.toString(ScheduleValidationError.class,
                "occurrences", occurrences,
                "recur", recur,
                "description", description);
    }

    public final static class Builder {

        private Optional<String> occurrences = Optional.empty();

        private Optional<String> recur = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder occurrences(String occurrences) {
            Utils.checkNotNull(occurrences, "occurrences");
            this.occurrences = Optional.ofNullable(occurrences);
            return this;
        }
        
        public Builder occurrences(Optional<String> occurrences) {
            Utils.checkNotNull(occurrences, "occurrences");
            this.occurrences = occurrences;
            return this;
        }

        public Builder recur(String recur) {
            Utils.checkNotNull(recur, "recur");
            this.recur = Optional.ofNullable(recur);
            return this;
        }
        
        public Builder recur(Optional<String> recur) {
            Utils.checkNotNull(recur, "recur");
            this.recur = recur;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }
        
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public ScheduleValidationError build() {
            return new ScheduleValidationError(
                occurrences,
                recur,
                description);
        }
    }
}
