/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;


public class ProductOptionGroupValidationError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minSelect")
    private Optional<String> minSelect;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxSelect")
    private Optional<String> maxSelect;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends Map<String, ProductOptionValidationError>> options;

    @JsonCreator
    public ProductOptionGroupValidationError(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("minSelect") Optional<String> minSelect,
            @JsonProperty("maxSelect") Optional<String> maxSelect,
            @JsonProperty("options") Optional<? extends Map<String, ProductOptionValidationError>> options) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(minSelect, "minSelect");
        Utils.checkNotNull(maxSelect, "maxSelect");
        Utils.checkNotNull(options, "options");
        this.name = name;
        this.description = description;
        this.minSelect = minSelect;
        this.maxSelect = maxSelect;
        this.options = options;
    }
    
    public ProductOptionGroupValidationError() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> minSelect() {
        return minSelect;
    }

    @JsonIgnore
    public Optional<String> maxSelect() {
        return maxSelect;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, ProductOptionValidationError>> options() {
        return (Optional<Map<String, ProductOptionValidationError>>) options;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ProductOptionGroupValidationError withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public ProductOptionGroupValidationError withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ProductOptionGroupValidationError withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public ProductOptionGroupValidationError withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ProductOptionGroupValidationError withMinSelect(String minSelect) {
        Utils.checkNotNull(minSelect, "minSelect");
        this.minSelect = Optional.ofNullable(minSelect);
        return this;
    }


    public ProductOptionGroupValidationError withMinSelect(Optional<String> minSelect) {
        Utils.checkNotNull(minSelect, "minSelect");
        this.minSelect = minSelect;
        return this;
    }

    public ProductOptionGroupValidationError withMaxSelect(String maxSelect) {
        Utils.checkNotNull(maxSelect, "maxSelect");
        this.maxSelect = Optional.ofNullable(maxSelect);
        return this;
    }


    public ProductOptionGroupValidationError withMaxSelect(Optional<String> maxSelect) {
        Utils.checkNotNull(maxSelect, "maxSelect");
        this.maxSelect = maxSelect;
        return this;
    }

    public ProductOptionGroupValidationError withOptions(Map<String, ProductOptionValidationError> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }


    public ProductOptionGroupValidationError withOptions(Optional<? extends Map<String, ProductOptionValidationError>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductOptionGroupValidationError other = (ProductOptionGroupValidationError) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.minSelect, other.minSelect) &&
            Utils.enhancedDeepEquals(this.maxSelect, other.maxSelect) &&
            Utils.enhancedDeepEquals(this.options, other.options);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, minSelect,
            maxSelect, options);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductOptionGroupValidationError.class,
                "name", name,
                "description", description,
                "minSelect", minSelect,
                "maxSelect", maxSelect,
                "options", options);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> minSelect = Optional.empty();

        private Optional<String> maxSelect = Optional.empty();

        private Optional<? extends Map<String, ProductOptionValidationError>> options = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder minSelect(String minSelect) {
            Utils.checkNotNull(minSelect, "minSelect");
            this.minSelect = Optional.ofNullable(minSelect);
            return this;
        }

        public Builder minSelect(Optional<String> minSelect) {
            Utils.checkNotNull(minSelect, "minSelect");
            this.minSelect = minSelect;
            return this;
        }


        public Builder maxSelect(String maxSelect) {
            Utils.checkNotNull(maxSelect, "maxSelect");
            this.maxSelect = Optional.ofNullable(maxSelect);
            return this;
        }

        public Builder maxSelect(Optional<String> maxSelect) {
            Utils.checkNotNull(maxSelect, "maxSelect");
            this.maxSelect = maxSelect;
            return this;
        }


        public Builder options(Map<String, ProductOptionValidationError> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        public Builder options(Optional<? extends Map<String, ProductOptionValidationError>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        public ProductOptionGroupValidationError build() {

            return new ProductOptionGroupValidationError(
                name, description, minSelect,
                maxSelect, options);
        }

    }
}
