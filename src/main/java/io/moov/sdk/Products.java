/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk;

import static io.moov.sdk.operations.Operations.RequestOperation;

import io.moov.sdk.models.components.ProductRequest;
import io.moov.sdk.models.operations.CreateProductRequest;
import io.moov.sdk.models.operations.CreateProductRequestBuilder;
import io.moov.sdk.models.operations.CreateProductResponse;
import io.moov.sdk.models.operations.DisableProductRequest;
import io.moov.sdk.models.operations.DisableProductRequestBuilder;
import io.moov.sdk.models.operations.DisableProductResponse;
import io.moov.sdk.models.operations.GetProductRequest;
import io.moov.sdk.models.operations.GetProductRequestBuilder;
import io.moov.sdk.models.operations.GetProductResponse;
import io.moov.sdk.models.operations.ListProductsRequest;
import io.moov.sdk.models.operations.ListProductsRequestBuilder;
import io.moov.sdk.models.operations.ListProductsResponse;
import io.moov.sdk.models.operations.UpdateProductRequest;
import io.moov.sdk.models.operations.UpdateProductRequestBuilder;
import io.moov.sdk.models.operations.UpdateProductResponse;
import io.moov.sdk.operations.CreateProduct;
import io.moov.sdk.operations.DisableProduct;
import io.moov.sdk.operations.GetProduct;
import io.moov.sdk.operations.ListProducts;
import io.moov.sdk.operations.UpdateProduct;
import io.moov.sdk.utils.Headers;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;


public class Products {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    Products(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List active (non-disabled) products for an account.
     * 
     * @return The call builder
     */
    public ListProductsRequestBuilder list() {
        return new ListProductsRequestBuilder(sdkConfiguration);
    }

    /**
     * List active (non-disabled) products for an account.
     * 
     * @param accountID 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListProductsResponse list(String accountID) {
        return list(accountID, Optional.empty(), Optional.empty());
    }

    /**
     * List active (non-disabled) products for an account.
     * 
     * @param accountID 
     * @param skip 
     * @param count 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListProductsResponse list(
            String accountID, Optional<Long> skip,
            Optional<Long> count) {
        ListProductsRequest request =
            ListProductsRequest
                .builder()
                .accountID(accountID)
                .skip(skip)
                .count(count)
                .build();
        RequestOperation<ListProductsRequest, ListProductsResponse> operation
              = new ListProducts.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Creates a new product for the specified account.
     * 
     * @return The call builder
     */
    public CreateProductRequestBuilder create() {
        return new CreateProductRequestBuilder(sdkConfiguration);
    }

    /**
     * Creates a new product for the specified account.
     * 
     * @param accountID 
     * @param productRequest Request to create or update a product.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateProductResponse create(String accountID, ProductRequest productRequest) {
        CreateProductRequest request =
            CreateProductRequest
                .builder()
                .accountID(accountID)
                .productRequest(productRequest)
                .build();
        RequestOperation<CreateProductRequest, CreateProductResponse> operation
              = new CreateProduct.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a product by ID.
     * 
     * @return The call builder
     */
    public GetProductRequestBuilder get() {
        return new GetProductRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a product by ID.
     * 
     * @param accountID 
     * @param productID 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetProductResponse get(String accountID, String productID) {
        GetProductRequest request =
            GetProductRequest
                .builder()
                .accountID(accountID)
                .productID(productID)
                .build();
        RequestOperation<GetProductRequest, GetProductResponse> operation
              = new GetProduct.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a product and its options.
     * 
     * @return The call builder
     */
    public UpdateProductRequestBuilder update() {
        return new UpdateProductRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a product and its options.
     * 
     * @param accountID 
     * @param productID 
     * @param productRequest Request to create or update a product.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateProductResponse update(
            String accountID, String productID,
            ProductRequest productRequest) {
        UpdateProductRequest request =
            UpdateProductRequest
                .builder()
                .accountID(accountID)
                .productID(productID)
                .productRequest(productRequest)
                .build();
        RequestOperation<UpdateProductRequest, UpdateProductResponse> operation
              = new UpdateProduct.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Disable a product by ID.
     * 
     * <p>The product will no longer be available, but will remain in the system for historical and reporting
     * purposes.
     * 
     * @return The call builder
     */
    public DisableProductRequestBuilder disable() {
        return new DisableProductRequestBuilder(sdkConfiguration);
    }

    /**
     * Disable a product by ID.
     * 
     * <p>The product will no longer be available, but will remain in the system for historical and reporting
     * purposes.
     * 
     * @param accountID 
     * @param productID 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DisableProductResponse disable(String accountID, String productID) {
        DisableProductRequest request =
            DisableProductRequest
                .builder()
                .accountID(accountID)
                .productID(productID)
                .build();
        RequestOperation<DisableProductRequest, DisableProductResponse> operation
              = new DisableProduct.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
