/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * GeneratedBy
 * 
 * <p>The entity that generated the fee.
 */
public class GeneratedBy {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferID")
    private Optional<String> transferID;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardID")
    private Optional<String> cardID;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disputeID")
    private Optional<String> disputeID;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountID")
    private Optional<String> accountID;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccountID")
    private Optional<String> bankAccountID;

    @JsonCreator
    public GeneratedBy(
            @JsonProperty("transferID") Optional<String> transferID,
            @JsonProperty("cardID") Optional<String> cardID,
            @JsonProperty("disputeID") Optional<String> disputeID,
            @JsonProperty("accountID") Optional<String> accountID,
            @JsonProperty("bankAccountID") Optional<String> bankAccountID) {
        Utils.checkNotNull(transferID, "transferID");
        Utils.checkNotNull(cardID, "cardID");
        Utils.checkNotNull(disputeID, "disputeID");
        Utils.checkNotNull(accountID, "accountID");
        Utils.checkNotNull(bankAccountID, "bankAccountID");
        this.transferID = transferID;
        this.cardID = cardID;
        this.disputeID = disputeID;
        this.accountID = accountID;
        this.bankAccountID = bankAccountID;
    }
    
    public GeneratedBy() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> transferID() {
        return transferID;
    }

    @JsonIgnore
    public Optional<String> cardID() {
        return cardID;
    }

    @JsonIgnore
    public Optional<String> disputeID() {
        return disputeID;
    }

    @JsonIgnore
    public Optional<String> accountID() {
        return accountID;
    }

    @JsonIgnore
    public Optional<String> bankAccountID() {
        return bankAccountID;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GeneratedBy withTransferID(String transferID) {
        Utils.checkNotNull(transferID, "transferID");
        this.transferID = Optional.ofNullable(transferID);
        return this;
    }


    public GeneratedBy withTransferID(Optional<String> transferID) {
        Utils.checkNotNull(transferID, "transferID");
        this.transferID = transferID;
        return this;
    }

    public GeneratedBy withCardID(String cardID) {
        Utils.checkNotNull(cardID, "cardID");
        this.cardID = Optional.ofNullable(cardID);
        return this;
    }


    public GeneratedBy withCardID(Optional<String> cardID) {
        Utils.checkNotNull(cardID, "cardID");
        this.cardID = cardID;
        return this;
    }

    public GeneratedBy withDisputeID(String disputeID) {
        Utils.checkNotNull(disputeID, "disputeID");
        this.disputeID = Optional.ofNullable(disputeID);
        return this;
    }


    public GeneratedBy withDisputeID(Optional<String> disputeID) {
        Utils.checkNotNull(disputeID, "disputeID");
        this.disputeID = disputeID;
        return this;
    }

    public GeneratedBy withAccountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = Optional.ofNullable(accountID);
        return this;
    }


    public GeneratedBy withAccountID(Optional<String> accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    public GeneratedBy withBankAccountID(String bankAccountID) {
        Utils.checkNotNull(bankAccountID, "bankAccountID");
        this.bankAccountID = Optional.ofNullable(bankAccountID);
        return this;
    }


    public GeneratedBy withBankAccountID(Optional<String> bankAccountID) {
        Utils.checkNotNull(bankAccountID, "bankAccountID");
        this.bankAccountID = bankAccountID;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeneratedBy other = (GeneratedBy) o;
        return 
            Utils.enhancedDeepEquals(this.transferID, other.transferID) &&
            Utils.enhancedDeepEquals(this.cardID, other.cardID) &&
            Utils.enhancedDeepEquals(this.disputeID, other.disputeID) &&
            Utils.enhancedDeepEquals(this.accountID, other.accountID) &&
            Utils.enhancedDeepEquals(this.bankAccountID, other.bankAccountID);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            transferID, cardID, disputeID,
            accountID, bankAccountID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GeneratedBy.class,
                "transferID", transferID,
                "cardID", cardID,
                "disputeID", disputeID,
                "accountID", accountID,
                "bankAccountID", bankAccountID);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> transferID = Optional.empty();

        private Optional<String> cardID = Optional.empty();

        private Optional<String> disputeID = Optional.empty();

        private Optional<String> accountID = Optional.empty();

        private Optional<String> bankAccountID = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder transferID(String transferID) {
            Utils.checkNotNull(transferID, "transferID");
            this.transferID = Optional.ofNullable(transferID);
            return this;
        }

        public Builder transferID(Optional<String> transferID) {
            Utils.checkNotNull(transferID, "transferID");
            this.transferID = transferID;
            return this;
        }


        public Builder cardID(String cardID) {
            Utils.checkNotNull(cardID, "cardID");
            this.cardID = Optional.ofNullable(cardID);
            return this;
        }

        public Builder cardID(Optional<String> cardID) {
            Utils.checkNotNull(cardID, "cardID");
            this.cardID = cardID;
            return this;
        }


        public Builder disputeID(String disputeID) {
            Utils.checkNotNull(disputeID, "disputeID");
            this.disputeID = Optional.ofNullable(disputeID);
            return this;
        }

        public Builder disputeID(Optional<String> disputeID) {
            Utils.checkNotNull(disputeID, "disputeID");
            this.disputeID = disputeID;
            return this;
        }


        public Builder accountID(String accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = Optional.ofNullable(accountID);
            return this;
        }

        public Builder accountID(Optional<String> accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = accountID;
            return this;
        }


        public Builder bankAccountID(String bankAccountID) {
            Utils.checkNotNull(bankAccountID, "bankAccountID");
            this.bankAccountID = Optional.ofNullable(bankAccountID);
            return this;
        }

        public Builder bankAccountID(Optional<String> bankAccountID) {
            Utils.checkNotNull(bankAccountID, "bankAccountID");
            this.bankAccountID = bankAccountID;
            return this;
        }

        public GeneratedBy build() {

            return new GeneratedBy(
                transferID, cardID, disputeID,
                accountID, bankAccountID);
        }

    }
}
