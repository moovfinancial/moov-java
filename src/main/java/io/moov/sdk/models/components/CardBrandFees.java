/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * CardBrandFees
 * 
 * <p>A detailed breakdown of fees for a specific card brand.
 */
public class CardBrandFees {
    /**
     * Details of interchange fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interchange")
    private Optional<? extends BillingCountAndAmount> interchange;

    /**
     * A list of interchange program fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interchangePrograms")
    private Optional<? extends List<BillingInterchangeProgramFee>> interchangePrograms;

    /**
     * Details of network passthrough fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkPassthrough")
    private Optional<? extends BillingCountAndAmount> networkPassthrough;

    /**
     * Details of completed domestic online transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedDomesticOnline")
    private Optional<? extends BillingCountAndAmount> completedDomesticOnline;

    /**
     * Details of completed domestic in-person transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedDomesticInPerson")
    private Optional<? extends BillingCountAndAmount> completedDomesticInPerson;

    /**
     * Details of completed international online transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedInternationalOnline")
    private Optional<? extends BillingCountAndAmount> completedInternationalOnline;

    /**
     * Details of completed international in-person transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedInternationalInPerson")
    private Optional<? extends BillingCountAndAmount> completedInternationalInPerson;

    /**
     * Details of declined transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("declines")
    private Optional<? extends BillingCountAndAmount> declines;

    /**
     * Details of refunded transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private Optional<? extends BillingCountAndAmount> refunds;

    /**
     * Total fees for this card brand.
     */
    @JsonProperty("total")
    private BillingCountAndAmount total;

    @JsonCreator
    public CardBrandFees(
            @JsonProperty("interchange") Optional<? extends BillingCountAndAmount> interchange,
            @JsonProperty("interchangePrograms") Optional<? extends List<BillingInterchangeProgramFee>> interchangePrograms,
            @JsonProperty("networkPassthrough") Optional<? extends BillingCountAndAmount> networkPassthrough,
            @JsonProperty("completedDomesticOnline") Optional<? extends BillingCountAndAmount> completedDomesticOnline,
            @JsonProperty("completedDomesticInPerson") Optional<? extends BillingCountAndAmount> completedDomesticInPerson,
            @JsonProperty("completedInternationalOnline") Optional<? extends BillingCountAndAmount> completedInternationalOnline,
            @JsonProperty("completedInternationalInPerson") Optional<? extends BillingCountAndAmount> completedInternationalInPerson,
            @JsonProperty("declines") Optional<? extends BillingCountAndAmount> declines,
            @JsonProperty("refunds") Optional<? extends BillingCountAndAmount> refunds,
            @JsonProperty("total") BillingCountAndAmount total) {
        Utils.checkNotNull(interchange, "interchange");
        Utils.checkNotNull(interchangePrograms, "interchangePrograms");
        Utils.checkNotNull(networkPassthrough, "networkPassthrough");
        Utils.checkNotNull(completedDomesticOnline, "completedDomesticOnline");
        Utils.checkNotNull(completedDomesticInPerson, "completedDomesticInPerson");
        Utils.checkNotNull(completedInternationalOnline, "completedInternationalOnline");
        Utils.checkNotNull(completedInternationalInPerson, "completedInternationalInPerson");
        Utils.checkNotNull(declines, "declines");
        Utils.checkNotNull(refunds, "refunds");
        Utils.checkNotNull(total, "total");
        this.interchange = interchange;
        this.interchangePrograms = interchangePrograms;
        this.networkPassthrough = networkPassthrough;
        this.completedDomesticOnline = completedDomesticOnline;
        this.completedDomesticInPerson = completedDomesticInPerson;
        this.completedInternationalOnline = completedInternationalOnline;
        this.completedInternationalInPerson = completedInternationalInPerson;
        this.declines = declines;
        this.refunds = refunds;
        this.total = total;
    }
    
    public CardBrandFees(
            BillingCountAndAmount total) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            total);
    }

    /**
     * Details of interchange fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> interchange() {
        return (Optional<BillingCountAndAmount>) interchange;
    }

    /**
     * A list of interchange program fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BillingInterchangeProgramFee>> interchangePrograms() {
        return (Optional<List<BillingInterchangeProgramFee>>) interchangePrograms;
    }

    /**
     * Details of network passthrough fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> networkPassthrough() {
        return (Optional<BillingCountAndAmount>) networkPassthrough;
    }

    /**
     * Details of completed domestic online transactions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> completedDomesticOnline() {
        return (Optional<BillingCountAndAmount>) completedDomesticOnline;
    }

    /**
     * Details of completed domestic in-person transactions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> completedDomesticInPerson() {
        return (Optional<BillingCountAndAmount>) completedDomesticInPerson;
    }

    /**
     * Details of completed international online transactions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> completedInternationalOnline() {
        return (Optional<BillingCountAndAmount>) completedInternationalOnline;
    }

    /**
     * Details of completed international in-person transactions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> completedInternationalInPerson() {
        return (Optional<BillingCountAndAmount>) completedInternationalInPerson;
    }

    /**
     * Details of declined transactions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> declines() {
        return (Optional<BillingCountAndAmount>) declines;
    }

    /**
     * Details of refunded transactions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> refunds() {
        return (Optional<BillingCountAndAmount>) refunds;
    }

    /**
     * Total fees for this card brand.
     */
    @JsonIgnore
    public BillingCountAndAmount total() {
        return total;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Details of interchange fees.
     */
    public CardBrandFees withInterchange(BillingCountAndAmount interchange) {
        Utils.checkNotNull(interchange, "interchange");
        this.interchange = Optional.ofNullable(interchange);
        return this;
    }


    /**
     * Details of interchange fees.
     */
    public CardBrandFees withInterchange(Optional<? extends BillingCountAndAmount> interchange) {
        Utils.checkNotNull(interchange, "interchange");
        this.interchange = interchange;
        return this;
    }

    /**
     * A list of interchange program fees.
     */
    public CardBrandFees withInterchangePrograms(List<BillingInterchangeProgramFee> interchangePrograms) {
        Utils.checkNotNull(interchangePrograms, "interchangePrograms");
        this.interchangePrograms = Optional.ofNullable(interchangePrograms);
        return this;
    }


    /**
     * A list of interchange program fees.
     */
    public CardBrandFees withInterchangePrograms(Optional<? extends List<BillingInterchangeProgramFee>> interchangePrograms) {
        Utils.checkNotNull(interchangePrograms, "interchangePrograms");
        this.interchangePrograms = interchangePrograms;
        return this;
    }

    /**
     * Details of network passthrough fees.
     */
    public CardBrandFees withNetworkPassthrough(BillingCountAndAmount networkPassthrough) {
        Utils.checkNotNull(networkPassthrough, "networkPassthrough");
        this.networkPassthrough = Optional.ofNullable(networkPassthrough);
        return this;
    }


    /**
     * Details of network passthrough fees.
     */
    public CardBrandFees withNetworkPassthrough(Optional<? extends BillingCountAndAmount> networkPassthrough) {
        Utils.checkNotNull(networkPassthrough, "networkPassthrough");
        this.networkPassthrough = networkPassthrough;
        return this;
    }

    /**
     * Details of completed domestic online transactions.
     */
    public CardBrandFees withCompletedDomesticOnline(BillingCountAndAmount completedDomesticOnline) {
        Utils.checkNotNull(completedDomesticOnline, "completedDomesticOnline");
        this.completedDomesticOnline = Optional.ofNullable(completedDomesticOnline);
        return this;
    }


    /**
     * Details of completed domestic online transactions.
     */
    public CardBrandFees withCompletedDomesticOnline(Optional<? extends BillingCountAndAmount> completedDomesticOnline) {
        Utils.checkNotNull(completedDomesticOnline, "completedDomesticOnline");
        this.completedDomesticOnline = completedDomesticOnline;
        return this;
    }

    /**
     * Details of completed domestic in-person transactions.
     */
    public CardBrandFees withCompletedDomesticInPerson(BillingCountAndAmount completedDomesticInPerson) {
        Utils.checkNotNull(completedDomesticInPerson, "completedDomesticInPerson");
        this.completedDomesticInPerson = Optional.ofNullable(completedDomesticInPerson);
        return this;
    }


    /**
     * Details of completed domestic in-person transactions.
     */
    public CardBrandFees withCompletedDomesticInPerson(Optional<? extends BillingCountAndAmount> completedDomesticInPerson) {
        Utils.checkNotNull(completedDomesticInPerson, "completedDomesticInPerson");
        this.completedDomesticInPerson = completedDomesticInPerson;
        return this;
    }

    /**
     * Details of completed international online transactions.
     */
    public CardBrandFees withCompletedInternationalOnline(BillingCountAndAmount completedInternationalOnline) {
        Utils.checkNotNull(completedInternationalOnline, "completedInternationalOnline");
        this.completedInternationalOnline = Optional.ofNullable(completedInternationalOnline);
        return this;
    }


    /**
     * Details of completed international online transactions.
     */
    public CardBrandFees withCompletedInternationalOnline(Optional<? extends BillingCountAndAmount> completedInternationalOnline) {
        Utils.checkNotNull(completedInternationalOnline, "completedInternationalOnline");
        this.completedInternationalOnline = completedInternationalOnline;
        return this;
    }

    /**
     * Details of completed international in-person transactions.
     */
    public CardBrandFees withCompletedInternationalInPerson(BillingCountAndAmount completedInternationalInPerson) {
        Utils.checkNotNull(completedInternationalInPerson, "completedInternationalInPerson");
        this.completedInternationalInPerson = Optional.ofNullable(completedInternationalInPerson);
        return this;
    }


    /**
     * Details of completed international in-person transactions.
     */
    public CardBrandFees withCompletedInternationalInPerson(Optional<? extends BillingCountAndAmount> completedInternationalInPerson) {
        Utils.checkNotNull(completedInternationalInPerson, "completedInternationalInPerson");
        this.completedInternationalInPerson = completedInternationalInPerson;
        return this;
    }

    /**
     * Details of declined transactions.
     */
    public CardBrandFees withDeclines(BillingCountAndAmount declines) {
        Utils.checkNotNull(declines, "declines");
        this.declines = Optional.ofNullable(declines);
        return this;
    }


    /**
     * Details of declined transactions.
     */
    public CardBrandFees withDeclines(Optional<? extends BillingCountAndAmount> declines) {
        Utils.checkNotNull(declines, "declines");
        this.declines = declines;
        return this;
    }

    /**
     * Details of refunded transactions.
     */
    public CardBrandFees withRefunds(BillingCountAndAmount refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = Optional.ofNullable(refunds);
        return this;
    }


    /**
     * Details of refunded transactions.
     */
    public CardBrandFees withRefunds(Optional<? extends BillingCountAndAmount> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    /**
     * Total fees for this card brand.
     */
    public CardBrandFees withTotal(BillingCountAndAmount total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CardBrandFees other = (CardBrandFees) o;
        return 
            Utils.enhancedDeepEquals(this.interchange, other.interchange) &&
            Utils.enhancedDeepEquals(this.interchangePrograms, other.interchangePrograms) &&
            Utils.enhancedDeepEquals(this.networkPassthrough, other.networkPassthrough) &&
            Utils.enhancedDeepEquals(this.completedDomesticOnline, other.completedDomesticOnline) &&
            Utils.enhancedDeepEquals(this.completedDomesticInPerson, other.completedDomesticInPerson) &&
            Utils.enhancedDeepEquals(this.completedInternationalOnline, other.completedInternationalOnline) &&
            Utils.enhancedDeepEquals(this.completedInternationalInPerson, other.completedInternationalInPerson) &&
            Utils.enhancedDeepEquals(this.declines, other.declines) &&
            Utils.enhancedDeepEquals(this.refunds, other.refunds) &&
            Utils.enhancedDeepEquals(this.total, other.total);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            interchange, interchangePrograms, networkPassthrough,
            completedDomesticOnline, completedDomesticInPerson, completedInternationalOnline,
            completedInternationalInPerson, declines, refunds,
            total);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CardBrandFees.class,
                "interchange", interchange,
                "interchangePrograms", interchangePrograms,
                "networkPassthrough", networkPassthrough,
                "completedDomesticOnline", completedDomesticOnline,
                "completedDomesticInPerson", completedDomesticInPerson,
                "completedInternationalOnline", completedInternationalOnline,
                "completedInternationalInPerson", completedInternationalInPerson,
                "declines", declines,
                "refunds", refunds,
                "total", total);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends BillingCountAndAmount> interchange = Optional.empty();

        private Optional<? extends List<BillingInterchangeProgramFee>> interchangePrograms = Optional.empty();

        private Optional<? extends BillingCountAndAmount> networkPassthrough = Optional.empty();

        private Optional<? extends BillingCountAndAmount> completedDomesticOnline = Optional.empty();

        private Optional<? extends BillingCountAndAmount> completedDomesticInPerson = Optional.empty();

        private Optional<? extends BillingCountAndAmount> completedInternationalOnline = Optional.empty();

        private Optional<? extends BillingCountAndAmount> completedInternationalInPerson = Optional.empty();

        private Optional<? extends BillingCountAndAmount> declines = Optional.empty();

        private Optional<? extends BillingCountAndAmount> refunds = Optional.empty();

        private BillingCountAndAmount total;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Details of interchange fees.
         */
        public Builder interchange(BillingCountAndAmount interchange) {
            Utils.checkNotNull(interchange, "interchange");
            this.interchange = Optional.ofNullable(interchange);
            return this;
        }

        /**
         * Details of interchange fees.
         */
        public Builder interchange(Optional<? extends BillingCountAndAmount> interchange) {
            Utils.checkNotNull(interchange, "interchange");
            this.interchange = interchange;
            return this;
        }


        /**
         * A list of interchange program fees.
         */
        public Builder interchangePrograms(List<BillingInterchangeProgramFee> interchangePrograms) {
            Utils.checkNotNull(interchangePrograms, "interchangePrograms");
            this.interchangePrograms = Optional.ofNullable(interchangePrograms);
            return this;
        }

        /**
         * A list of interchange program fees.
         */
        public Builder interchangePrograms(Optional<? extends List<BillingInterchangeProgramFee>> interchangePrograms) {
            Utils.checkNotNull(interchangePrograms, "interchangePrograms");
            this.interchangePrograms = interchangePrograms;
            return this;
        }


        /**
         * Details of network passthrough fees.
         */
        public Builder networkPassthrough(BillingCountAndAmount networkPassthrough) {
            Utils.checkNotNull(networkPassthrough, "networkPassthrough");
            this.networkPassthrough = Optional.ofNullable(networkPassthrough);
            return this;
        }

        /**
         * Details of network passthrough fees.
         */
        public Builder networkPassthrough(Optional<? extends BillingCountAndAmount> networkPassthrough) {
            Utils.checkNotNull(networkPassthrough, "networkPassthrough");
            this.networkPassthrough = networkPassthrough;
            return this;
        }


        /**
         * Details of completed domestic online transactions.
         */
        public Builder completedDomesticOnline(BillingCountAndAmount completedDomesticOnline) {
            Utils.checkNotNull(completedDomesticOnline, "completedDomesticOnline");
            this.completedDomesticOnline = Optional.ofNullable(completedDomesticOnline);
            return this;
        }

        /**
         * Details of completed domestic online transactions.
         */
        public Builder completedDomesticOnline(Optional<? extends BillingCountAndAmount> completedDomesticOnline) {
            Utils.checkNotNull(completedDomesticOnline, "completedDomesticOnline");
            this.completedDomesticOnline = completedDomesticOnline;
            return this;
        }


        /**
         * Details of completed domestic in-person transactions.
         */
        public Builder completedDomesticInPerson(BillingCountAndAmount completedDomesticInPerson) {
            Utils.checkNotNull(completedDomesticInPerson, "completedDomesticInPerson");
            this.completedDomesticInPerson = Optional.ofNullable(completedDomesticInPerson);
            return this;
        }

        /**
         * Details of completed domestic in-person transactions.
         */
        public Builder completedDomesticInPerson(Optional<? extends BillingCountAndAmount> completedDomesticInPerson) {
            Utils.checkNotNull(completedDomesticInPerson, "completedDomesticInPerson");
            this.completedDomesticInPerson = completedDomesticInPerson;
            return this;
        }


        /**
         * Details of completed international online transactions.
         */
        public Builder completedInternationalOnline(BillingCountAndAmount completedInternationalOnline) {
            Utils.checkNotNull(completedInternationalOnline, "completedInternationalOnline");
            this.completedInternationalOnline = Optional.ofNullable(completedInternationalOnline);
            return this;
        }

        /**
         * Details of completed international online transactions.
         */
        public Builder completedInternationalOnline(Optional<? extends BillingCountAndAmount> completedInternationalOnline) {
            Utils.checkNotNull(completedInternationalOnline, "completedInternationalOnline");
            this.completedInternationalOnline = completedInternationalOnline;
            return this;
        }


        /**
         * Details of completed international in-person transactions.
         */
        public Builder completedInternationalInPerson(BillingCountAndAmount completedInternationalInPerson) {
            Utils.checkNotNull(completedInternationalInPerson, "completedInternationalInPerson");
            this.completedInternationalInPerson = Optional.ofNullable(completedInternationalInPerson);
            return this;
        }

        /**
         * Details of completed international in-person transactions.
         */
        public Builder completedInternationalInPerson(Optional<? extends BillingCountAndAmount> completedInternationalInPerson) {
            Utils.checkNotNull(completedInternationalInPerson, "completedInternationalInPerson");
            this.completedInternationalInPerson = completedInternationalInPerson;
            return this;
        }


        /**
         * Details of declined transactions.
         */
        public Builder declines(BillingCountAndAmount declines) {
            Utils.checkNotNull(declines, "declines");
            this.declines = Optional.ofNullable(declines);
            return this;
        }

        /**
         * Details of declined transactions.
         */
        public Builder declines(Optional<? extends BillingCountAndAmount> declines) {
            Utils.checkNotNull(declines, "declines");
            this.declines = declines;
            return this;
        }


        /**
         * Details of refunded transactions.
         */
        public Builder refunds(BillingCountAndAmount refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        /**
         * Details of refunded transactions.
         */
        public Builder refunds(Optional<? extends BillingCountAndAmount> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }


        /**
         * Total fees for this card brand.
         */
        public Builder total(BillingCountAndAmount total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        public CardBrandFees build() {

            return new CardBrandFees(
                interchange, interchangePrograms, networkPassthrough,
                completedDomesticOnline, completedDomesticInPerson, completedInternationalOnline,
                completedInternationalInPerson, declines, refunds,
                total);
        }

    }
}
