/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * OtherCardFees
 * 
 * <p>A detailed breakdown of other card-related fees.
 */
public class OtherCardFees {
    /**
     * Fees for disputes.
     */
    @JsonProperty("disputes")
    private BillingCountAndAmount disputes;

    /**
     * Fees for card account updater services.
     */
    @JsonProperty("cardAccountUpdater")
    private BillingCountAndAmount cardAccountUpdater;

    /**
     * Fees for card verification.
     */
    @JsonProperty("cardVerification")
    private BillingCountAndAmount cardVerification;

    /**
     * Fees for name verification.
     */
    @JsonProperty("nameVerification")
    private BillingCountAndAmount nameVerification;

    /**
     * Total other card fees.
     */
    @JsonProperty("total")
    private BillingCountAndAmount total;

    @JsonCreator
    public OtherCardFees(
            @JsonProperty("disputes") BillingCountAndAmount disputes,
            @JsonProperty("cardAccountUpdater") BillingCountAndAmount cardAccountUpdater,
            @JsonProperty("cardVerification") BillingCountAndAmount cardVerification,
            @JsonProperty("nameVerification") BillingCountAndAmount nameVerification,
            @JsonProperty("total") BillingCountAndAmount total) {
        Utils.checkNotNull(disputes, "disputes");
        Utils.checkNotNull(cardAccountUpdater, "cardAccountUpdater");
        Utils.checkNotNull(cardVerification, "cardVerification");
        Utils.checkNotNull(nameVerification, "nameVerification");
        Utils.checkNotNull(total, "total");
        this.disputes = disputes;
        this.cardAccountUpdater = cardAccountUpdater;
        this.cardVerification = cardVerification;
        this.nameVerification = nameVerification;
        this.total = total;
    }

    /**
     * Fees for disputes.
     */
    @JsonIgnore
    public BillingCountAndAmount disputes() {
        return disputes;
    }

    /**
     * Fees for card account updater services.
     */
    @JsonIgnore
    public BillingCountAndAmount cardAccountUpdater() {
        return cardAccountUpdater;
    }

    /**
     * Fees for card verification.
     */
    @JsonIgnore
    public BillingCountAndAmount cardVerification() {
        return cardVerification;
    }

    /**
     * Fees for name verification.
     */
    @JsonIgnore
    public BillingCountAndAmount nameVerification() {
        return nameVerification;
    }

    /**
     * Total other card fees.
     */
    @JsonIgnore
    public BillingCountAndAmount total() {
        return total;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Fees for disputes.
     */
    public OtherCardFees withDisputes(BillingCountAndAmount disputes) {
        Utils.checkNotNull(disputes, "disputes");
        this.disputes = disputes;
        return this;
    }

    /**
     * Fees for card account updater services.
     */
    public OtherCardFees withCardAccountUpdater(BillingCountAndAmount cardAccountUpdater) {
        Utils.checkNotNull(cardAccountUpdater, "cardAccountUpdater");
        this.cardAccountUpdater = cardAccountUpdater;
        return this;
    }

    /**
     * Fees for card verification.
     */
    public OtherCardFees withCardVerification(BillingCountAndAmount cardVerification) {
        Utils.checkNotNull(cardVerification, "cardVerification");
        this.cardVerification = cardVerification;
        return this;
    }

    /**
     * Fees for name verification.
     */
    public OtherCardFees withNameVerification(BillingCountAndAmount nameVerification) {
        Utils.checkNotNull(nameVerification, "nameVerification");
        this.nameVerification = nameVerification;
        return this;
    }

    /**
     * Total other card fees.
     */
    public OtherCardFees withTotal(BillingCountAndAmount total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OtherCardFees other = (OtherCardFees) o;
        return 
            Utils.enhancedDeepEquals(this.disputes, other.disputes) &&
            Utils.enhancedDeepEquals(this.cardAccountUpdater, other.cardAccountUpdater) &&
            Utils.enhancedDeepEquals(this.cardVerification, other.cardVerification) &&
            Utils.enhancedDeepEquals(this.nameVerification, other.nameVerification) &&
            Utils.enhancedDeepEquals(this.total, other.total);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            disputes, cardAccountUpdater, cardVerification,
            nameVerification, total);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OtherCardFees.class,
                "disputes", disputes,
                "cardAccountUpdater", cardAccountUpdater,
                "cardVerification", cardVerification,
                "nameVerification", nameVerification,
                "total", total);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private BillingCountAndAmount disputes;

        private BillingCountAndAmount cardAccountUpdater;

        private BillingCountAndAmount cardVerification;

        private BillingCountAndAmount nameVerification;

        private BillingCountAndAmount total;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Fees for disputes.
         */
        public Builder disputes(BillingCountAndAmount disputes) {
            Utils.checkNotNull(disputes, "disputes");
            this.disputes = disputes;
            return this;
        }


        /**
         * Fees for card account updater services.
         */
        public Builder cardAccountUpdater(BillingCountAndAmount cardAccountUpdater) {
            Utils.checkNotNull(cardAccountUpdater, "cardAccountUpdater");
            this.cardAccountUpdater = cardAccountUpdater;
            return this;
        }


        /**
         * Fees for card verification.
         */
        public Builder cardVerification(BillingCountAndAmount cardVerification) {
            Utils.checkNotNull(cardVerification, "cardVerification");
            this.cardVerification = cardVerification;
            return this;
        }


        /**
         * Fees for name verification.
         */
        public Builder nameVerification(BillingCountAndAmount nameVerification) {
            Utils.checkNotNull(nameVerification, "nameVerification");
            this.nameVerification = nameVerification;
            return this;
        }


        /**
         * Total other card fees.
         */
        public Builder total(BillingCountAndAmount total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        public OtherCardFees build() {

            return new OtherCardFees(
                disputes, cardAccountUpdater, cardVerification,
                nameVerification, total);
        }

    }
}
