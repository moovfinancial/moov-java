/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class MoneyTransferError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pullFromCard")
    private Optional<? extends MoneyTransferPullFromCardError> pullFromCard;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushToCard")
    private Optional<? extends MoneyTransferPushToCardError> pushToCard;

    @JsonCreator
    public MoneyTransferError(
            @JsonProperty("pullFromCard") Optional<? extends MoneyTransferPullFromCardError> pullFromCard,
            @JsonProperty("pushToCard") Optional<? extends MoneyTransferPushToCardError> pushToCard) {
        Utils.checkNotNull(pullFromCard, "pullFromCard");
        Utils.checkNotNull(pushToCard, "pushToCard");
        this.pullFromCard = pullFromCard;
        this.pushToCard = pushToCard;
    }
    
    public MoneyTransferError() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MoneyTransferPullFromCardError> pullFromCard() {
        return (Optional<MoneyTransferPullFromCardError>) pullFromCard;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MoneyTransferPushToCardError> pushToCard() {
        return (Optional<MoneyTransferPushToCardError>) pushToCard;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public MoneyTransferError withPullFromCard(MoneyTransferPullFromCardError pullFromCard) {
        Utils.checkNotNull(pullFromCard, "pullFromCard");
        this.pullFromCard = Optional.ofNullable(pullFromCard);
        return this;
    }

    public MoneyTransferError withPullFromCard(Optional<? extends MoneyTransferPullFromCardError> pullFromCard) {
        Utils.checkNotNull(pullFromCard, "pullFromCard");
        this.pullFromCard = pullFromCard;
        return this;
    }

    public MoneyTransferError withPushToCard(MoneyTransferPushToCardError pushToCard) {
        Utils.checkNotNull(pushToCard, "pushToCard");
        this.pushToCard = Optional.ofNullable(pushToCard);
        return this;
    }

    public MoneyTransferError withPushToCard(Optional<? extends MoneyTransferPushToCardError> pushToCard) {
        Utils.checkNotNull(pushToCard, "pushToCard");
        this.pushToCard = pushToCard;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MoneyTransferError other = (MoneyTransferError) o;
        return 
            Objects.deepEquals(this.pullFromCard, other.pullFromCard) &&
            Objects.deepEquals(this.pushToCard, other.pushToCard);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pullFromCard,
            pushToCard);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MoneyTransferError.class,
                "pullFromCard", pullFromCard,
                "pushToCard", pushToCard);
    }
    
    public final static class Builder {
 
        private Optional<? extends MoneyTransferPullFromCardError> pullFromCard = Optional.empty();
 
        private Optional<? extends MoneyTransferPushToCardError> pushToCard = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pullFromCard(MoneyTransferPullFromCardError pullFromCard) {
            Utils.checkNotNull(pullFromCard, "pullFromCard");
            this.pullFromCard = Optional.ofNullable(pullFromCard);
            return this;
        }

        public Builder pullFromCard(Optional<? extends MoneyTransferPullFromCardError> pullFromCard) {
            Utils.checkNotNull(pullFromCard, "pullFromCard");
            this.pullFromCard = pullFromCard;
            return this;
        }

        public Builder pushToCard(MoneyTransferPushToCardError pushToCard) {
            Utils.checkNotNull(pushToCard, "pushToCard");
            this.pushToCard = Optional.ofNullable(pushToCard);
            return this;
        }

        public Builder pushToCard(Optional<? extends MoneyTransferPushToCardError> pushToCard) {
            Utils.checkNotNull(pushToCard, "pushToCard");
            this.pushToCard = pushToCard;
            return this;
        }
        
        public MoneyTransferError build() {
            return new MoneyTransferError(
                pullFromCard,
                pushToCard);
        }
    }
}
