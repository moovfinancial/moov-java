/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UpsertUnderwriting {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geographicReach")
    private Optional<? extends GeographicReach> geographicReach;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessPresence")
    private Optional<? extends BusinessPresence> businessPresence;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingLitigation")
    private Optional<? extends PendingLitigation> pendingLitigation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeShareByCustomerType")
    private Optional<? extends VolumeShareByCustomerType> volumeShareByCustomerType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collectFunds")
    private Optional<? extends CollectFunds> collectFunds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moneyTransfer")
    private Optional<? extends MoneyTransfer> moneyTransfer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sendFunds")
    private Optional<? extends SendFunds> sendFunds;

    @JsonCreator
    public UpsertUnderwriting(
            @JsonProperty("geographicReach") Optional<? extends GeographicReach> geographicReach,
            @JsonProperty("businessPresence") Optional<? extends BusinessPresence> businessPresence,
            @JsonProperty("pendingLitigation") Optional<? extends PendingLitigation> pendingLitigation,
            @JsonProperty("volumeShareByCustomerType") Optional<? extends VolumeShareByCustomerType> volumeShareByCustomerType,
            @JsonProperty("collectFunds") Optional<? extends CollectFunds> collectFunds,
            @JsonProperty("moneyTransfer") Optional<? extends MoneyTransfer> moneyTransfer,
            @JsonProperty("sendFunds") Optional<? extends SendFunds> sendFunds) {
        Utils.checkNotNull(geographicReach, "geographicReach");
        Utils.checkNotNull(businessPresence, "businessPresence");
        Utils.checkNotNull(pendingLitigation, "pendingLitigation");
        Utils.checkNotNull(volumeShareByCustomerType, "volumeShareByCustomerType");
        Utils.checkNotNull(collectFunds, "collectFunds");
        Utils.checkNotNull(moneyTransfer, "moneyTransfer");
        Utils.checkNotNull(sendFunds, "sendFunds");
        this.geographicReach = geographicReach;
        this.businessPresence = businessPresence;
        this.pendingLitigation = pendingLitigation;
        this.volumeShareByCustomerType = volumeShareByCustomerType;
        this.collectFunds = collectFunds;
        this.moneyTransfer = moneyTransfer;
        this.sendFunds = sendFunds;
    }
    
    public UpsertUnderwriting() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GeographicReach> geographicReach() {
        return (Optional<GeographicReach>) geographicReach;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BusinessPresence> businessPresence() {
        return (Optional<BusinessPresence>) businessPresence;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PendingLitigation> pendingLitigation() {
        return (Optional<PendingLitigation>) pendingLitigation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VolumeShareByCustomerType> volumeShareByCustomerType() {
        return (Optional<VolumeShareByCustomerType>) volumeShareByCustomerType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CollectFunds> collectFunds() {
        return (Optional<CollectFunds>) collectFunds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MoneyTransfer> moneyTransfer() {
        return (Optional<MoneyTransfer>) moneyTransfer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SendFunds> sendFunds() {
        return (Optional<SendFunds>) sendFunds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UpsertUnderwriting withGeographicReach(GeographicReach geographicReach) {
        Utils.checkNotNull(geographicReach, "geographicReach");
        this.geographicReach = Optional.ofNullable(geographicReach);
        return this;
    }

    public UpsertUnderwriting withGeographicReach(Optional<? extends GeographicReach> geographicReach) {
        Utils.checkNotNull(geographicReach, "geographicReach");
        this.geographicReach = geographicReach;
        return this;
    }

    public UpsertUnderwriting withBusinessPresence(BusinessPresence businessPresence) {
        Utils.checkNotNull(businessPresence, "businessPresence");
        this.businessPresence = Optional.ofNullable(businessPresence);
        return this;
    }

    public UpsertUnderwriting withBusinessPresence(Optional<? extends BusinessPresence> businessPresence) {
        Utils.checkNotNull(businessPresence, "businessPresence");
        this.businessPresence = businessPresence;
        return this;
    }

    public UpsertUnderwriting withPendingLitigation(PendingLitigation pendingLitigation) {
        Utils.checkNotNull(pendingLitigation, "pendingLitigation");
        this.pendingLitigation = Optional.ofNullable(pendingLitigation);
        return this;
    }

    public UpsertUnderwriting withPendingLitigation(Optional<? extends PendingLitigation> pendingLitigation) {
        Utils.checkNotNull(pendingLitigation, "pendingLitigation");
        this.pendingLitigation = pendingLitigation;
        return this;
    }

    public UpsertUnderwriting withVolumeShareByCustomerType(VolumeShareByCustomerType volumeShareByCustomerType) {
        Utils.checkNotNull(volumeShareByCustomerType, "volumeShareByCustomerType");
        this.volumeShareByCustomerType = Optional.ofNullable(volumeShareByCustomerType);
        return this;
    }

    public UpsertUnderwriting withVolumeShareByCustomerType(Optional<? extends VolumeShareByCustomerType> volumeShareByCustomerType) {
        Utils.checkNotNull(volumeShareByCustomerType, "volumeShareByCustomerType");
        this.volumeShareByCustomerType = volumeShareByCustomerType;
        return this;
    }

    public UpsertUnderwriting withCollectFunds(CollectFunds collectFunds) {
        Utils.checkNotNull(collectFunds, "collectFunds");
        this.collectFunds = Optional.ofNullable(collectFunds);
        return this;
    }

    public UpsertUnderwriting withCollectFunds(Optional<? extends CollectFunds> collectFunds) {
        Utils.checkNotNull(collectFunds, "collectFunds");
        this.collectFunds = collectFunds;
        return this;
    }

    public UpsertUnderwriting withMoneyTransfer(MoneyTransfer moneyTransfer) {
        Utils.checkNotNull(moneyTransfer, "moneyTransfer");
        this.moneyTransfer = Optional.ofNullable(moneyTransfer);
        return this;
    }

    public UpsertUnderwriting withMoneyTransfer(Optional<? extends MoneyTransfer> moneyTransfer) {
        Utils.checkNotNull(moneyTransfer, "moneyTransfer");
        this.moneyTransfer = moneyTransfer;
        return this;
    }

    public UpsertUnderwriting withSendFunds(SendFunds sendFunds) {
        Utils.checkNotNull(sendFunds, "sendFunds");
        this.sendFunds = Optional.ofNullable(sendFunds);
        return this;
    }

    public UpsertUnderwriting withSendFunds(Optional<? extends SendFunds> sendFunds) {
        Utils.checkNotNull(sendFunds, "sendFunds");
        this.sendFunds = sendFunds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpsertUnderwriting other = (UpsertUnderwriting) o;
        return 
            Objects.deepEquals(this.geographicReach, other.geographicReach) &&
            Objects.deepEquals(this.businessPresence, other.businessPresence) &&
            Objects.deepEquals(this.pendingLitigation, other.pendingLitigation) &&
            Objects.deepEquals(this.volumeShareByCustomerType, other.volumeShareByCustomerType) &&
            Objects.deepEquals(this.collectFunds, other.collectFunds) &&
            Objects.deepEquals(this.moneyTransfer, other.moneyTransfer) &&
            Objects.deepEquals(this.sendFunds, other.sendFunds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            geographicReach,
            businessPresence,
            pendingLitigation,
            volumeShareByCustomerType,
            collectFunds,
            moneyTransfer,
            sendFunds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpsertUnderwriting.class,
                "geographicReach", geographicReach,
                "businessPresence", businessPresence,
                "pendingLitigation", pendingLitigation,
                "volumeShareByCustomerType", volumeShareByCustomerType,
                "collectFunds", collectFunds,
                "moneyTransfer", moneyTransfer,
                "sendFunds", sendFunds);
    }
    
    public final static class Builder {
 
        private Optional<? extends GeographicReach> geographicReach = Optional.empty();
 
        private Optional<? extends BusinessPresence> businessPresence = Optional.empty();
 
        private Optional<? extends PendingLitigation> pendingLitigation = Optional.empty();
 
        private Optional<? extends VolumeShareByCustomerType> volumeShareByCustomerType = Optional.empty();
 
        private Optional<? extends CollectFunds> collectFunds = Optional.empty();
 
        private Optional<? extends MoneyTransfer> moneyTransfer = Optional.empty();
 
        private Optional<? extends SendFunds> sendFunds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder geographicReach(GeographicReach geographicReach) {
            Utils.checkNotNull(geographicReach, "geographicReach");
            this.geographicReach = Optional.ofNullable(geographicReach);
            return this;
        }

        public Builder geographicReach(Optional<? extends GeographicReach> geographicReach) {
            Utils.checkNotNull(geographicReach, "geographicReach");
            this.geographicReach = geographicReach;
            return this;
        }

        public Builder businessPresence(BusinessPresence businessPresence) {
            Utils.checkNotNull(businessPresence, "businessPresence");
            this.businessPresence = Optional.ofNullable(businessPresence);
            return this;
        }

        public Builder businessPresence(Optional<? extends BusinessPresence> businessPresence) {
            Utils.checkNotNull(businessPresence, "businessPresence");
            this.businessPresence = businessPresence;
            return this;
        }

        public Builder pendingLitigation(PendingLitigation pendingLitigation) {
            Utils.checkNotNull(pendingLitigation, "pendingLitigation");
            this.pendingLitigation = Optional.ofNullable(pendingLitigation);
            return this;
        }

        public Builder pendingLitigation(Optional<? extends PendingLitigation> pendingLitigation) {
            Utils.checkNotNull(pendingLitigation, "pendingLitigation");
            this.pendingLitigation = pendingLitigation;
            return this;
        }

        public Builder volumeShareByCustomerType(VolumeShareByCustomerType volumeShareByCustomerType) {
            Utils.checkNotNull(volumeShareByCustomerType, "volumeShareByCustomerType");
            this.volumeShareByCustomerType = Optional.ofNullable(volumeShareByCustomerType);
            return this;
        }

        public Builder volumeShareByCustomerType(Optional<? extends VolumeShareByCustomerType> volumeShareByCustomerType) {
            Utils.checkNotNull(volumeShareByCustomerType, "volumeShareByCustomerType");
            this.volumeShareByCustomerType = volumeShareByCustomerType;
            return this;
        }

        public Builder collectFunds(CollectFunds collectFunds) {
            Utils.checkNotNull(collectFunds, "collectFunds");
            this.collectFunds = Optional.ofNullable(collectFunds);
            return this;
        }

        public Builder collectFunds(Optional<? extends CollectFunds> collectFunds) {
            Utils.checkNotNull(collectFunds, "collectFunds");
            this.collectFunds = collectFunds;
            return this;
        }

        public Builder moneyTransfer(MoneyTransfer moneyTransfer) {
            Utils.checkNotNull(moneyTransfer, "moneyTransfer");
            this.moneyTransfer = Optional.ofNullable(moneyTransfer);
            return this;
        }

        public Builder moneyTransfer(Optional<? extends MoneyTransfer> moneyTransfer) {
            Utils.checkNotNull(moneyTransfer, "moneyTransfer");
            this.moneyTransfer = moneyTransfer;
            return this;
        }

        public Builder sendFunds(SendFunds sendFunds) {
            Utils.checkNotNull(sendFunds, "sendFunds");
            this.sendFunds = Optional.ofNullable(sendFunds);
            return this;
        }

        public Builder sendFunds(Optional<? extends SendFunds> sendFunds) {
            Utils.checkNotNull(sendFunds, "sendFunds");
            this.sendFunds = sendFunds;
            return this;
        }
        
        public UpsertUnderwriting build() {
            return new UpsertUnderwriting(
                geographicReach,
                businessPresence,
                pendingLitigation,
                volumeShareByCustomerType,
                collectFunds,
                moneyTransfer,
                sendFunds);
        }
    }
}
