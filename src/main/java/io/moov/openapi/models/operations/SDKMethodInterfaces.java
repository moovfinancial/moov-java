/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.operations;

import io.moov.openapi.models.components.AccountCountries;
import io.moov.openapi.models.components.AccountWaitFor;
import io.moov.openapi.models.components.AddCapabilities;
import io.moov.openapi.models.components.AuthTokenRequest;
import io.moov.openapi.models.components.BankAccountWaitFor;
import io.moov.openapi.models.components.Brand;
import io.moov.openapi.models.components.CapabilityID;
import io.moov.openapi.models.components.CompleteBankAccountVerification;
import io.moov.openapi.models.components.CompleteMicroDeposits;
import io.moov.openapi.models.components.CreateAccount;
import io.moov.openapi.models.components.CreateAccountUpdate;
import io.moov.openapi.models.components.CreateApplePaySession;
import io.moov.openapi.models.components.CreateEvidenceFileMultiPart;
import io.moov.openapi.models.components.CreateEvidenceText;
import io.moov.openapi.models.components.CreatePaymentLink;
import io.moov.openapi.models.components.CreateSweepConfig;
import io.moov.openapi.models.components.FileUploadRequestMultiPart;
import io.moov.openapi.models.components.LinkApplePay;
import io.moov.openapi.models.components.LinkBankAccount;
import io.moov.openapi.models.components.LinkCard;
import io.moov.openapi.models.components.LinkCardWaitFor;
import io.moov.openapi.models.components.PatchSweepConfig;
import io.moov.openapi.models.components.PaymentMethodType;
import io.moov.openapi.models.components.RegisterApplePayMerchantDomains;
import io.moov.openapi.models.components.RequestCard;
import io.moov.openapi.models.components.UpdateApplePayMerchantDomains;
import io.moov.openapi.models.components.UpdateBrand;
import io.moov.openapi.models.components.UpdateCard;
import io.moov.openapi.models.components.UpdateIssuedCard;
import io.moov.openapi.models.components.UpdatePaymentLink;
import io.moov.openapi.models.components.UpsertSchedule;
import io.moov.openapi.models.components.Versions;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallCreateAccount {
        CreateAccountResponse createAccount(
            CreateAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<? extends AccountWaitFor> xWaitFor,
            CreateAccount createAccount) throws Exception;
    }


    public interface MethodCallListAccounts {
        ListAccountsResponse listAccounts(
            ListAccountsRequest request,
            ListAccountsSecurity security) throws Exception;
    }


    public interface MethodCallGetAccount {
        GetAccountResponse getAccount(
            GetAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallPatchAccount {
        PatchAccountResponse patchAccount(
            PatchAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateAccountUpdate createAccountUpdate) throws Exception;
    }


    public interface MethodCallDisconnectAccount {
        DisconnectAccountResponse disconnectAccount(
            DisconnectAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetAccountCountries {
        GetAccountCountriesResponse getAccountCountries(
            GetAccountCountriesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallAssignAccountCountries {
        AssignAccountCountriesResponse assignAccountCountries(
            AssignAccountCountriesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            AccountCountries accountCountries) throws Exception;
    }


    public interface MethodCallGetMerchantProcessingAgreement {
        GetMerchantProcessingAgreementResponse getMerchantProcessingAgreement(
            GetMerchantProcessingAgreementSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetTermsOfServiceToken {
        GetTermsOfServiceTokenResponse getTermsOfServiceToken(
            Optional<? extends Versions> xMoovVersion,
            Optional<String> origin,
            Optional<String> referer) throws Exception;
    }


    public interface MethodCallRegisterApplePayMerchantDomains {
        RegisterApplePayMerchantDomainsResponse registerApplePayMerchantDomains(
            RegisterApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            RegisterApplePayMerchantDomains registerApplePayMerchantDomains) throws Exception;
    }


    public interface MethodCallUpdateApplePayMerchantDomains {
        UpdateApplePayMerchantDomainsResponse updateApplePayMerchantDomains(
            UpdateApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            UpdateApplePayMerchantDomains updateApplePayMerchantDomains) throws Exception;
    }


    public interface MethodCallGetApplePayMerchantDomains {
        GetApplePayMerchantDomainsResponse getApplePayMerchantDomains(
            GetApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallCreateApplePaySession {
        CreateApplePaySessionResponse createApplePaySession(
            CreateApplePaySessionSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateApplePaySession createApplePaySession) throws Exception;
    }


    public interface MethodCallLinkApplePayToken {
        LinkApplePayTokenResponse linkApplePayToken(
            LinkApplePayTokenSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            LinkApplePay linkApplePay) throws Exception;
    }


    public interface MethodCallLinkCard {
        LinkCardResponse linkCard(
            LinkCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<? extends LinkCardWaitFor> xWaitFor,
            String accountID,
            LinkCard linkCard) throws Exception;
    }


    public interface MethodCallListCards {
        ListCardsResponse listCards(
            ListCardsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetCard {
        GetCardResponse getCard(
            GetCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID) throws Exception;
    }


    public interface MethodCallUpdateCard {
        UpdateCardResponse updateCard(
            UpdateCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID,
            UpdateCard updateCard) throws Exception;
    }


    public interface MethodCallDisableCard {
        DisableCardResponse disableCard(
            DisableCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID) throws Exception;
    }


    public interface MethodCallLinkBankAccount {
        LinkBankAccountResponse linkBankAccount(
            LinkBankAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<? extends BankAccountWaitFor> xWaitFor,
            String accountID,
            LinkBankAccount linkBankAccount) throws Exception;
    }


    public interface MethodCallListBankAccounts {
        ListBankAccountsResponse listBankAccounts(
            ListBankAccountsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetBankAccount {
        GetBankAccountResponse getBankAccount(
            GetBankAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallDisableBankAccount {
        DisableBankAccountResponse disableBankAccount(
            DisableBankAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallInitiateMicroDeposits {
        InitiateMicroDepositsResponse initiateMicroDeposits(
            InitiateMicroDepositsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallCompleteMicroDeposits {
        CompleteMicroDepositsResponse completeMicroDeposits(
            CompleteMicroDepositsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID,
            CompleteMicroDeposits completeMicroDeposits) throws Exception;
    }


    public interface MethodCallGetBankAccountVerification {
        GetBankAccountVerificationResponse getBankAccountVerification(
            GetBankAccountVerificationSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallInitiateBankAccountVerification {
        InitiateBankAccountVerificationResponse initiateBankAccountVerification(
            InitiateBankAccountVerificationSecurity security,
            Optional<? extends Versions> xMoovVersion,
            BankAccountWaitFor xWaitFor,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallCompleteBankAccountVerification {
        CompleteBankAccountVerificationResponse completeBankAccountVerification(
            CompleteBankAccountVerificationSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID,
            CompleteBankAccountVerification completeBankAccountVerification) throws Exception;
    }


    public interface MethodCallPostBrand {
        PostBrandResponse postBrand(
            PostBrandSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Brand brand) throws Exception;
    }


    public interface MethodCallGetBrand {
        GetBrandResponse getBrand(
            GetBrandSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallUpdateBrand {
        UpdateBrandResponse updateBrand(
            UpdateBrandSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            UpdateBrand updateBrand) throws Exception;
    }


    public interface MethodCallListCapabilities {
        ListCapabilitiesResponse listCapabilities(
            ListCapabilitiesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallAddCapabilities {
        AddCapabilitiesResponse addCapabilities(
            AddCapabilitiesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            AddCapabilities addCapabilities) throws Exception;
    }


    public interface MethodCallGetCapability {
        GetCapabilityResponse getCapability(
            GetCapabilitySecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CapabilityID capabilityID) throws Exception;
    }


    public interface MethodCallDisableCapability {
        DisableCapabilityResponse disableCapability(
            DisableCapabilitySecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CapabilityID capabilityID) throws Exception;
    }


    public interface MethodCallListDisputes {
        ListDisputesResponse listDisputes(
            ListDisputesRequest request,
            ListDisputesSecurity security) throws Exception;
    }


    public interface MethodCallGetDispute {
        GetDisputeResponse getDispute(
            GetDisputeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }


    public interface MethodCallAcceptDispute {
        AcceptDisputeResponse acceptDispute(
            AcceptDisputeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }


    public interface MethodCallListDisputeEvidence {
        ListDisputeEvidenceResponse listDisputeEvidence(
            ListDisputeEvidenceSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }


    public interface MethodCallUploadDisputeEvidenceFile {
        UploadDisputeEvidenceFileResponse uploadDisputeEvidenceFile(
            UploadDisputeEvidenceFileSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            CreateEvidenceFileMultiPart createEvidenceFileMultiPart) throws Exception;
    }


    public interface MethodCallUploadDisputeEvidenceText {
        UploadDisputeEvidenceTextResponse uploadDisputeEvidenceText(
            UploadDisputeEvidenceTextSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            CreateEvidenceText createEvidenceText) throws Exception;
    }


    public interface MethodCallSubmitDisputeEvidence {
        SubmitDisputeEvidenceResponse submitDisputeEvidence(
            SubmitDisputeEvidenceSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }


    public interface MethodCallGetDisputeEvidence {
        GetDisputeEvidenceResponse getDisputeEvidence(
            GetDisputeEvidenceSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }


    public interface MethodCallUpdateDisputeEvidence {
        UpdateDisputeEvidenceResponse updateDisputeEvidence(
            UpdateDisputeEvidenceRequest request,
            UpdateDisputeEvidenceSecurity security) throws Exception;
    }


    public interface MethodCallDeleteDisputeEvidenceFile {
        DeleteDisputeEvidenceFileResponse deleteDisputeEvidenceFile(
            DeleteDisputeEvidenceFileSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }


    public interface MethodCallGetDisputeEvidenceData {
        GetDisputeEvidenceDataResponse getDisputeEvidenceData(
            GetDisputeEvidenceDataSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }


    public interface MethodCallUploadFile {
        UploadFileResponse uploadFile(
            UploadFileSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            FileUploadRequestMultiPart fileUploadRequestMultiPart) throws Exception;
    }


    public interface MethodCallListFiles {
        ListFilesResponse listFiles(
            ListFilesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetFileDetails {
        GetFileDetailsResponse getFileDetails(
            GetFileDetailsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String fileID) throws Exception;
    }


    public interface MethodCallCreatePaymentLink {
        CreatePaymentLinkResponse createPaymentLink(
            CreatePaymentLinkSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreatePaymentLink createPaymentLink) throws Exception;
    }


    public interface MethodCallListPaymentLinks {
        ListPaymentLinksResponse listPaymentLinks(
            ListPaymentLinksSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetPaymentLink {
        GetPaymentLinkResponse getPaymentLink(
            GetPaymentLinkSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }


    public interface MethodCallUpdatePaymentLink {
        UpdatePaymentLinkResponse updatePaymentLink(
            UpdatePaymentLinkSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentLinkCode,
            UpdatePaymentLink updatePaymentLink) throws Exception;
    }


    public interface MethodCallDisablePaymentLink {
        DisablePaymentLinkResponse disablePaymentLink(
            DisablePaymentLinkSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }


    public interface MethodCallGetPaymentLinkQRCode {
        GetPaymentLinkQRCodeResponse getPaymentLinkQRCode(
            GetPaymentLinkQRCodeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }


    public interface MethodCallListPaymentMethods {
        ListPaymentMethodsResponse listPaymentMethods(
            ListPaymentMethodsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Optional<String> sourceID,
            Optional<? extends PaymentMethodType> paymentMethodType) throws Exception;
    }


    public interface MethodCallGetPaymentMethod {
        GetPaymentMethodResponse getPaymentMethod(
            GetPaymentMethodSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentMethodID) throws Exception;
    }


    public interface MethodCallCreateSchedule {
        CreateScheduleResponse createSchedule(
            CreateScheduleSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            UpsertSchedule upsertSchedule) throws Exception;
    }


    public interface MethodCallListSchedules {
        ListSchedulesResponse listSchedules(
            ListSchedulesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<Long> skip,
            Optional<Long> count,
            String accountID) throws Exception;
    }


    public interface MethodCallUpdateSchedule {
        UpdateScheduleResponse updateSchedule(
            UpdateScheduleSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String scheduleID,
            UpsertSchedule upsertSchedule) throws Exception;
    }


    public interface MethodCallGetSchedules {
        GetSchedulesResponse getSchedules(
            GetSchedulesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String scheduleID) throws Exception;
    }


    public interface MethodCallCancelSchedule {
        CancelScheduleResponse cancelSchedule(
            CancelScheduleSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String scheduleID) throws Exception;
    }


    public interface MethodCallGetScheduledOccurrence {
        GetScheduledOccurrenceResponse getScheduledOccurrence(
            GetScheduledOccurrenceSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String scheduleID,
            String occurrenceFilter) throws Exception;
    }


    public interface MethodCallCreateSweepConfig {
        CreateSweepConfigResponse createSweepConfig(
            CreateSweepConfigSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateSweepConfig createSweepConfig) throws Exception;
    }


    public interface MethodCallListSweepConfigs {
        ListSweepConfigsResponse listSweepConfigs(
            ListSweepConfigsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetSweepConfig {
        GetSweepConfigResponse getSweepConfig(
            GetSweepConfigSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String sweepConfigID) throws Exception;
    }


    public interface MethodCallPatchSweepConfig {
        PatchSweepConfigResponse patchSweepConfig(
            PatchSweepConfigSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String sweepConfigID,
            PatchSweepConfig patchSweepConfig) throws Exception;
    }


    public interface MethodCallListSweeps {
        ListSweepsResponse listSweeps(
            ListSweepsRequest request,
            ListSweepsSecurity security) throws Exception;
    }


    public interface MethodCallGetSweep {
        GetSweepResponse getSweep(
            GetSweepSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String walletID,
            String sweepID) throws Exception;
    }


    public interface MethodCallCreateTransfer {
        CreateTransferResponse createTransfer(
            CreateTransferRequest request,
            CreateTransferSecurity security) throws Exception;
    }


    public interface MethodCallListTransfers {
        ListTransfersResponse listTransfers(
            ListTransfersRequest request,
            ListTransfersSecurity security) throws Exception;
    }


    public interface MethodCallGetTransfer {
        GetTransferResponse getTransfer(
            GetTransferSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String transferID,
            String accountID) throws Exception;
    }


    public interface MethodCallPatchTransfer {
        PatchTransferResponse patchTransfer(
            PatchTransferSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String transferID,
            String accountID) throws Exception;
    }


    public interface MethodCallRefundTransfer {
        RefundTransferResponse refundTransfer(
            RefundTransferRequest request,
            RefundTransferSecurity security) throws Exception;
    }


    public interface MethodCallListRefunds {
        ListRefundsResponse listRefunds(
            ListRefundsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String transferID) throws Exception;
    }


    public interface MethodCallGetRefund {
        GetRefundResponse getRefund(
            GetRefundSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String transferID,
            String accountID,
            String refundID) throws Exception;
    }


    public interface MethodCallCreateTransferOptions {
        CreateTransferOptionsResponse createTransferOptions(
            CreateTransferOptionsSecurity security,
            Optional<? extends Versions> xMoovVersion) throws Exception;
    }


    public interface MethodCallListWallets {
        ListWalletsResponse listWallets(
            ListWalletsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetWallet {
        GetWalletResponse getWallet(
            GetWalletSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String walletID) throws Exception;
    }


    public interface MethodCallListWalletTransactions {
        ListWalletTransactionsResponse listWalletTransactions(
            ListWalletTransactionsRequest request,
            ListWalletTransactionsSecurity security) throws Exception;
    }


    public interface MethodCallGetWalletTransaction {
        GetWalletTransactionResponse getWalletTransaction(
            GetWalletTransactionSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String walletID,
            String transactionID) throws Exception;
    }


    public interface MethodCallGetEnrichmentAddress {
        GetEnrichmentAddressResponse getEnrichmentAddress(
            GetEnrichmentAddressRequest request,
            GetEnrichmentAddressSecurity security) throws Exception;
    }


    public interface MethodCallGetEnrichmentProfile {
        GetEnrichmentProfileResponse getEnrichmentProfile(
            GetEnrichmentProfileSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String email) throws Exception;
    }


    public interface MethodCallListIssuedCardAuthorizations {
        ListIssuedCardAuthorizationsResponse listIssuedCardAuthorizations(
            ListIssuedCardAuthorizationsRequest request,
            ListIssuedCardAuthorizationsSecurity security) throws Exception;
    }


    public interface MethodCallGetIssuedCardAuthorization {
        GetIssuedCardAuthorizationResponse getIssuedCardAuthorization(
            GetIssuedCardAuthorizationSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String authorizationID) throws Exception;
    }


    public interface MethodCallListIssuedCardAuthorizationEvents {
        ListIssuedCardAuthorizationEventsResponse listIssuedCardAuthorizationEvents(
            ListIssuedCardAuthorizationEventsRequest request,
            ListIssuedCardAuthorizationEventsSecurity security) throws Exception;
    }


    public interface MethodCallListIssuedCardTransactions {
        ListIssuedCardTransactionsResponse listIssuedCardTransactions(
            ListIssuedCardTransactionsRequest request,
            ListIssuedCardTransactionsSecurity security) throws Exception;
    }


    public interface MethodCallGetIssuedCardTransaction {
        GetIssuedCardTransactionResponse getIssuedCardTransaction(
            GetIssuedCardTransactionSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardTransactionID) throws Exception;
    }


    public interface MethodCallRequestCard {
        RequestCardResponse requestCard(
            RequestCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            RequestCard requestCard) throws Exception;
    }


    public interface MethodCallListIssuedCards {
        ListIssuedCardsResponse listIssuedCards(
            ListIssuedCardsRequest request,
            ListIssuedCardsSecurity security) throws Exception;
    }


    public interface MethodCallGetIssuedCard {
        GetIssuedCardResponse getIssuedCard(
            GetIssuedCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String issuedCardID) throws Exception;
    }


    public interface MethodCallUpdateIssuedCard {
        UpdateIssuedCardResponse updateIssuedCard(
            UpdateIssuedCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String issuedCardID,
            UpdateIssuedCard updateIssuedCard) throws Exception;
    }


    public interface MethodCallGetFullIssuedCard {
        GetFullIssuedCardResponse getFullIssuedCard(
            GetFullIssuedCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String issuedCardID) throws Exception;
    }


    public interface MethodCallCreateAuthToken {
        CreateAuthTokenResponse createAuthToken(
            AuthTokenRequest request) throws Exception;
    }


}
