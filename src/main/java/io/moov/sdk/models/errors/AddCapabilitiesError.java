/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;


@SuppressWarnings("serial")
public class AddCapabilitiesError extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<String> error;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capabilities")
    private Optional<? extends Map<String, String>> capabilities;

    @JsonCreator
    public AddCapabilitiesError(
            @JsonProperty("error") Optional<String> error,
            @JsonProperty("capabilities") Optional<? extends Map<String, String>> capabilities) {
        super("API error occurred");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(capabilities, "capabilities");
        this.error = error;
        this.capabilities = capabilities;
    }
    
    public AddCapabilitiesError() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> error() {
        return error;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> capabilities() {
        return (Optional<Map<String, String>>) capabilities;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AddCapabilitiesError withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }


    public AddCapabilitiesError withError(Optional<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public AddCapabilitiesError withCapabilities(Map<String, String> capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = Optional.ofNullable(capabilities);
        return this;
    }


    public AddCapabilitiesError withCapabilities(Optional<? extends Map<String, String>> capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = capabilities;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddCapabilitiesError other = (AddCapabilitiesError) o;
        return 
            Utils.enhancedDeepEquals(this.error, other.error) &&
            Utils.enhancedDeepEquals(this.capabilities, other.capabilities);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            error, capabilities);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddCapabilitiesError.class,
                "error", error,
                "capabilities", capabilities);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> error = Optional.empty();

        private Optional<? extends Map<String, String>> capabilities = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }


        public Builder capabilities(Map<String, String> capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = Optional.ofNullable(capabilities);
            return this;
        }

        public Builder capabilities(Optional<? extends Map<String, String>> capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = capabilities;
            return this;
        }

        public AddCapabilitiesError build() {

            return new AddCapabilitiesError(
                error, capabilities);
        }

    }
}

