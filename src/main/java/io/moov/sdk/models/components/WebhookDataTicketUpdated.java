/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class WebhookDataTicketUpdated {

    @JsonProperty("accountID")
    private String accountID;


    @JsonProperty("ticketID")
    private String ticketID;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("foreignID")
    private Optional<String> foreignID;


    @JsonProperty("status")
    private TicketStatus status;

    @JsonCreator
    public WebhookDataTicketUpdated(
            @JsonProperty("accountID") String accountID,
            @JsonProperty("ticketID") String ticketID,
            @JsonProperty("foreignID") Optional<String> foreignID,
            @JsonProperty("status") TicketStatus status) {
        Utils.checkNotNull(accountID, "accountID");
        Utils.checkNotNull(ticketID, "ticketID");
        Utils.checkNotNull(foreignID, "foreignID");
        Utils.checkNotNull(status, "status");
        this.accountID = accountID;
        this.ticketID = ticketID;
        this.foreignID = foreignID;
        this.status = status;
    }
    
    public WebhookDataTicketUpdated(
            String accountID,
            String ticketID,
            TicketStatus status) {
        this(accountID, ticketID, Optional.empty(),
            status);
    }

    @JsonIgnore
    public String accountID() {
        return accountID;
    }

    @JsonIgnore
    public String ticketID() {
        return ticketID;
    }

    @JsonIgnore
    public Optional<String> foreignID() {
        return foreignID;
    }

    @JsonIgnore
    public TicketStatus status() {
        return status;
    }

    public static Builder builder() {
        return new Builder();
    }


    public WebhookDataTicketUpdated withAccountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    public WebhookDataTicketUpdated withTicketID(String ticketID) {
        Utils.checkNotNull(ticketID, "ticketID");
        this.ticketID = ticketID;
        return this;
    }

    public WebhookDataTicketUpdated withForeignID(String foreignID) {
        Utils.checkNotNull(foreignID, "foreignID");
        this.foreignID = Optional.ofNullable(foreignID);
        return this;
    }


    public WebhookDataTicketUpdated withForeignID(Optional<String> foreignID) {
        Utils.checkNotNull(foreignID, "foreignID");
        this.foreignID = foreignID;
        return this;
    }

    public WebhookDataTicketUpdated withStatus(TicketStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookDataTicketUpdated other = (WebhookDataTicketUpdated) o;
        return 
            Utils.enhancedDeepEquals(this.accountID, other.accountID) &&
            Utils.enhancedDeepEquals(this.ticketID, other.ticketID) &&
            Utils.enhancedDeepEquals(this.foreignID, other.foreignID) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountID, ticketID, foreignID,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookDataTicketUpdated.class,
                "accountID", accountID,
                "ticketID", ticketID,
                "foreignID", foreignID,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountID;

        private String ticketID;

        private Optional<String> foreignID = Optional.empty();

        private TicketStatus status;

        private Builder() {
          // force use of static builder() method
        }


        public Builder accountID(String accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = accountID;
            return this;
        }


        public Builder ticketID(String ticketID) {
            Utils.checkNotNull(ticketID, "ticketID");
            this.ticketID = ticketID;
            return this;
        }


        public Builder foreignID(String foreignID) {
            Utils.checkNotNull(foreignID, "foreignID");
            this.foreignID = Optional.ofNullable(foreignID);
            return this;
        }

        public Builder foreignID(Optional<String> foreignID) {
            Utils.checkNotNull(foreignID, "foreignID");
            this.foreignID = foreignID;
            return this;
        }


        public Builder status(TicketStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public WebhookDataTicketUpdated build() {

            return new WebhookDataTicketUpdated(
                accountID, ticketID, foreignID,
                status);
        }

    }
}
