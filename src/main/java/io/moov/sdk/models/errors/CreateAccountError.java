/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.models.components.CreateAccountSettings;
import io.moov.sdk.models.components.CreateProfileError;
import io.moov.sdk.models.components.CustomerSupportError;
import io.moov.sdk.models.components.TermsOfServiceError;
import io.moov.sdk.utils.Utils;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.net.http.HttpResponse;
import java.util.Map;
import java.util.Optional;

@SuppressWarnings("serial")
public class CreateAccountError extends MoovError {

    @Nullable
    private final Data data;

    @Nullable
    private final Throwable deserializationException;

    public CreateAccountError(
                int code,
                byte[] body,
                HttpResponse<?> rawResponse,
                @Nullable Data data,
                @Nullable Throwable deserializationException) {
        super("API error occurred", code, body, rawResponse, null);
        this.data = data;
        this.deserializationException = deserializationException;
    }

    /**
    * Parse a response into an instance of CreateAccountError. If deserialization of the response body fails,
    * the resulting CreateAccountError instance will have a null data() value and a non-null deserializationException().
    */
    public static CreateAccountError from(HttpResponse<InputStream> response) {
        try {
            byte[] bytes = Utils.extractByteArrayFromBody(response);
            Data data = Utils.mapper().readValue(bytes, Data.class);
            return new CreateAccountError(response.statusCode(), bytes, response, data, null);
        } catch (Exception e) {
            return new CreateAccountError(response.statusCode(), null, response, null, e);
        }
    }

    @Deprecated
    public Optional<String> accountType() {
        return data().flatMap(Data::accountType);
    }

    @Deprecated
    public Optional<CreateProfileError> profile() {
        return data().flatMap(Data::profile);
    }

    @Deprecated
    public Optional<String> metadata() {
        return data().flatMap(Data::metadata);
    }

    @Deprecated
    public Optional<TermsOfServiceError> termsOfService() {
        return data().flatMap(Data::termsOfService);
    }

    @Deprecated
    public Optional<String> foreignID() {
        return data().flatMap(Data::foreignID);
    }

    @Deprecated
    public Optional<CustomerSupportError> customerSupport() {
        return data().flatMap(Data::customerSupport);
    }

    @Deprecated
    public Optional<CreateAccountSettings> settings() {
        return data().flatMap(Data::settings);
    }

    @Deprecated
    public Optional<Map<String, String>> capabilities() {
        return data().flatMap(Data::capabilities);
    }

    public Optional<Data> data() {
        return Optional.ofNullable(data);
    }

    /**
     * Returns the exception if an error occurs while deserializing the response body.
     */
    public Optional<Throwable> deserializationException() {
        return Optional.ofNullable(deserializationException);
    }

    public static class Data {

        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("accountType")
        private Optional<String> accountType;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("profile")
        private Optional<? extends CreateProfileError> profile;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("metadata")
        private Optional<String> metadata;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("termsOfService")
        private Optional<? extends TermsOfServiceError> termsOfService;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("foreignID")
        private Optional<String> foreignID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("customerSupport")
        private Optional<? extends CustomerSupportError> customerSupport;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("settings")
        private Optional<? extends CreateAccountSettings> settings;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("capabilities")
        private Optional<? extends Map<String, String>> capabilities;

        @JsonCreator
        public Data(
                @JsonProperty("accountType") Optional<String> accountType,
                @JsonProperty("profile") Optional<? extends CreateProfileError> profile,
                @JsonProperty("metadata") Optional<String> metadata,
                @JsonProperty("termsOfService") Optional<? extends TermsOfServiceError> termsOfService,
                @JsonProperty("foreignID") Optional<String> foreignID,
                @JsonProperty("customerSupport") Optional<? extends CustomerSupportError> customerSupport,
                @JsonProperty("settings") Optional<? extends CreateAccountSettings> settings,
                @JsonProperty("capabilities") Optional<? extends Map<String, String>> capabilities) {
            Utils.checkNotNull(accountType, "accountType");
            Utils.checkNotNull(profile, "profile");
            Utils.checkNotNull(metadata, "metadata");
            Utils.checkNotNull(termsOfService, "termsOfService");
            Utils.checkNotNull(foreignID, "foreignID");
            Utils.checkNotNull(customerSupport, "customerSupport");
            Utils.checkNotNull(settings, "settings");
            Utils.checkNotNull(capabilities, "capabilities");
            this.accountType = accountType;
            this.profile = profile;
            this.metadata = metadata;
            this.termsOfService = termsOfService;
            this.foreignID = foreignID;
            this.customerSupport = customerSupport;
            this.settings = settings;
            this.capabilities = capabilities;
        }
        
        public Data() {
            this(Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty());
        }

        @JsonIgnore
        public Optional<String> accountType() {
            return accountType;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<CreateProfileError> profile() {
            return (Optional<CreateProfileError>) profile;
        }

        @JsonIgnore
        public Optional<String> metadata() {
            return metadata;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<TermsOfServiceError> termsOfService() {
            return (Optional<TermsOfServiceError>) termsOfService;
        }

        @JsonIgnore
        public Optional<String> foreignID() {
            return foreignID;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<CustomerSupportError> customerSupport() {
            return (Optional<CustomerSupportError>) customerSupport;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<CreateAccountSettings> settings() {
            return (Optional<CreateAccountSettings>) settings;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<Map<String, String>> capabilities() {
            return (Optional<Map<String, String>>) capabilities;
        }

        public static Builder builder() {
            return new Builder();
        }


        public Data withAccountType(String accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }


        public Data withAccountType(Optional<String> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }

        public Data withProfile(CreateProfileError profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = Optional.ofNullable(profile);
            return this;
        }


        public Data withProfile(Optional<? extends CreateProfileError> profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = profile;
            return this;
        }

        public Data withMetadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }


        public Data withMetadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Data withTermsOfService(TermsOfServiceError termsOfService) {
            Utils.checkNotNull(termsOfService, "termsOfService");
            this.termsOfService = Optional.ofNullable(termsOfService);
            return this;
        }


        public Data withTermsOfService(Optional<? extends TermsOfServiceError> termsOfService) {
            Utils.checkNotNull(termsOfService, "termsOfService");
            this.termsOfService = termsOfService;
            return this;
        }

        public Data withForeignID(String foreignID) {
            Utils.checkNotNull(foreignID, "foreignID");
            this.foreignID = Optional.ofNullable(foreignID);
            return this;
        }


        public Data withForeignID(Optional<String> foreignID) {
            Utils.checkNotNull(foreignID, "foreignID");
            this.foreignID = foreignID;
            return this;
        }

        public Data withCustomerSupport(CustomerSupportError customerSupport) {
            Utils.checkNotNull(customerSupport, "customerSupport");
            this.customerSupport = Optional.ofNullable(customerSupport);
            return this;
        }


        public Data withCustomerSupport(Optional<? extends CustomerSupportError> customerSupport) {
            Utils.checkNotNull(customerSupport, "customerSupport");
            this.customerSupport = customerSupport;
            return this;
        }

        public Data withSettings(CreateAccountSettings settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = Optional.ofNullable(settings);
            return this;
        }


        public Data withSettings(Optional<? extends CreateAccountSettings> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = settings;
            return this;
        }

        public Data withCapabilities(Map<String, String> capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = Optional.ofNullable(capabilities);
            return this;
        }


        public Data withCapabilities(Optional<? extends Map<String, String>> capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = capabilities;
            return this;
        }

        @Override
        public boolean equals(java.lang.Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Data other = (Data) o;
            return 
                Utils.enhancedDeepEquals(this.accountType, other.accountType) &&
                Utils.enhancedDeepEquals(this.profile, other.profile) &&
                Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
                Utils.enhancedDeepEquals(this.termsOfService, other.termsOfService) &&
                Utils.enhancedDeepEquals(this.foreignID, other.foreignID) &&
                Utils.enhancedDeepEquals(this.customerSupport, other.customerSupport) &&
                Utils.enhancedDeepEquals(this.settings, other.settings) &&
                Utils.enhancedDeepEquals(this.capabilities, other.capabilities);
        }
        
        @Override
        public int hashCode() {
            return Utils.enhancedHash(
                accountType, profile, metadata,
                termsOfService, foreignID, customerSupport,
                settings, capabilities);
        }
        
        @Override
        public String toString() {
            return Utils.toString(Data.class,
                    "accountType", accountType,
                    "profile", profile,
                    "metadata", metadata,
                    "termsOfService", termsOfService,
                    "foreignID", foreignID,
                    "customerSupport", customerSupport,
                    "settings", settings,
                    "capabilities", capabilities);
        }

        @SuppressWarnings("UnusedReturnValue")
        public final static class Builder {

            private Optional<String> accountType = Optional.empty();

            private Optional<? extends CreateProfileError> profile = Optional.empty();

            private Optional<String> metadata = Optional.empty();

            private Optional<? extends TermsOfServiceError> termsOfService = Optional.empty();

            private Optional<String> foreignID = Optional.empty();

            private Optional<? extends CustomerSupportError> customerSupport = Optional.empty();

            private Optional<? extends CreateAccountSettings> settings = Optional.empty();

            private Optional<? extends Map<String, String>> capabilities = Optional.empty();

            private Builder() {
              // force use of static builder() method
            }


            public Builder accountType(String accountType) {
                Utils.checkNotNull(accountType, "accountType");
                this.accountType = Optional.ofNullable(accountType);
                return this;
            }

            public Builder accountType(Optional<String> accountType) {
                Utils.checkNotNull(accountType, "accountType");
                this.accountType = accountType;
                return this;
            }


            public Builder profile(CreateProfileError profile) {
                Utils.checkNotNull(profile, "profile");
                this.profile = Optional.ofNullable(profile);
                return this;
            }

            public Builder profile(Optional<? extends CreateProfileError> profile) {
                Utils.checkNotNull(profile, "profile");
                this.profile = profile;
                return this;
            }


            public Builder metadata(String metadata) {
                Utils.checkNotNull(metadata, "metadata");
                this.metadata = Optional.ofNullable(metadata);
                return this;
            }

            public Builder metadata(Optional<String> metadata) {
                Utils.checkNotNull(metadata, "metadata");
                this.metadata = metadata;
                return this;
            }


            public Builder termsOfService(TermsOfServiceError termsOfService) {
                Utils.checkNotNull(termsOfService, "termsOfService");
                this.termsOfService = Optional.ofNullable(termsOfService);
                return this;
            }

            public Builder termsOfService(Optional<? extends TermsOfServiceError> termsOfService) {
                Utils.checkNotNull(termsOfService, "termsOfService");
                this.termsOfService = termsOfService;
                return this;
            }


            public Builder foreignID(String foreignID) {
                Utils.checkNotNull(foreignID, "foreignID");
                this.foreignID = Optional.ofNullable(foreignID);
                return this;
            }

            public Builder foreignID(Optional<String> foreignID) {
                Utils.checkNotNull(foreignID, "foreignID");
                this.foreignID = foreignID;
                return this;
            }


            public Builder customerSupport(CustomerSupportError customerSupport) {
                Utils.checkNotNull(customerSupport, "customerSupport");
                this.customerSupport = Optional.ofNullable(customerSupport);
                return this;
            }

            public Builder customerSupport(Optional<? extends CustomerSupportError> customerSupport) {
                Utils.checkNotNull(customerSupport, "customerSupport");
                this.customerSupport = customerSupport;
                return this;
            }


            public Builder settings(CreateAccountSettings settings) {
                Utils.checkNotNull(settings, "settings");
                this.settings = Optional.ofNullable(settings);
                return this;
            }

            public Builder settings(Optional<? extends CreateAccountSettings> settings) {
                Utils.checkNotNull(settings, "settings");
                this.settings = settings;
                return this;
            }


            public Builder capabilities(Map<String, String> capabilities) {
                Utils.checkNotNull(capabilities, "capabilities");
                this.capabilities = Optional.ofNullable(capabilities);
                return this;
            }

            public Builder capabilities(Optional<? extends Map<String, String>> capabilities) {
                Utils.checkNotNull(capabilities, "capabilities");
                this.capabilities = capabilities;
                return this;
            }

            public Data build() {

                return new Data(
                    accountType, profile, metadata,
                    termsOfService, foreignID, customerSupport,
                    settings, capabilities);
            }

        }
    }

}

