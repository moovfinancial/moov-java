/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import io.moov.openapi.models.components.ApplePayMerchantDomains;
import io.moov.openapi.models.components.Card;
import io.moov.openapi.models.components.CreateApplePaySession;
import io.moov.openapi.models.components.LinkApplePay;
import io.moov.openapi.models.components.LinkCard;
import io.moov.openapi.models.components.LinkCardWaitFor;
import io.moov.openapi.models.components.LinkedApplePayPaymentMethod;
import io.moov.openapi.models.components.RegisterApplePayMerchantDomains;
import io.moov.openapi.models.components.UpdateApplePayMerchantDomains;
import io.moov.openapi.models.components.UpdateCard;
import io.moov.openapi.models.components.Versions;
import io.moov.openapi.models.errors.APIException;
import io.moov.openapi.models.errors.GenericError;
import io.moov.openapi.models.errors.LinkApplePayError;
import io.moov.openapi.models.errors.LinkCardError;
import io.moov.openapi.models.errors.UpdateCardError;
import io.moov.openapi.models.operations.CreateApplePaySessionRequest;
import io.moov.openapi.models.operations.CreateApplePaySessionRequestBuilder;
import io.moov.openapi.models.operations.CreateApplePaySessionResponse;
import io.moov.openapi.models.operations.CreateApplePaySessionSecurity;
import io.moov.openapi.models.operations.DisableCardRequest;
import io.moov.openapi.models.operations.DisableCardRequestBuilder;
import io.moov.openapi.models.operations.DisableCardResponse;
import io.moov.openapi.models.operations.DisableCardSecurity;
import io.moov.openapi.models.operations.GetApplePayMerchantDomainsRequest;
import io.moov.openapi.models.operations.GetApplePayMerchantDomainsRequestBuilder;
import io.moov.openapi.models.operations.GetApplePayMerchantDomainsResponse;
import io.moov.openapi.models.operations.GetApplePayMerchantDomainsSecurity;
import io.moov.openapi.models.operations.GetCardRequest;
import io.moov.openapi.models.operations.GetCardRequestBuilder;
import io.moov.openapi.models.operations.GetCardResponse;
import io.moov.openapi.models.operations.GetCardSecurity;
import io.moov.openapi.models.operations.LinkApplePayTokenRequest;
import io.moov.openapi.models.operations.LinkApplePayTokenRequestBuilder;
import io.moov.openapi.models.operations.LinkApplePayTokenResponse;
import io.moov.openapi.models.operations.LinkApplePayTokenSecurity;
import io.moov.openapi.models.operations.LinkCardRequest;
import io.moov.openapi.models.operations.LinkCardRequestBuilder;
import io.moov.openapi.models.operations.LinkCardResponse;
import io.moov.openapi.models.operations.LinkCardSecurity;
import io.moov.openapi.models.operations.ListCardsRequest;
import io.moov.openapi.models.operations.ListCardsRequestBuilder;
import io.moov.openapi.models.operations.ListCardsResponse;
import io.moov.openapi.models.operations.ListCardsSecurity;
import io.moov.openapi.models.operations.RegisterApplePayMerchantDomainsRequest;
import io.moov.openapi.models.operations.RegisterApplePayMerchantDomainsRequestBuilder;
import io.moov.openapi.models.operations.RegisterApplePayMerchantDomainsResponse;
import io.moov.openapi.models.operations.RegisterApplePayMerchantDomainsSecurity;
import io.moov.openapi.models.operations.SDKMethodInterfaces.*;
import io.moov.openapi.models.operations.UpdateApplePayMerchantDomainsRequest;
import io.moov.openapi.models.operations.UpdateApplePayMerchantDomainsRequestBuilder;
import io.moov.openapi.models.operations.UpdateApplePayMerchantDomainsResponse;
import io.moov.openapi.models.operations.UpdateApplePayMerchantDomainsSecurity;
import io.moov.openapi.models.operations.UpdateCardRequest;
import io.moov.openapi.models.operations.UpdateCardRequestBuilder;
import io.moov.openapi.models.operations.UpdateCardResponse;
import io.moov.openapi.models.operations.UpdateCardSecurity;
import io.moov.openapi.utils.HTTPClient;
import io.moov.openapi.utils.HTTPRequest;
import io.moov.openapi.utils.Hook.AfterErrorContextImpl;
import io.moov.openapi.utils.Hook.AfterSuccessContextImpl;
import io.moov.openapi.utils.Hook.BeforeRequestContextImpl;
import io.moov.openapi.utils.SerializedBody;
import io.moov.openapi.utils.Utils.JsonShape;
import io.moov.openapi.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class Cards implements
            MethodCallRegisterApplePayMerchantDomains,
            MethodCallUpdateApplePayMerchantDomains,
            MethodCallGetApplePayMerchantDomains,
            MethodCallCreateApplePaySession,
            MethodCallLinkApplePayToken,
            MethodCallLinkCard,
            MethodCallListCards,
            MethodCallGetCard,
            MethodCallUpdateCard,
            MethodCallDisableCard {

    private final SDKConfiguration sdkConfiguration;

    Cards(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Add domains to be registered with Apple Pay. -  - Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains)  - with Apple. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating a  - [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public RegisterApplePayMerchantDomainsRequestBuilder registerApplePayMerchantDomains() {
        return new RegisterApplePayMerchantDomainsRequestBuilder(this);
    }

    /**
     * Add domains to be registered with Apple Pay. -  - Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains)  - with Apple. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating a  - [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID ID of the Moov account representing the merchant.
     * @param registerApplePayMerchantDomains
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RegisterApplePayMerchantDomainsResponse registerApplePayMerchantDomains(
            RegisterApplePayMerchantDomainsSecurity security,
            String accountID,
            RegisterApplePayMerchantDomains registerApplePayMerchantDomains) throws Exception {
        return registerApplePayMerchantDomains(security, Optional.empty(), accountID, registerApplePayMerchantDomains);
    }
    
    /**
     * Add domains to be registered with Apple Pay. -  - Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains)  - with Apple. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating a  - [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID ID of the Moov account representing the merchant.
     * @param registerApplePayMerchantDomains
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RegisterApplePayMerchantDomainsResponse registerApplePayMerchantDomains(
            RegisterApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            RegisterApplePayMerchantDomains registerApplePayMerchantDomains) throws Exception {
        RegisterApplePayMerchantDomainsRequest request =
            RegisterApplePayMerchantDomainsRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .registerApplePayMerchantDomains(registerApplePayMerchantDomains)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                RegisterApplePayMerchantDomainsRequest.class,
                _baseUrl,
                "/accounts/{accountID}/apple-pay/domains",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "registerApplePayMerchantDomains",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "registerApplePayMerchantDomains", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "409", "417", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "registerApplePayMerchantDomains",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "registerApplePayMerchantDomains",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "registerApplePayMerchantDomains",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        RegisterApplePayMerchantDomainsResponse.Builder _resBuilder = 
            RegisterApplePayMerchantDomainsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        RegisterApplePayMerchantDomainsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ApplePayMerchantDomains _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ApplePayMerchantDomains>() {});
                _res.withApplePayMerchantDomains(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GenericError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GenericError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "409", "417", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     *   Add or remove domains to be registered with Apple Pay.  -  -   Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains)  -   with Apple. -    -   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating a  -   [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public UpdateApplePayMerchantDomainsRequestBuilder updateApplePayMerchantDomains() {
        return new UpdateApplePayMerchantDomainsRequestBuilder(this);
    }

    /**
     *   Add or remove domains to be registered with Apple Pay.  -  -   Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains)  -   with Apple. -    -   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating a  -   [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID ID of the Moov account representing the merchant.
     * @param updateApplePayMerchantDomains
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateApplePayMerchantDomainsResponse updateApplePayMerchantDomains(
            UpdateApplePayMerchantDomainsSecurity security,
            String accountID,
            UpdateApplePayMerchantDomains updateApplePayMerchantDomains) throws Exception {
        return updateApplePayMerchantDomains(security, Optional.empty(), accountID, updateApplePayMerchantDomains);
    }
    
    /**
     *   Add or remove domains to be registered with Apple Pay.  -  -   Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains)  -   with Apple. -    -   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating a  -   [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID ID of the Moov account representing the merchant.
     * @param updateApplePayMerchantDomains
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateApplePayMerchantDomainsResponse updateApplePayMerchantDomains(
            UpdateApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            UpdateApplePayMerchantDomains updateApplePayMerchantDomains) throws Exception {
        UpdateApplePayMerchantDomainsRequest request =
            UpdateApplePayMerchantDomainsRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .updateApplePayMerchantDomains(updateApplePayMerchantDomains)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                UpdateApplePayMerchantDomainsRequest.class,
                _baseUrl,
                "/accounts/{accountID}/apple-pay/domains",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PATCH");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "updateApplePayMerchantDomains",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "updateApplePayMerchantDomains", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "404", "409", "417", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "updateApplePayMerchantDomains",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "updateApplePayMerchantDomains",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "updateApplePayMerchantDomains",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        UpdateApplePayMerchantDomainsResponse.Builder _resBuilder = 
            UpdateApplePayMerchantDomainsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        UpdateApplePayMerchantDomainsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GenericError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GenericError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "409", "417", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     *   Get domains registered with Apple Pay.  -    -   Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  -    -   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.read` scope when generating a  -   [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public GetApplePayMerchantDomainsRequestBuilder getApplePayMerchantDomains() {
        return new GetApplePayMerchantDomainsRequestBuilder(this);
    }

    /**
     *   Get domains registered with Apple Pay.  -    -   Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  -    -   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.read` scope when generating a  -   [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID ID of the Moov account representing the merchant.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetApplePayMerchantDomainsResponse getApplePayMerchantDomains(
            GetApplePayMerchantDomainsSecurity security,
            String accountID) throws Exception {
        return getApplePayMerchantDomains(security, Optional.empty(), accountID);
    }
    
    /**
     *   Get domains registered with Apple Pay.  -    -   Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  -    -   To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.read` scope when generating a  -   [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID ID of the Moov account representing the merchant.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetApplePayMerchantDomainsResponse getApplePayMerchantDomains(
            GetApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception {
        GetApplePayMerchantDomainsRequest request =
            GetApplePayMerchantDomainsRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetApplePayMerchantDomainsRequest.class,
                _baseUrl,
                "/accounts/{accountID}/apple-pay/domains",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "getApplePayMerchantDomains", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "getApplePayMerchantDomains",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "getApplePayMerchantDomains",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "getApplePayMerchantDomains",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetApplePayMerchantDomainsResponse.Builder _resBuilder = 
            GetApplePayMerchantDomainsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetApplePayMerchantDomainsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ApplePayMerchantDomains _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ApplePayMerchantDomains>() {});
                _res.withApplePayMerchantDomains(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a session with Apple Pay to facilitate a payment.  -  - Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  - A successful response from this endpoint should be passed through to Apple Pay unchanged.  -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public CreateApplePaySessionRequestBuilder createApplePaySession() {
        return new CreateApplePaySessionRequestBuilder(this);
    }

    /**
     * Create a session with Apple Pay to facilitate a payment.  -  - Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  - A successful response from this endpoint should be passed through to Apple Pay unchanged.  -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID ID of the Moov account representing the merchant.
     * @param createApplePaySession
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateApplePaySessionResponse createApplePaySession(
            CreateApplePaySessionSecurity security,
            String accountID,
            CreateApplePaySession createApplePaySession) throws Exception {
        return createApplePaySession(security, Optional.empty(), accountID, createApplePaySession);
    }
    
    /**
     * Create a session with Apple Pay to facilitate a payment.  -  - Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  - A successful response from this endpoint should be passed through to Apple Pay unchanged.  -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/apple-pay.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID ID of the Moov account representing the merchant.
     * @param createApplePaySession
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateApplePaySessionResponse createApplePaySession(
            CreateApplePaySessionSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateApplePaySession createApplePaySession) throws Exception {
        CreateApplePaySessionRequest request =
            CreateApplePaySessionRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .createApplePaySession(createApplePaySession)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                CreateApplePaySessionRequest.class,
                _baseUrl,
                "/accounts/{accountID}/apple-pay/sessions",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "createApplePaySession",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "createApplePaySession", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "404", "409", "422", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "createApplePaySession",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "createApplePaySession",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "createApplePaySession",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateApplePaySessionResponse.Builder _resBuilder = 
            CreateApplePaySessionResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateApplePaySessionResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                String _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<String>() {});
                _res.withApplePaySession(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "409", "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GenericError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GenericError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Connect an Apple Pay token to the specified account.  -  - Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  - The `token` data is defined by Apple Pay and should be passed through from Apple Pay's response unmodified. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public LinkApplePayTokenRequestBuilder linkApplePayToken() {
        return new LinkApplePayTokenRequestBuilder(this);
    }

    /**
     * Connect an Apple Pay token to the specified account.  -  - Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  - The `token` data is defined by Apple Pay and should be passed through from Apple Pay's response unmodified. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID ID of the Moov account representing the cardholder.
     * @param linkApplePay   The JSON structure returned from Apple Pay when authorizing a payment session.

      Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment) 
      for more information.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LinkApplePayTokenResponse linkApplePayToken(
            LinkApplePayTokenSecurity security,
            String accountID,
            LinkApplePay linkApplePay) throws Exception {
        return linkApplePayToken(security, Optional.empty(), accountID, linkApplePay);
    }
    
    /**
     * Connect an Apple Pay token to the specified account.  -  - Read our [Apple Pay tutorial](https://docs.moov.io/guides/sources/cards/apple-pay/#register-your-domains) to learn more.  - The `token` data is defined by Apple Pay and should be passed through from Apple Pay's response unmodified. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID ID of the Moov account representing the cardholder.
     * @param linkApplePay   The JSON structure returned from Apple Pay when authorizing a payment session.

      Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment) 
      for more information.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LinkApplePayTokenResponse linkApplePayToken(
            LinkApplePayTokenSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            LinkApplePay linkApplePay) throws Exception {
        LinkApplePayTokenRequest request =
            LinkApplePayTokenRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .linkApplePay(linkApplePay)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                LinkApplePayTokenRequest.class,
                _baseUrl,
                "/accounts/{accountID}/apple-pay/tokens",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "linkApplePay",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "linkApplePayToken", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "404", "409", "422", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "linkApplePayToken",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "linkApplePayToken",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "linkApplePayToken",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        LinkApplePayTokenResponse.Builder _resBuilder = 
            LinkApplePayTokenResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        LinkApplePayTokenResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                LinkedApplePayPaymentMethod _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<LinkedApplePayPaymentMethod>() {});
                _res.withLinkedApplePayPaymentMethod(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "409")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GenericError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GenericError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                LinkApplePayError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<LinkApplePayError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Link a card to an existing Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#link-a-card) to learn more. -  - Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.  -  - During card linking, the provided data will be verified by submitting a $0 authorization (account verification) request.  - If `merchantAccountID` is provided, the authorization request will contain that account's statement descriptor and address.  - Otherwise, the platform account's profile will be used. If no statement descriptor has been set, the authorization will  - use the account's name instead. -  - It is strongly recommended that callers include the `X-Wait-For` header, set to `payment-method`, if the newly linked  - card is intended to be used right away. If this header is not included, the caller will need to poll the [List Payment  - Methods](https://docs.moov.io/api/sources/payment-methods/list/) - endpoint to wait for the new payment methods to be available for use. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope - when generating a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public LinkCardRequestBuilder linkCard() {
        return new LinkCardRequestBuilder(this);
    }

    /**
     * Link a card to an existing Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#link-a-card) to learn more. -  - Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.  -  - During card linking, the provided data will be verified by submitting a $0 authorization (account verification) request.  - If `merchantAccountID` is provided, the authorization request will contain that account's statement descriptor and address.  - Otherwise, the platform account's profile will be used. If no statement descriptor has been set, the authorization will  - use the account's name instead. -  - It is strongly recommended that callers include the `X-Wait-For` header, set to `payment-method`, if the newly linked  - card is intended to be used right away. If this header is not included, the caller will need to poll the [List Payment  - Methods](https://docs.moov.io/api/sources/payment-methods/list/) - endpoint to wait for the new payment methods to be available for use. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope - when generating a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID
     * @param linkCard
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LinkCardResponse linkCard(
            LinkCardSecurity security,
            String accountID,
            LinkCard linkCard) throws Exception {
        return linkCard(security, Optional.empty(), Optional.empty(), accountID, linkCard);
    }
    
    /**
     * Link a card to an existing Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#link-a-card) to learn more. -  - Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.  -  - During card linking, the provided data will be verified by submitting a $0 authorization (account verification) request.  - If `merchantAccountID` is provided, the authorization request will contain that account's statement descriptor and address.  - Otherwise, the platform account's profile will be used. If no statement descriptor has been set, the authorization will  - use the account's name instead. -  - It is strongly recommended that callers include the `X-Wait-For` header, set to `payment-method`, if the newly linked  - card is intended to be used right away. If this header is not included, the caller will need to poll the [List Payment  - Methods](https://docs.moov.io/api/sources/payment-methods/list/) - endpoint to wait for the new payment methods to be available for use. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope - when generating a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param xWaitFor
     * @param accountID
     * @param linkCard
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LinkCardResponse linkCard(
            LinkCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<? extends LinkCardWaitFor> xWaitFor,
            String accountID,
            LinkCard linkCard) throws Exception {
        LinkCardRequest request =
            LinkCardRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .xWaitFor(xWaitFor)
                .accountID(accountID)
                .linkCard(linkCard)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                LinkCardRequest.class,
                _baseUrl,
                "/accounts/{accountID}/cards",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "linkCard",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "linkCard", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "404", "409", "422", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "linkCard",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "linkCard",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "linkCard",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        LinkCardResponse.Builder _resBuilder = 
            LinkCardResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        LinkCardResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Card _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Card>() {});
                _res.withCard(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "409")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GenericError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GenericError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                LinkCardError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<LinkCardError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * List all the active cards associated with a Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.read` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public ListCardsRequestBuilder listCards() {
        return new ListCardsRequestBuilder(this);
    }

    /**
     * List all the active cards associated with a Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.read` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCardsResponse listCards(
            ListCardsSecurity security,
            String accountID) throws Exception {
        return listCards(security, Optional.empty(), accountID);
    }
    
    /**
     * List all the active cards associated with a Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.read` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCardsResponse listCards(
            ListCardsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception {
        ListCardsRequest request =
            ListCardsRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                ListCardsRequest.class,
                _baseUrl,
                "/accounts/{accountID}/cards",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "listCards", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "listCards",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "listCards",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "listCards",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListCardsResponse.Builder _resBuilder = 
            ListCardsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListCardsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<Card> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<Card>>() {});
                _res.withCards(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Fetch a specific card associated with a Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.read` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public GetCardRequestBuilder getCard() {
        return new GetCardRequestBuilder(this);
    }

    /**
     * Fetch a specific card associated with a Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.read` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID
     * @param cardID
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCardResponse getCard(
            GetCardSecurity security,
            String accountID,
            String cardID) throws Exception {
        return getCard(security, Optional.empty(), accountID, cardID);
    }
    
    /**
     * Fetch a specific card associated with a Moov account.  -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/) to learn more. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.read` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID
     * @param cardID
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCardResponse getCard(
            GetCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID) throws Exception {
        GetCardRequest request =
            GetCardRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .cardID(cardID)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetCardRequest.class,
                _baseUrl,
                "/accounts/{accountID}/cards/{cardID}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "getCard", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "getCard",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "getCard",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "getCard",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetCardResponse.Builder _resBuilder = 
            GetCardResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetCardResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Card _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Card>() {});
                _res.withCard(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a linked card and/or resubmit it for verification.  -  - If a value is provided for CVV, a new verification ($0 authorization) will be submitted for the card. Updating the expiration  - date or  - address will update the information stored on file for the card but will not be verified. -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#reverify-a-card) to learn  - more. -  - Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.  -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public UpdateCardRequestBuilder updateCard() {
        return new UpdateCardRequestBuilder(this);
    }

    /**
     * Update a linked card and/or resubmit it for verification.  -  - If a value is provided for CVV, a new verification ($0 authorization) will be submitted for the card. Updating the expiration  - date or  - address will update the information stored on file for the card but will not be verified. -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#reverify-a-card) to learn  - more. -  - Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.  -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID
     * @param cardID
     * @param updateCard
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCardResponse updateCard(
            UpdateCardSecurity security,
            String accountID,
            String cardID,
            UpdateCard updateCard) throws Exception {
        return updateCard(security, Optional.empty(), accountID, cardID, updateCard);
    }
    
    /**
     * Update a linked card and/or resubmit it for verification.  -  - If a value is provided for CVV, a new verification ($0 authorization) will be submitted for the card. Updating the expiration  - date or  - address will update the information stored on file for the card but will not be verified. -  - Read our [accept card payments guide](https://docs.moov.io/guides/sources/cards/accept-card-payments/#reverify-a-card) to learn  - more. -  - Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.  -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID
     * @param cardID
     * @param updateCard
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCardResponse updateCard(
            UpdateCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID,
            UpdateCard updateCard) throws Exception {
        UpdateCardRequest request =
            UpdateCardRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .cardID(cardID)
                .updateCard(updateCard)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                UpdateCardRequest.class,
                _baseUrl,
                "/accounts/{accountID}/cards/{cardID}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PATCH");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "updateCard",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "updateCard", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "404", "409", "422", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "updateCard",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "updateCard",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "updateCard",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        UpdateCardResponse.Builder _resBuilder = 
            UpdateCardResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        UpdateCardResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Card _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Card>() {});
                _res.withCard(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "409")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GenericError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GenericError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UpdateCardError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UpdateCardError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Disables a card associated with a Moov account. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @return The call builder
     */
    public DisableCardRequestBuilder disableCard() {
        return new DisableCardRequestBuilder(this);
    }

    /**
     * Disables a card associated with a Moov account. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param accountID
     * @param cardID
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DisableCardResponse disableCard(
            DisableCardSecurity security,
            String accountID,
            String cardID) throws Exception {
        return disableCard(security, Optional.empty(), accountID, cardID);
    }
    
    /**
     * Disables a card associated with a Moov account. -  - To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/cards.write` scope when generating  - a [token](https://docs.moov.io/api/authentication/access-tokens/).
     * @param security The security details to use for authentication.
     * @param xMoovVersion Moov API versions. Version strings are formatted as `vYYYY.MM.DD`, except preVerioned and latest.
     * @param accountID
     * @param cardID
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DisableCardResponse disableCard(
            DisableCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID) throws Exception {
        DisableCardRequest request =
            DisableCardRequest
                .builder()
                .xMoovVersion(xMoovVersion)
                .accountID(accountID)
                .cardID(cardID)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DisableCardRequest.class,
                _baseUrl,
                "/accounts/{accountID}/cards/{cardID}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "disableCard", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "404", "409", "429", "4XX", "500", "504", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "disableCard",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "disableCard",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "disableCard",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DisableCardResponse.Builder _resBuilder = 
            DisableCardResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DisableCardResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "409")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GenericError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GenericError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "403", "404", "429", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "500", "504", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
