/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ProductImageMetadata {
    /**
     * Unique identifier for a product or product option image resource.
     */
    @JsonProperty("imageID")
    private String imageID;

    /**
     * Alternative text for the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("altText")
    private Optional<String> altText;

    /**
     * The image's public URL.
     */
    @JsonProperty("link")
    private String link;

    @JsonCreator
    public ProductImageMetadata(
            @JsonProperty("imageID") String imageID,
            @JsonProperty("altText") Optional<String> altText,
            @JsonProperty("link") String link) {
        Utils.checkNotNull(imageID, "imageID");
        Utils.checkNotNull(altText, "altText");
        Utils.checkNotNull(link, "link");
        this.imageID = imageID;
        this.altText = altText;
        this.link = link;
    }
    
    public ProductImageMetadata(
            String imageID,
            String link) {
        this(imageID, Optional.empty(), link);
    }

    /**
     * Unique identifier for a product or product option image resource.
     */
    @JsonIgnore
    public String imageID() {
        return imageID;
    }

    /**
     * Alternative text for the image.
     */
    @JsonIgnore
    public Optional<String> altText() {
        return altText;
    }

    /**
     * The image's public URL.
     */
    @JsonIgnore
    public String link() {
        return link;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for a product or product option image resource.
     */
    public ProductImageMetadata withImageID(String imageID) {
        Utils.checkNotNull(imageID, "imageID");
        this.imageID = imageID;
        return this;
    }

    /**
     * Alternative text for the image.
     */
    public ProductImageMetadata withAltText(String altText) {
        Utils.checkNotNull(altText, "altText");
        this.altText = Optional.ofNullable(altText);
        return this;
    }


    /**
     * Alternative text for the image.
     */
    public ProductImageMetadata withAltText(Optional<String> altText) {
        Utils.checkNotNull(altText, "altText");
        this.altText = altText;
        return this;
    }

    /**
     * The image's public URL.
     */
    public ProductImageMetadata withLink(String link) {
        Utils.checkNotNull(link, "link");
        this.link = link;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductImageMetadata other = (ProductImageMetadata) o;
        return 
            Utils.enhancedDeepEquals(this.imageID, other.imageID) &&
            Utils.enhancedDeepEquals(this.altText, other.altText) &&
            Utils.enhancedDeepEquals(this.link, other.link);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            imageID, altText, link);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductImageMetadata.class,
                "imageID", imageID,
                "altText", altText,
                "link", link);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String imageID;

        private Optional<String> altText = Optional.empty();

        private String link;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier for a product or product option image resource.
         */
        public Builder imageID(String imageID) {
            Utils.checkNotNull(imageID, "imageID");
            this.imageID = imageID;
            return this;
        }


        /**
         * Alternative text for the image.
         */
        public Builder altText(String altText) {
            Utils.checkNotNull(altText, "altText");
            this.altText = Optional.ofNullable(altText);
            return this;
        }

        /**
         * Alternative text for the image.
         */
        public Builder altText(Optional<String> altText) {
            Utils.checkNotNull(altText, "altText");
            this.altText = altText;
            return this;
        }


        /**
         * The image's public URL.
         */
        public Builder link(String link) {
            Utils.checkNotNull(link, "link");
            this.link = link;
            return this;
        }

        public ProductImageMetadata build() {

            return new ProductImageMetadata(
                imageID, altText, link);
        }

    }
}
