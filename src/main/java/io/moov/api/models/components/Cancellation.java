/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;


public class Cancellation {

    @JsonProperty("status")
    private CancellationStatus status;

    @JsonProperty("createdOn")
    private OffsetDateTime createdOn;

    @JsonCreator
    public Cancellation(
            @JsonProperty("status") CancellationStatus status,
            @JsonProperty("createdOn") OffsetDateTime createdOn) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdOn, "createdOn");
        this.status = status;
        this.createdOn = createdOn;
    }

    @JsonIgnore
    public CancellationStatus status() {
        return status;
    }

    @JsonIgnore
    public OffsetDateTime createdOn() {
        return createdOn;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Cancellation withStatus(CancellationStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public Cancellation withCreatedOn(OffsetDateTime createdOn) {
        Utils.checkNotNull(createdOn, "createdOn");
        this.createdOn = createdOn;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Cancellation other = (Cancellation) o;
        return 
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.createdOn, other.createdOn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            status,
            createdOn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Cancellation.class,
                "status", status,
                "createdOn", createdOn);
    }
    
    public final static class Builder {
 
        private CancellationStatus status;
 
        private OffsetDateTime createdOn;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder status(CancellationStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder createdOn(OffsetDateTime createdOn) {
            Utils.checkNotNull(createdOn, "createdOn");
            this.createdOn = createdOn;
            return this;
        }
        
        public Cancellation build() {
            return new Cancellation(
                status,
                createdOn);
        }
    }
}

