/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.models.components.Amount;
import io.moov.sdk.models.components.Cancellation;
import io.moov.sdk.models.components.CardAcquiringDispute;
import io.moov.sdk.models.components.CardAcquiringRefund;
import io.moov.sdk.models.components.FacilitatorFee;
import io.moov.sdk.models.components.MoovFee;
import io.moov.sdk.models.components.MoovFeeDetails;
import io.moov.sdk.models.components.TransferDestination;
import io.moov.sdk.models.components.TransferFailureReason;
import io.moov.sdk.models.components.TransferSource;
import io.moov.sdk.models.components.TransferStatus;
import io.moov.sdk.utils.Utils;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.net.http.HttpResponse;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@SuppressWarnings("serial")
public class Transfer extends MoovError {

    @Nullable
    private final Data data;

    @Nullable
    private final Throwable deserializationException;

    public Transfer(
                int code,
                byte[] body,
                HttpResponse<?> rawResponse,
                @Nullable Data data,
                @Nullable Throwable deserializationException) {
        super("API error occurred", code, body, rawResponse, null);
        this.data = data;
        this.deserializationException = deserializationException;
    }

    /**
    * Parse a response into an instance of Transfer. If deserialization of the response body fails,
    * the resulting Transfer instance will have a null data() value and a non-null deserializationException().
    */
    public static Transfer from(HttpResponse<InputStream> response) {
        try {
            byte[] bytes = Utils.extractByteArrayFromBody(response);
            Data data = Utils.mapper().readValue(bytes, Data.class);
            return new Transfer(response.statusCode(), bytes, response, data, null);
        } catch (Exception e) {
            return new Transfer(response.statusCode(), null, response, null, e);
        }
    }

    @Deprecated
    public Optional<String> transferID() {
        return data().map(Data::transferID);
    }

    @Deprecated
    public Optional<OffsetDateTime> createdOn() {
        return data().map(Data::createdOn);
    }

    @Deprecated
    public Optional<TransferSource> source() {
        return data().map(Data::source);
    }

    @Deprecated
    public Optional<TransferDestination> destination() {
        return data().map(Data::destination);
    }

    @Deprecated
    public Optional<OffsetDateTime> completedOn() {
        return data().flatMap(Data::completedOn);
    }

    /**
     * Status of a transfer.
     */
    @Deprecated
    public Optional<TransferStatus> status() {
        return data().map(Data::status);
    }

    /**
     * Reason for a transfer's failure.
     */
    @Deprecated
    public Optional<TransferFailureReason> failureReason() {
        return data().flatMap(Data::failureReason);
    }

    @Deprecated
    public Optional<Amount> amount() {
        return data().map(Data::amount);
    }

    /**
     * An optional description of the transfer that is used on receipts and for your own internal use.
     */
    @Deprecated
    public Optional<String> description() {
        return data().flatMap(Data::description);
    }

    /**
     * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
     */
    @Deprecated
    public Optional<Map<String, String>> metadata() {
        return data().flatMap(Data::metadata);
    }

    /**
     * Total or markup fee.
     */
    @Deprecated
    public Optional<FacilitatorFee> facilitatorFee() {
        return data().flatMap(Data::facilitatorFee);
    }

    /**
     * Fees charged to your platform account for transfers.
     */
    @Deprecated
    public Optional<Long> moovFee() {
        return data().flatMap(Data::moovFee);
    }

    /**
     * Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place
     * precision.
     */
    @Deprecated
    public Optional<String> moovFeeDecimal() {
        return data().flatMap(Data::moovFeeDecimal);
    }

    /**
     * Processing and pass-through costs that add up to the moovFee.
     */
    @Deprecated
    public Optional<MoovFeeDetails> moovFeeDetails() {
        return data().flatMap(Data::moovFeeDetails);
    }

    /**
     * Fees charged to accounts involved in the transfer.
     */
    @Deprecated
    public Optional<List<MoovFee>> moovFees() {
        return data().flatMap(Data::moovFees);
    }

    @Deprecated
    public Optional<String> groupID() {
        return data().flatMap(Data::groupID);
    }

    @Deprecated
    public Optional<List<Cancellation>> cancellations() {
        return data().flatMap(Data::cancellations);
    }

    @Deprecated
    public Optional<Amount> refundedAmount() {
        return data().flatMap(Data::refundedAmount);
    }

    @Deprecated
    public Optional<List<CardAcquiringRefund>> refunds() {
        return data().flatMap(Data::refunds);
    }

    @Deprecated
    public Optional<Amount> disputedAmount() {
        return data().flatMap(Data::disputedAmount);
    }

    @Deprecated
    public Optional<List<CardAcquiringDispute>> disputes() {
        return data().flatMap(Data::disputes);
    }

    /**
     * ID of the sweep that created this transfer.
     */
    @Deprecated
    public Optional<String> sweepID() {
        return data().flatMap(Data::sweepID);
    }

    @Deprecated
    public Optional<String> scheduleID() {
        return data().flatMap(Data::scheduleID);
    }

    @Deprecated
    public Optional<String> occurrenceID() {
        return data().flatMap(Data::occurrenceID);
    }

    @Deprecated
    public Optional<String> paymentLinkCode() {
        return data().flatMap(Data::paymentLinkCode);
    }

    /**
     * Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and
     * represents the total amount charged.
     */
    @Deprecated
    public Optional<Amount> salesTaxAmount() {
        return data().flatMap(Data::salesTaxAmount);
    }

    /**
     * Optional alias from a foreign/external system which can be used to reference this resource.
     */
    @Deprecated
    public Optional<String> foreignID() {
        return data().flatMap(Data::foreignID);
    }

    public Optional<Data> data() {
        return Optional.ofNullable(data);
    }

    /**
     * Returns the exception if an error occurs while deserializing the response body.
     */
    public Optional<Throwable> deserializationException() {
        return Optional.ofNullable(deserializationException);
    }
    /**
     * Data
     * 
     * <p>Details of a Transfer.
     */
    public static class Data {

        @JsonProperty("transferID")
        private String transferID;


        @JsonProperty("createdOn")
        private OffsetDateTime createdOn;


        @JsonProperty("source")
        private TransferSource source;


        @JsonProperty("destination")
        private TransferDestination destination;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("completedOn")
        private Optional<OffsetDateTime> completedOn;

        /**
         * Status of a transfer.
         */
        @JsonProperty("status")
        private TransferStatus status;

        /**
         * Reason for a transfer's failure.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("failureReason")
        private Optional<? extends TransferFailureReason> failureReason;


        @JsonProperty("amount")
        private Amount amount;

        /**
         * An optional description of the transfer that is used on receipts and for your own internal use.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("description")
        private Optional<String> description;

        /**
         * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("metadata")
        private Optional<? extends Map<String, String>> metadata;

        /**
         * Total or markup fee.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("facilitatorFee")
        private Optional<? extends FacilitatorFee> facilitatorFee;

        /**
         * Fees charged to your platform account for transfers.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("moovFee")
        private Optional<Long> moovFee;

        /**
         * Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place
         * precision.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("moovFeeDecimal")
        private Optional<String> moovFeeDecimal;

        /**
         * Processing and pass-through costs that add up to the moovFee.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("moovFeeDetails")
        private Optional<? extends MoovFeeDetails> moovFeeDetails;

        /**
         * Fees charged to accounts involved in the transfer.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("moovFees")
        private Optional<? extends List<MoovFee>> moovFees;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("groupID")
        private Optional<String> groupID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("cancellations")
        private Optional<? extends List<Cancellation>> cancellations;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("refundedAmount")
        private Optional<? extends Amount> refundedAmount;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("refunds")
        private Optional<? extends List<CardAcquiringRefund>> refunds;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("disputedAmount")
        private Optional<? extends Amount> disputedAmount;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("disputes")
        private Optional<? extends List<CardAcquiringDispute>> disputes;

        /**
         * ID of the sweep that created this transfer.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("sweepID")
        private Optional<String> sweepID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("scheduleID")
        private Optional<String> scheduleID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("occurrenceID")
        private Optional<String> occurrenceID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("paymentLinkCode")
        private Optional<String> paymentLinkCode;

        /**
         * Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and
         * represents the total amount charged.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("salesTaxAmount")
        private Optional<? extends Amount> salesTaxAmount;

        /**
         * Optional alias from a foreign/external system which can be used to reference this resource.
         */
        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("foreignID")
        private Optional<String> foreignID;

        @JsonCreator
        public Data(
                @JsonProperty("transferID") String transferID,
                @JsonProperty("createdOn") OffsetDateTime createdOn,
                @JsonProperty("source") TransferSource source,
                @JsonProperty("destination") TransferDestination destination,
                @JsonProperty("completedOn") Optional<OffsetDateTime> completedOn,
                @JsonProperty("status") TransferStatus status,
                @JsonProperty("failureReason") Optional<? extends TransferFailureReason> failureReason,
                @JsonProperty("amount") Amount amount,
                @JsonProperty("description") Optional<String> description,
                @JsonProperty("metadata") Optional<? extends Map<String, String>> metadata,
                @JsonProperty("facilitatorFee") Optional<? extends FacilitatorFee> facilitatorFee,
                @JsonProperty("moovFee") Optional<Long> moovFee,
                @JsonProperty("moovFeeDecimal") Optional<String> moovFeeDecimal,
                @JsonProperty("moovFeeDetails") Optional<? extends MoovFeeDetails> moovFeeDetails,
                @JsonProperty("moovFees") Optional<? extends List<MoovFee>> moovFees,
                @JsonProperty("groupID") Optional<String> groupID,
                @JsonProperty("cancellations") Optional<? extends List<Cancellation>> cancellations,
                @JsonProperty("refundedAmount") Optional<? extends Amount> refundedAmount,
                @JsonProperty("refunds") Optional<? extends List<CardAcquiringRefund>> refunds,
                @JsonProperty("disputedAmount") Optional<? extends Amount> disputedAmount,
                @JsonProperty("disputes") Optional<? extends List<CardAcquiringDispute>> disputes,
                @JsonProperty("sweepID") Optional<String> sweepID,
                @JsonProperty("scheduleID") Optional<String> scheduleID,
                @JsonProperty("occurrenceID") Optional<String> occurrenceID,
                @JsonProperty("paymentLinkCode") Optional<String> paymentLinkCode,
                @JsonProperty("salesTaxAmount") Optional<? extends Amount> salesTaxAmount,
                @JsonProperty("foreignID") Optional<String> foreignID) {
            Utils.checkNotNull(transferID, "transferID");
            Utils.checkNotNull(createdOn, "createdOn");
            Utils.checkNotNull(source, "source");
            Utils.checkNotNull(destination, "destination");
            Utils.checkNotNull(completedOn, "completedOn");
            Utils.checkNotNull(status, "status");
            Utils.checkNotNull(failureReason, "failureReason");
            Utils.checkNotNull(amount, "amount");
            Utils.checkNotNull(description, "description");
            Utils.checkNotNull(metadata, "metadata");
            Utils.checkNotNull(facilitatorFee, "facilitatorFee");
            Utils.checkNotNull(moovFee, "moovFee");
            Utils.checkNotNull(moovFeeDecimal, "moovFeeDecimal");
            Utils.checkNotNull(moovFeeDetails, "moovFeeDetails");
            Utils.checkNotNull(moovFees, "moovFees");
            Utils.checkNotNull(groupID, "groupID");
            Utils.checkNotNull(cancellations, "cancellations");
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            Utils.checkNotNull(refunds, "refunds");
            Utils.checkNotNull(disputedAmount, "disputedAmount");
            Utils.checkNotNull(disputes, "disputes");
            Utils.checkNotNull(sweepID, "sweepID");
            Utils.checkNotNull(scheduleID, "scheduleID");
            Utils.checkNotNull(occurrenceID, "occurrenceID");
            Utils.checkNotNull(paymentLinkCode, "paymentLinkCode");
            Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
            Utils.checkNotNull(foreignID, "foreignID");
            this.transferID = transferID;
            this.createdOn = createdOn;
            this.source = source;
            this.destination = destination;
            this.completedOn = completedOn;
            this.status = status;
            this.failureReason = failureReason;
            this.amount = amount;
            this.description = description;
            this.metadata = metadata;
            this.facilitatorFee = facilitatorFee;
            this.moovFee = moovFee;
            this.moovFeeDecimal = moovFeeDecimal;
            this.moovFeeDetails = moovFeeDetails;
            this.moovFees = moovFees;
            this.groupID = groupID;
            this.cancellations = cancellations;
            this.refundedAmount = refundedAmount;
            this.refunds = refunds;
            this.disputedAmount = disputedAmount;
            this.disputes = disputes;
            this.sweepID = sweepID;
            this.scheduleID = scheduleID;
            this.occurrenceID = occurrenceID;
            this.paymentLinkCode = paymentLinkCode;
            this.salesTaxAmount = salesTaxAmount;
            this.foreignID = foreignID;
        }
        
        public Data(
                String transferID,
                OffsetDateTime createdOn,
                TransferSource source,
                TransferDestination destination,
                TransferStatus status,
                Amount amount) {
            this(transferID, createdOn, source,
                destination, Optional.empty(), status,
                Optional.empty(), amount, Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty());
        }

        @JsonIgnore
        public String transferID() {
            return transferID;
        }

        @JsonIgnore
        public OffsetDateTime createdOn() {
            return createdOn;
        }

        @JsonIgnore
        public TransferSource source() {
            return source;
        }

        @JsonIgnore
        public TransferDestination destination() {
            return destination;
        }

        @JsonIgnore
        public Optional<OffsetDateTime> completedOn() {
            return completedOn;
        }

        /**
         * Status of a transfer.
         */
        @JsonIgnore
        public TransferStatus status() {
            return status;
        }

        /**
         * Reason for a transfer's failure.
         */
        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<TransferFailureReason> failureReason() {
            return (Optional<TransferFailureReason>) failureReason;
        }

        @JsonIgnore
        public Amount amount() {
            return amount;
        }

        /**
         * An optional description of the transfer that is used on receipts and for your own internal use.
         */
        @JsonIgnore
        public Optional<String> description() {
            return description;
        }

        /**
         * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
         */
        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<Map<String, String>> metadata() {
            return (Optional<Map<String, String>>) metadata;
        }

        /**
         * Total or markup fee.
         */
        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<FacilitatorFee> facilitatorFee() {
            return (Optional<FacilitatorFee>) facilitatorFee;
        }

        /**
         * Fees charged to your platform account for transfers.
         */
        @JsonIgnore
        public Optional<Long> moovFee() {
            return moovFee;
        }

        /**
         * Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place
         * precision.
         */
        @JsonIgnore
        public Optional<String> moovFeeDecimal() {
            return moovFeeDecimal;
        }

        /**
         * Processing and pass-through costs that add up to the moovFee.
         */
        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<MoovFeeDetails> moovFeeDetails() {
            return (Optional<MoovFeeDetails>) moovFeeDetails;
        }

        /**
         * Fees charged to accounts involved in the transfer.
         */
        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<List<MoovFee>> moovFees() {
            return (Optional<List<MoovFee>>) moovFees;
        }

        @JsonIgnore
        public Optional<String> groupID() {
            return groupID;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<List<Cancellation>> cancellations() {
            return (Optional<List<Cancellation>>) cancellations;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<Amount> refundedAmount() {
            return (Optional<Amount>) refundedAmount;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<List<CardAcquiringRefund>> refunds() {
            return (Optional<List<CardAcquiringRefund>>) refunds;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<Amount> disputedAmount() {
            return (Optional<Amount>) disputedAmount;
        }

        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<List<CardAcquiringDispute>> disputes() {
            return (Optional<List<CardAcquiringDispute>>) disputes;
        }

        /**
         * ID of the sweep that created this transfer.
         */
        @JsonIgnore
        public Optional<String> sweepID() {
            return sweepID;
        }

        @JsonIgnore
        public Optional<String> scheduleID() {
            return scheduleID;
        }

        @JsonIgnore
        public Optional<String> occurrenceID() {
            return occurrenceID;
        }

        @JsonIgnore
        public Optional<String> paymentLinkCode() {
            return paymentLinkCode;
        }

        /**
         * Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and
         * represents the total amount charged.
         */
        @SuppressWarnings("unchecked")
        @JsonIgnore
        public Optional<Amount> salesTaxAmount() {
            return (Optional<Amount>) salesTaxAmount;
        }

        /**
         * Optional alias from a foreign/external system which can be used to reference this resource.
         */
        @JsonIgnore
        public Optional<String> foreignID() {
            return foreignID;
        }

        public static Builder builder() {
            return new Builder();
        }


        public Data withTransferID(String transferID) {
            Utils.checkNotNull(transferID, "transferID");
            this.transferID = transferID;
            return this;
        }

        public Data withCreatedOn(OffsetDateTime createdOn) {
            Utils.checkNotNull(createdOn, "createdOn");
            this.createdOn = createdOn;
            return this;
        }

        public Data withSource(TransferSource source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Data withDestination(TransferDestination destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }

        public Data withCompletedOn(OffsetDateTime completedOn) {
            Utils.checkNotNull(completedOn, "completedOn");
            this.completedOn = Optional.ofNullable(completedOn);
            return this;
        }


        public Data withCompletedOn(Optional<OffsetDateTime> completedOn) {
            Utils.checkNotNull(completedOn, "completedOn");
            this.completedOn = completedOn;
            return this;
        }

        /**
         * Status of a transfer.
         */
        public Data withStatus(TransferStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Reason for a transfer's failure.
         */
        public Data withFailureReason(TransferFailureReason failureReason) {
            Utils.checkNotNull(failureReason, "failureReason");
            this.failureReason = Optional.ofNullable(failureReason);
            return this;
        }


        /**
         * Reason for a transfer's failure.
         */
        public Data withFailureReason(Optional<? extends TransferFailureReason> failureReason) {
            Utils.checkNotNull(failureReason, "failureReason");
            this.failureReason = failureReason;
            return this;
        }

        public Data withAmount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * An optional description of the transfer that is used on receipts and for your own internal use.
         */
        public Data withDescription(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }


        /**
         * An optional description of the transfer that is used on receipts and for your own internal use.
         */
        public Data withDescription(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
         */
        public Data withMetadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }


        /**
         * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
         */
        public Data withMetadata(Optional<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Total or markup fee.
         */
        public Data withFacilitatorFee(FacilitatorFee facilitatorFee) {
            Utils.checkNotNull(facilitatorFee, "facilitatorFee");
            this.facilitatorFee = Optional.ofNullable(facilitatorFee);
            return this;
        }


        /**
         * Total or markup fee.
         */
        public Data withFacilitatorFee(Optional<? extends FacilitatorFee> facilitatorFee) {
            Utils.checkNotNull(facilitatorFee, "facilitatorFee");
            this.facilitatorFee = facilitatorFee;
            return this;
        }

        /**
         * Fees charged to your platform account for transfers.
         */
        public Data withMoovFee(long moovFee) {
            Utils.checkNotNull(moovFee, "moovFee");
            this.moovFee = Optional.ofNullable(moovFee);
            return this;
        }


        /**
         * Fees charged to your platform account for transfers.
         */
        public Data withMoovFee(Optional<Long> moovFee) {
            Utils.checkNotNull(moovFee, "moovFee");
            this.moovFee = moovFee;
            return this;
        }

        /**
         * Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place
         * precision.
         */
        public Data withMoovFeeDecimal(String moovFeeDecimal) {
            Utils.checkNotNull(moovFeeDecimal, "moovFeeDecimal");
            this.moovFeeDecimal = Optional.ofNullable(moovFeeDecimal);
            return this;
        }


        /**
         * Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place
         * precision.
         */
        public Data withMoovFeeDecimal(Optional<String> moovFeeDecimal) {
            Utils.checkNotNull(moovFeeDecimal, "moovFeeDecimal");
            this.moovFeeDecimal = moovFeeDecimal;
            return this;
        }

        /**
         * Processing and pass-through costs that add up to the moovFee.
         */
        public Data withMoovFeeDetails(MoovFeeDetails moovFeeDetails) {
            Utils.checkNotNull(moovFeeDetails, "moovFeeDetails");
            this.moovFeeDetails = Optional.ofNullable(moovFeeDetails);
            return this;
        }


        /**
         * Processing and pass-through costs that add up to the moovFee.
         */
        public Data withMoovFeeDetails(Optional<? extends MoovFeeDetails> moovFeeDetails) {
            Utils.checkNotNull(moovFeeDetails, "moovFeeDetails");
            this.moovFeeDetails = moovFeeDetails;
            return this;
        }

        /**
         * Fees charged to accounts involved in the transfer.
         */
        public Data withMoovFees(List<MoovFee> moovFees) {
            Utils.checkNotNull(moovFees, "moovFees");
            this.moovFees = Optional.ofNullable(moovFees);
            return this;
        }


        /**
         * Fees charged to accounts involved in the transfer.
         */
        public Data withMoovFees(Optional<? extends List<MoovFee>> moovFees) {
            Utils.checkNotNull(moovFees, "moovFees");
            this.moovFees = moovFees;
            return this;
        }

        public Data withGroupID(String groupID) {
            Utils.checkNotNull(groupID, "groupID");
            this.groupID = Optional.ofNullable(groupID);
            return this;
        }


        public Data withGroupID(Optional<String> groupID) {
            Utils.checkNotNull(groupID, "groupID");
            this.groupID = groupID;
            return this;
        }

        public Data withCancellations(List<Cancellation> cancellations) {
            Utils.checkNotNull(cancellations, "cancellations");
            this.cancellations = Optional.ofNullable(cancellations);
            return this;
        }


        public Data withCancellations(Optional<? extends List<Cancellation>> cancellations) {
            Utils.checkNotNull(cancellations, "cancellations");
            this.cancellations = cancellations;
            return this;
        }

        public Data withRefundedAmount(Amount refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = Optional.ofNullable(refundedAmount);
            return this;
        }


        public Data withRefundedAmount(Optional<? extends Amount> refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = refundedAmount;
            return this;
        }

        public Data withRefunds(List<CardAcquiringRefund> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }


        public Data withRefunds(Optional<? extends List<CardAcquiringRefund>> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }

        public Data withDisputedAmount(Amount disputedAmount) {
            Utils.checkNotNull(disputedAmount, "disputedAmount");
            this.disputedAmount = Optional.ofNullable(disputedAmount);
            return this;
        }


        public Data withDisputedAmount(Optional<? extends Amount> disputedAmount) {
            Utils.checkNotNull(disputedAmount, "disputedAmount");
            this.disputedAmount = disputedAmount;
            return this;
        }

        public Data withDisputes(List<CardAcquiringDispute> disputes) {
            Utils.checkNotNull(disputes, "disputes");
            this.disputes = Optional.ofNullable(disputes);
            return this;
        }


        public Data withDisputes(Optional<? extends List<CardAcquiringDispute>> disputes) {
            Utils.checkNotNull(disputes, "disputes");
            this.disputes = disputes;
            return this;
        }

        /**
         * ID of the sweep that created this transfer.
         */
        public Data withSweepID(String sweepID) {
            Utils.checkNotNull(sweepID, "sweepID");
            this.sweepID = Optional.ofNullable(sweepID);
            return this;
        }


        /**
         * ID of the sweep that created this transfer.
         */
        public Data withSweepID(Optional<String> sweepID) {
            Utils.checkNotNull(sweepID, "sweepID");
            this.sweepID = sweepID;
            return this;
        }

        public Data withScheduleID(String scheduleID) {
            Utils.checkNotNull(scheduleID, "scheduleID");
            this.scheduleID = Optional.ofNullable(scheduleID);
            return this;
        }


        public Data withScheduleID(Optional<String> scheduleID) {
            Utils.checkNotNull(scheduleID, "scheduleID");
            this.scheduleID = scheduleID;
            return this;
        }

        public Data withOccurrenceID(String occurrenceID) {
            Utils.checkNotNull(occurrenceID, "occurrenceID");
            this.occurrenceID = Optional.ofNullable(occurrenceID);
            return this;
        }


        public Data withOccurrenceID(Optional<String> occurrenceID) {
            Utils.checkNotNull(occurrenceID, "occurrenceID");
            this.occurrenceID = occurrenceID;
            return this;
        }

        public Data withPaymentLinkCode(String paymentLinkCode) {
            Utils.checkNotNull(paymentLinkCode, "paymentLinkCode");
            this.paymentLinkCode = Optional.ofNullable(paymentLinkCode);
            return this;
        }


        public Data withPaymentLinkCode(Optional<String> paymentLinkCode) {
            Utils.checkNotNull(paymentLinkCode, "paymentLinkCode");
            this.paymentLinkCode = paymentLinkCode;
            return this;
        }

        /**
         * Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and
         * represents the total amount charged.
         */
        public Data withSalesTaxAmount(Amount salesTaxAmount) {
            Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
            this.salesTaxAmount = Optional.ofNullable(salesTaxAmount);
            return this;
        }


        /**
         * Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and
         * represents the total amount charged.
         */
        public Data withSalesTaxAmount(Optional<? extends Amount> salesTaxAmount) {
            Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
            this.salesTaxAmount = salesTaxAmount;
            return this;
        }

        /**
         * Optional alias from a foreign/external system which can be used to reference this resource.
         */
        public Data withForeignID(String foreignID) {
            Utils.checkNotNull(foreignID, "foreignID");
            this.foreignID = Optional.ofNullable(foreignID);
            return this;
        }


        /**
         * Optional alias from a foreign/external system which can be used to reference this resource.
         */
        public Data withForeignID(Optional<String> foreignID) {
            Utils.checkNotNull(foreignID, "foreignID");
            this.foreignID = foreignID;
            return this;
        }

        @Override
        public boolean equals(java.lang.Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Data other = (Data) o;
            return 
                Utils.enhancedDeepEquals(this.transferID, other.transferID) &&
                Utils.enhancedDeepEquals(this.createdOn, other.createdOn) &&
                Utils.enhancedDeepEquals(this.source, other.source) &&
                Utils.enhancedDeepEquals(this.destination, other.destination) &&
                Utils.enhancedDeepEquals(this.completedOn, other.completedOn) &&
                Utils.enhancedDeepEquals(this.status, other.status) &&
                Utils.enhancedDeepEquals(this.failureReason, other.failureReason) &&
                Utils.enhancedDeepEquals(this.amount, other.amount) &&
                Utils.enhancedDeepEquals(this.description, other.description) &&
                Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
                Utils.enhancedDeepEquals(this.facilitatorFee, other.facilitatorFee) &&
                Utils.enhancedDeepEquals(this.moovFee, other.moovFee) &&
                Utils.enhancedDeepEquals(this.moovFeeDecimal, other.moovFeeDecimal) &&
                Utils.enhancedDeepEquals(this.moovFeeDetails, other.moovFeeDetails) &&
                Utils.enhancedDeepEquals(this.moovFees, other.moovFees) &&
                Utils.enhancedDeepEquals(this.groupID, other.groupID) &&
                Utils.enhancedDeepEquals(this.cancellations, other.cancellations) &&
                Utils.enhancedDeepEquals(this.refundedAmount, other.refundedAmount) &&
                Utils.enhancedDeepEquals(this.refunds, other.refunds) &&
                Utils.enhancedDeepEquals(this.disputedAmount, other.disputedAmount) &&
                Utils.enhancedDeepEquals(this.disputes, other.disputes) &&
                Utils.enhancedDeepEquals(this.sweepID, other.sweepID) &&
                Utils.enhancedDeepEquals(this.scheduleID, other.scheduleID) &&
                Utils.enhancedDeepEquals(this.occurrenceID, other.occurrenceID) &&
                Utils.enhancedDeepEquals(this.paymentLinkCode, other.paymentLinkCode) &&
                Utils.enhancedDeepEquals(this.salesTaxAmount, other.salesTaxAmount) &&
                Utils.enhancedDeepEquals(this.foreignID, other.foreignID);
        }
        
        @Override
        public int hashCode() {
            return Utils.enhancedHash(
                transferID, createdOn, source,
                destination, completedOn, status,
                failureReason, amount, description,
                metadata, facilitatorFee, moovFee,
                moovFeeDecimal, moovFeeDetails, moovFees,
                groupID, cancellations, refundedAmount,
                refunds, disputedAmount, disputes,
                sweepID, scheduleID, occurrenceID,
                paymentLinkCode, salesTaxAmount, foreignID);
        }
        
        @Override
        public String toString() {
            return Utils.toString(Data.class,
                    "transferID", transferID,
                    "createdOn", createdOn,
                    "source", source,
                    "destination", destination,
                    "completedOn", completedOn,
                    "status", status,
                    "failureReason", failureReason,
                    "amount", amount,
                    "description", description,
                    "metadata", metadata,
                    "facilitatorFee", facilitatorFee,
                    "moovFee", moovFee,
                    "moovFeeDecimal", moovFeeDecimal,
                    "moovFeeDetails", moovFeeDetails,
                    "moovFees", moovFees,
                    "groupID", groupID,
                    "cancellations", cancellations,
                    "refundedAmount", refundedAmount,
                    "refunds", refunds,
                    "disputedAmount", disputedAmount,
                    "disputes", disputes,
                    "sweepID", sweepID,
                    "scheduleID", scheduleID,
                    "occurrenceID", occurrenceID,
                    "paymentLinkCode", paymentLinkCode,
                    "salesTaxAmount", salesTaxAmount,
                    "foreignID", foreignID);
        }

        @SuppressWarnings("UnusedReturnValue")
        public final static class Builder {

            private String transferID;

            private OffsetDateTime createdOn;

            private TransferSource source;

            private TransferDestination destination;

            private Optional<OffsetDateTime> completedOn = Optional.empty();

            private TransferStatus status;

            private Optional<? extends TransferFailureReason> failureReason = Optional.empty();

            private Amount amount;

            private Optional<String> description = Optional.empty();

            private Optional<? extends Map<String, String>> metadata = Optional.empty();

            private Optional<? extends FacilitatorFee> facilitatorFee = Optional.empty();

            private Optional<Long> moovFee = Optional.empty();

            private Optional<String> moovFeeDecimal = Optional.empty();

            private Optional<? extends MoovFeeDetails> moovFeeDetails = Optional.empty();

            private Optional<? extends List<MoovFee>> moovFees = Optional.empty();

            private Optional<String> groupID = Optional.empty();

            private Optional<? extends List<Cancellation>> cancellations = Optional.empty();

            private Optional<? extends Amount> refundedAmount = Optional.empty();

            private Optional<? extends List<CardAcquiringRefund>> refunds = Optional.empty();

            private Optional<? extends Amount> disputedAmount = Optional.empty();

            private Optional<? extends List<CardAcquiringDispute>> disputes = Optional.empty();

            private Optional<String> sweepID = Optional.empty();

            private Optional<String> scheduleID = Optional.empty();

            private Optional<String> occurrenceID = Optional.empty();

            private Optional<String> paymentLinkCode = Optional.empty();

            private Optional<? extends Amount> salesTaxAmount = Optional.empty();

            private Optional<String> foreignID = Optional.empty();

            private Builder() {
              // force use of static builder() method
            }


            public Builder transferID(String transferID) {
                Utils.checkNotNull(transferID, "transferID");
                this.transferID = transferID;
                return this;
            }


            public Builder createdOn(OffsetDateTime createdOn) {
                Utils.checkNotNull(createdOn, "createdOn");
                this.createdOn = createdOn;
                return this;
            }


            public Builder source(TransferSource source) {
                Utils.checkNotNull(source, "source");
                this.source = source;
                return this;
            }


            public Builder destination(TransferDestination destination) {
                Utils.checkNotNull(destination, "destination");
                this.destination = destination;
                return this;
            }


            public Builder completedOn(OffsetDateTime completedOn) {
                Utils.checkNotNull(completedOn, "completedOn");
                this.completedOn = Optional.ofNullable(completedOn);
                return this;
            }

            public Builder completedOn(Optional<OffsetDateTime> completedOn) {
                Utils.checkNotNull(completedOn, "completedOn");
                this.completedOn = completedOn;
                return this;
            }


            /**
             * Status of a transfer.
             */
            public Builder status(TransferStatus status) {
                Utils.checkNotNull(status, "status");
                this.status = status;
                return this;
            }


            /**
             * Reason for a transfer's failure.
             */
            public Builder failureReason(TransferFailureReason failureReason) {
                Utils.checkNotNull(failureReason, "failureReason");
                this.failureReason = Optional.ofNullable(failureReason);
                return this;
            }

            /**
             * Reason for a transfer's failure.
             */
            public Builder failureReason(Optional<? extends TransferFailureReason> failureReason) {
                Utils.checkNotNull(failureReason, "failureReason");
                this.failureReason = failureReason;
                return this;
            }


            public Builder amount(Amount amount) {
                Utils.checkNotNull(amount, "amount");
                this.amount = amount;
                return this;
            }


            /**
             * An optional description of the transfer that is used on receipts and for your own internal use.
             */
            public Builder description(String description) {
                Utils.checkNotNull(description, "description");
                this.description = Optional.ofNullable(description);
                return this;
            }

            /**
             * An optional description of the transfer that is used on receipts and for your own internal use.
             */
            public Builder description(Optional<String> description) {
                Utils.checkNotNull(description, "description");
                this.description = description;
                return this;
            }


            /**
             * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
             */
            public Builder metadata(Map<String, String> metadata) {
                Utils.checkNotNull(metadata, "metadata");
                this.metadata = Optional.ofNullable(metadata);
                return this;
            }

            /**
             * Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
             */
            public Builder metadata(Optional<? extends Map<String, String>> metadata) {
                Utils.checkNotNull(metadata, "metadata");
                this.metadata = metadata;
                return this;
            }


            /**
             * Total or markup fee.
             */
            public Builder facilitatorFee(FacilitatorFee facilitatorFee) {
                Utils.checkNotNull(facilitatorFee, "facilitatorFee");
                this.facilitatorFee = Optional.ofNullable(facilitatorFee);
                return this;
            }

            /**
             * Total or markup fee.
             */
            public Builder facilitatorFee(Optional<? extends FacilitatorFee> facilitatorFee) {
                Utils.checkNotNull(facilitatorFee, "facilitatorFee");
                this.facilitatorFee = facilitatorFee;
                return this;
            }


            /**
             * Fees charged to your platform account for transfers.
             */
            public Builder moovFee(long moovFee) {
                Utils.checkNotNull(moovFee, "moovFee");
                this.moovFee = Optional.ofNullable(moovFee);
                return this;
            }

            /**
             * Fees charged to your platform account for transfers.
             */
            public Builder moovFee(Optional<Long> moovFee) {
                Utils.checkNotNull(moovFee, "moovFee");
                this.moovFee = moovFee;
                return this;
            }


            /**
             * Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place
             * precision.
             */
            public Builder moovFeeDecimal(String moovFeeDecimal) {
                Utils.checkNotNull(moovFeeDecimal, "moovFeeDecimal");
                this.moovFeeDecimal = Optional.ofNullable(moovFeeDecimal);
                return this;
            }

            /**
             * Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place
             * precision.
             */
            public Builder moovFeeDecimal(Optional<String> moovFeeDecimal) {
                Utils.checkNotNull(moovFeeDecimal, "moovFeeDecimal");
                this.moovFeeDecimal = moovFeeDecimal;
                return this;
            }


            /**
             * Processing and pass-through costs that add up to the moovFee.
             */
            public Builder moovFeeDetails(MoovFeeDetails moovFeeDetails) {
                Utils.checkNotNull(moovFeeDetails, "moovFeeDetails");
                this.moovFeeDetails = Optional.ofNullable(moovFeeDetails);
                return this;
            }

            /**
             * Processing and pass-through costs that add up to the moovFee.
             */
            public Builder moovFeeDetails(Optional<? extends MoovFeeDetails> moovFeeDetails) {
                Utils.checkNotNull(moovFeeDetails, "moovFeeDetails");
                this.moovFeeDetails = moovFeeDetails;
                return this;
            }


            /**
             * Fees charged to accounts involved in the transfer.
             */
            public Builder moovFees(List<MoovFee> moovFees) {
                Utils.checkNotNull(moovFees, "moovFees");
                this.moovFees = Optional.ofNullable(moovFees);
                return this;
            }

            /**
             * Fees charged to accounts involved in the transfer.
             */
            public Builder moovFees(Optional<? extends List<MoovFee>> moovFees) {
                Utils.checkNotNull(moovFees, "moovFees");
                this.moovFees = moovFees;
                return this;
            }


            public Builder groupID(String groupID) {
                Utils.checkNotNull(groupID, "groupID");
                this.groupID = Optional.ofNullable(groupID);
                return this;
            }

            public Builder groupID(Optional<String> groupID) {
                Utils.checkNotNull(groupID, "groupID");
                this.groupID = groupID;
                return this;
            }


            public Builder cancellations(List<Cancellation> cancellations) {
                Utils.checkNotNull(cancellations, "cancellations");
                this.cancellations = Optional.ofNullable(cancellations);
                return this;
            }

            public Builder cancellations(Optional<? extends List<Cancellation>> cancellations) {
                Utils.checkNotNull(cancellations, "cancellations");
                this.cancellations = cancellations;
                return this;
            }


            public Builder refundedAmount(Amount refundedAmount) {
                Utils.checkNotNull(refundedAmount, "refundedAmount");
                this.refundedAmount = Optional.ofNullable(refundedAmount);
                return this;
            }

            public Builder refundedAmount(Optional<? extends Amount> refundedAmount) {
                Utils.checkNotNull(refundedAmount, "refundedAmount");
                this.refundedAmount = refundedAmount;
                return this;
            }


            public Builder refunds(List<CardAcquiringRefund> refunds) {
                Utils.checkNotNull(refunds, "refunds");
                this.refunds = Optional.ofNullable(refunds);
                return this;
            }

            public Builder refunds(Optional<? extends List<CardAcquiringRefund>> refunds) {
                Utils.checkNotNull(refunds, "refunds");
                this.refunds = refunds;
                return this;
            }


            public Builder disputedAmount(Amount disputedAmount) {
                Utils.checkNotNull(disputedAmount, "disputedAmount");
                this.disputedAmount = Optional.ofNullable(disputedAmount);
                return this;
            }

            public Builder disputedAmount(Optional<? extends Amount> disputedAmount) {
                Utils.checkNotNull(disputedAmount, "disputedAmount");
                this.disputedAmount = disputedAmount;
                return this;
            }


            public Builder disputes(List<CardAcquiringDispute> disputes) {
                Utils.checkNotNull(disputes, "disputes");
                this.disputes = Optional.ofNullable(disputes);
                return this;
            }

            public Builder disputes(Optional<? extends List<CardAcquiringDispute>> disputes) {
                Utils.checkNotNull(disputes, "disputes");
                this.disputes = disputes;
                return this;
            }


            /**
             * ID of the sweep that created this transfer.
             */
            public Builder sweepID(String sweepID) {
                Utils.checkNotNull(sweepID, "sweepID");
                this.sweepID = Optional.ofNullable(sweepID);
                return this;
            }

            /**
             * ID of the sweep that created this transfer.
             */
            public Builder sweepID(Optional<String> sweepID) {
                Utils.checkNotNull(sweepID, "sweepID");
                this.sweepID = sweepID;
                return this;
            }


            public Builder scheduleID(String scheduleID) {
                Utils.checkNotNull(scheduleID, "scheduleID");
                this.scheduleID = Optional.ofNullable(scheduleID);
                return this;
            }

            public Builder scheduleID(Optional<String> scheduleID) {
                Utils.checkNotNull(scheduleID, "scheduleID");
                this.scheduleID = scheduleID;
                return this;
            }


            public Builder occurrenceID(String occurrenceID) {
                Utils.checkNotNull(occurrenceID, "occurrenceID");
                this.occurrenceID = Optional.ofNullable(occurrenceID);
                return this;
            }

            public Builder occurrenceID(Optional<String> occurrenceID) {
                Utils.checkNotNull(occurrenceID, "occurrenceID");
                this.occurrenceID = occurrenceID;
                return this;
            }


            public Builder paymentLinkCode(String paymentLinkCode) {
                Utils.checkNotNull(paymentLinkCode, "paymentLinkCode");
                this.paymentLinkCode = Optional.ofNullable(paymentLinkCode);
                return this;
            }

            public Builder paymentLinkCode(Optional<String> paymentLinkCode) {
                Utils.checkNotNull(paymentLinkCode, "paymentLinkCode");
                this.paymentLinkCode = paymentLinkCode;
                return this;
            }


            /**
             * Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and
             * represents the total amount charged.
             */
            public Builder salesTaxAmount(Amount salesTaxAmount) {
                Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
                this.salesTaxAmount = Optional.ofNullable(salesTaxAmount);
                return this;
            }

            /**
             * Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and
             * represents the total amount charged.
             */
            public Builder salesTaxAmount(Optional<? extends Amount> salesTaxAmount) {
                Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
                this.salesTaxAmount = salesTaxAmount;
                return this;
            }


            /**
             * Optional alias from a foreign/external system which can be used to reference this resource.
             */
            public Builder foreignID(String foreignID) {
                Utils.checkNotNull(foreignID, "foreignID");
                this.foreignID = Optional.ofNullable(foreignID);
                return this;
            }

            /**
             * Optional alias from a foreign/external system which can be used to reference this resource.
             */
            public Builder foreignID(Optional<String> foreignID) {
                Utils.checkNotNull(foreignID, "foreignID");
                this.foreignID = foreignID;
                return this;
            }

            public Data build() {

                return new Data(
                    transferID, createdOn, source,
                    destination, completedOn, status,
                    failureReason, amount, description,
                    metadata, facilitatorFee, moovFee,
                    moovFeeDecimal, moovFeeDetails, moovFees,
                    groupID, cancellations, refundedAmount,
                    refunds, disputedAmount, disputes,
                    sweepID, scheduleID, occurrenceID,
                    paymentLinkCode, salesTaxAmount, foreignID);
            }

        }
    }

}

