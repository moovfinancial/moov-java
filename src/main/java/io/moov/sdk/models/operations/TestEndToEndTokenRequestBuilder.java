/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk.models.operations;

import io.moov.sdk.models.components.E2EEToken;
import io.moov.sdk.models.components.Versions;
import io.moov.sdk.utils.Utils;
import java.util.Optional;

public class TestEndToEndTokenRequestBuilder {

    private TestEndToEndTokenSecurity security;
    private Optional<? extends Versions> xMoovVersion = Optional.empty();
    private E2EEToken e2EEToken;
    private final SDKMethodInterfaces.MethodCallTestEndToEndToken sdk;

    public TestEndToEndTokenRequestBuilder(SDKMethodInterfaces.MethodCallTestEndToEndToken sdk) {
        this.sdk = sdk;
    }

    public TestEndToEndTokenRequestBuilder security(TestEndToEndTokenSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }
                
    public TestEndToEndTokenRequestBuilder xMoovVersion(Versions xMoovVersion) {
        Utils.checkNotNull(xMoovVersion, "xMoovVersion");
        this.xMoovVersion = Optional.of(xMoovVersion);
        return this;
    }

    public TestEndToEndTokenRequestBuilder xMoovVersion(Optional<? extends Versions> xMoovVersion) {
        Utils.checkNotNull(xMoovVersion, "xMoovVersion");
        this.xMoovVersion = xMoovVersion;
        return this;
    }

    public TestEndToEndTokenRequestBuilder e2EEToken(E2EEToken e2EEToken) {
        Utils.checkNotNull(e2EEToken, "e2EEToken");
        this.e2EEToken = e2EEToken;
        return this;
    }

    public TestEndToEndTokenResponse call() throws Exception {

        return sdk.testEncryptedToken(
            security,
            xMoovVersion,
            e2EEToken);
    }
}
