/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;


public class ProductOptionValidationError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceModifier")
    private Optional<? extends AmountDecimalValidationError> priceModifier;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private Optional<? extends Map<String, AssignProductImageValidationError>> images;

    @JsonCreator
    public ProductOptionValidationError(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("priceModifier") Optional<? extends AmountDecimalValidationError> priceModifier,
            @JsonProperty("images") Optional<? extends Map<String, AssignProductImageValidationError>> images) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(priceModifier, "priceModifier");
        Utils.checkNotNull(images, "images");
        this.name = name;
        this.description = description;
        this.priceModifier = priceModifier;
        this.images = images;
    }
    
    public ProductOptionValidationError() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimalValidationError> priceModifier() {
        return (Optional<AmountDecimalValidationError>) priceModifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, AssignProductImageValidationError>> images() {
        return (Optional<Map<String, AssignProductImageValidationError>>) images;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ProductOptionValidationError withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public ProductOptionValidationError withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ProductOptionValidationError withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public ProductOptionValidationError withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ProductOptionValidationError withPriceModifier(AmountDecimalValidationError priceModifier) {
        Utils.checkNotNull(priceModifier, "priceModifier");
        this.priceModifier = Optional.ofNullable(priceModifier);
        return this;
    }


    public ProductOptionValidationError withPriceModifier(Optional<? extends AmountDecimalValidationError> priceModifier) {
        Utils.checkNotNull(priceModifier, "priceModifier");
        this.priceModifier = priceModifier;
        return this;
    }

    public ProductOptionValidationError withImages(Map<String, AssignProductImageValidationError> images) {
        Utils.checkNotNull(images, "images");
        this.images = Optional.ofNullable(images);
        return this;
    }


    public ProductOptionValidationError withImages(Optional<? extends Map<String, AssignProductImageValidationError>> images) {
        Utils.checkNotNull(images, "images");
        this.images = images;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductOptionValidationError other = (ProductOptionValidationError) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.priceModifier, other.priceModifier) &&
            Utils.enhancedDeepEquals(this.images, other.images);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, priceModifier,
            images);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductOptionValidationError.class,
                "name", name,
                "description", description,
                "priceModifier", priceModifier,
                "images", images);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<? extends AmountDecimalValidationError> priceModifier = Optional.empty();

        private Optional<? extends Map<String, AssignProductImageValidationError>> images = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder priceModifier(AmountDecimalValidationError priceModifier) {
            Utils.checkNotNull(priceModifier, "priceModifier");
            this.priceModifier = Optional.ofNullable(priceModifier);
            return this;
        }

        public Builder priceModifier(Optional<? extends AmountDecimalValidationError> priceModifier) {
            Utils.checkNotNull(priceModifier, "priceModifier");
            this.priceModifier = priceModifier;
            return this;
        }


        public Builder images(Map<String, AssignProductImageValidationError> images) {
            Utils.checkNotNull(images, "images");
            this.images = Optional.ofNullable(images);
            return this;
        }

        public Builder images(Optional<? extends Map<String, AssignProductImageValidationError>> images) {
            Utils.checkNotNull(images, "images");
            this.images = images;
            return this;
        }

        public ProductOptionValidationError build() {

            return new ProductOptionValidationError(
                name, description, priceModifier,
                images);
        }

    }
}
