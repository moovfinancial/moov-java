/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class UpdateRepresentativeBirthDate {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("day")
    private Optional<Long> day;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("month")
    private Optional<Long> month;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private Optional<Long> year;

    @JsonCreator
    public UpdateRepresentativeBirthDate(
            @JsonProperty("day") Optional<Long> day,
            @JsonProperty("month") Optional<Long> month,
            @JsonProperty("year") Optional<Long> year) {
        Utils.checkNotNull(day, "day");
        Utils.checkNotNull(month, "month");
        Utils.checkNotNull(year, "year");
        this.day = day;
        this.month = month;
        this.year = year;
    }
    
    public UpdateRepresentativeBirthDate() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> day() {
        return day;
    }

    @JsonIgnore
    public Optional<Long> month() {
        return month;
    }

    @JsonIgnore
    public Optional<Long> year() {
        return year;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateRepresentativeBirthDate withDay(long day) {
        Utils.checkNotNull(day, "day");
        this.day = Optional.ofNullable(day);
        return this;
    }

    public UpdateRepresentativeBirthDate withDay(Optional<Long> day) {
        Utils.checkNotNull(day, "day");
        this.day = day;
        return this;
    }

    public UpdateRepresentativeBirthDate withMonth(long month) {
        Utils.checkNotNull(month, "month");
        this.month = Optional.ofNullable(month);
        return this;
    }

    public UpdateRepresentativeBirthDate withMonth(Optional<Long> month) {
        Utils.checkNotNull(month, "month");
        this.month = month;
        return this;
    }

    public UpdateRepresentativeBirthDate withYear(long year) {
        Utils.checkNotNull(year, "year");
        this.year = Optional.ofNullable(year);
        return this;
    }

    public UpdateRepresentativeBirthDate withYear(Optional<Long> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateRepresentativeBirthDate other = (UpdateRepresentativeBirthDate) o;
        return 
            Objects.deepEquals(this.day, other.day) &&
            Objects.deepEquals(this.month, other.month) &&
            Objects.deepEquals(this.year, other.year);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            day,
            month,
            year);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateRepresentativeBirthDate.class,
                "day", day,
                "month", month,
                "year", year);
    }
    
    public final static class Builder {
 
        private Optional<Long> day = Optional.empty();
 
        private Optional<Long> month = Optional.empty();
 
        private Optional<Long> year = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder day(long day) {
            Utils.checkNotNull(day, "day");
            this.day = Optional.ofNullable(day);
            return this;
        }

        public Builder day(Optional<Long> day) {
            Utils.checkNotNull(day, "day");
            this.day = day;
            return this;
        }

        public Builder month(long month) {
            Utils.checkNotNull(month, "month");
            this.month = Optional.ofNullable(month);
            return this;
        }

        public Builder month(Optional<Long> month) {
            Utils.checkNotNull(month, "month");
            this.month = month;
            return this;
        }

        public Builder year(long year) {
            Utils.checkNotNull(year, "year");
            this.year = Optional.ofNullable(year);
            return this;
        }

        public Builder year(Optional<Long> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }
        
        public UpdateRepresentativeBirthDate build() {
            return new UpdateRepresentativeBirthDate(
                day,
                month,
                year);
        }
    }
}

