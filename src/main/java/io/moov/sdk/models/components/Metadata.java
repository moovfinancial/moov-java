/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * Metadata
 * 
 * <p>JSON-encoded metadata to update for the image.
 * 
 * <p>Omit this field if not updating metadata, or send `null` to clear existing metadata.
 */
public class Metadata {
    /**
     * Alternative text for the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("altText")
    private Optional<String> altText;

    @JsonCreator
    public Metadata(
            @JsonProperty("altText") Optional<String> altText) {
        Utils.checkNotNull(altText, "altText");
        this.altText = altText;
    }
    
    public Metadata() {
        this(Optional.empty());
    }

    /**
     * Alternative text for the image.
     */
    @JsonIgnore
    public Optional<String> altText() {
        return altText;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Alternative text for the image.
     */
    public Metadata withAltText(String altText) {
        Utils.checkNotNull(altText, "altText");
        this.altText = Optional.ofNullable(altText);
        return this;
    }


    /**
     * Alternative text for the image.
     */
    public Metadata withAltText(Optional<String> altText) {
        Utils.checkNotNull(altText, "altText");
        this.altText = altText;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Metadata other = (Metadata) o;
        return 
            Utils.enhancedDeepEquals(this.altText, other.altText);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            altText);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Metadata.class,
                "altText", altText);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> altText = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Alternative text for the image.
         */
        public Builder altText(String altText) {
            Utils.checkNotNull(altText, "altText");
            this.altText = Optional.ofNullable(altText);
            return this;
        }

        /**
         * Alternative text for the image.
         */
        public Builder altText(Optional<String> altText) {
            Utils.checkNotNull(altText, "altText");
            this.altText = altText;
            return this;
        }

        public Metadata build() {

            return new Metadata(
                altText);
        }

    }
}
