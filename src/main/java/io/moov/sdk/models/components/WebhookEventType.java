/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * WebhookEventType
 * 
 * <p>The type of event that occurred.
 */
public enum WebhookEventType {
    WILDCARD("*"),
    ACCOUNT_CREATED("account.created"),
    ACCOUNT_UPDATED("account.updated"),
    ACCOUNT_DISCONNECTED("account.disconnected"),
    BALANCE_UPDATED("balance.updated"),
    BANK_ACCOUNT_CREATED("bankAccount.created"),
    BANK_ACCOUNT_UPDATED("bankAccount.updated"),
    BANK_ACCOUNT_DELETED("bankAccount.deleted"),
    CANCELLATION_CREATED("cancellation.created"),
    CANCELLATION_UPDATED("cancellation.updated"),
    CARD_AUTO_UPDATED("card.autoUpdated"),
    CAPABILITY_REQUESTED("capability.requested"),
    CAPABILITY_UPDATED("capability.updated"),
    DISPUTE_CREATED("dispute.created"),
    DISPUTE_UPDATED("dispute.updated"),
    NETWORK_ID_UPDATED("networkID.updated"),
    PAYMENT_METHOD_ENABLED("paymentMethod.enabled"),
    PAYMENT_METHOD_DISABLED("paymentMethod.disabled"),
    REFUND_CREATED("refund.created"),
    REFUND_UPDATED("refund.updated"),
    REPRESENTATIVE_CREATED("representative.created"),
    REPRESENTATIVE_UPDATED("representative.updated"),
    REPRESENTATIVE_DELETED("representative.deleted"),
    SWEEP_CREATED("sweep.created"),
    SWEEP_UPDATED("sweep.updated"),
    TERMINAL_APPLICATION_CREATED("terminalApplication.created"),
    TERMINAL_APPLICATION_UPDATED("terminalApplication.updated"),
    TICKET_CREATED("ticket.created"),
    TICKET_UPDATED("ticket.updated"),
    TICKET_MESSAGE_ADDED("ticket.messageAdded"),
    TRANSFER_CREATED("transfer.created"),
    TRANSFER_UPDATED("transfer.updated"),
    WALLET_CREATED("wallet.created"),
    WALLET_UPDATED("wallet.updated"),
    WALLET_TRANSACTION_UPDATED("walletTransaction.updated");

    @JsonValue
    private final String value;

    WebhookEventType(String value) {
        this.value = value;
    }
    
    public String value() {
        return value;
    }
    
    public static Optional<WebhookEventType> fromValue(String value) {
        for (WebhookEventType o: WebhookEventType.values()) {
            if (Objects.deepEquals(o.value, value)) {
                return Optional.of(o);
            }
        }
        return Optional.empty();
    }
}

