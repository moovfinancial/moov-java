/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


@SuppressWarnings("serial")
public class UpdateTicketError extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    @JsonCreator
    public UpdateTicketError(
            @JsonProperty("status") Optional<String> status) {
        super("API error occurred");
        Utils.checkNotNull(status, "status");
        this.status = status;
    }
    
    public UpdateTicketError() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    public static Builder builder() {
        return new Builder();
    }


    public UpdateTicketError withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public UpdateTicketError withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateTicketError other = (UpdateTicketError) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateTicketError.class,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> status = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public UpdateTicketError build() {

            return new UpdateTicketError(
                status);
        }

    }
}

