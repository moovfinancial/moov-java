/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class UpdateApplePayMerchantDomains {
    /**
     * A unique list of fully-qualified, top-level or sub-domain names to add.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addDomains")
    private Optional<? extends List<String>> addDomains;

    /**
     * A unique list of fully-qualified, top-level or sub-domain names to remove.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removeDomains")
    private Optional<? extends List<String>> removeDomains;

    @JsonCreator
    public UpdateApplePayMerchantDomains(
            @JsonProperty("addDomains") Optional<? extends List<String>> addDomains,
            @JsonProperty("removeDomains") Optional<? extends List<String>> removeDomains) {
        Utils.checkNotNull(addDomains, "addDomains");
        Utils.checkNotNull(removeDomains, "removeDomains");
        this.addDomains = addDomains;
        this.removeDomains = removeDomains;
    }
    
    public UpdateApplePayMerchantDomains() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A unique list of fully-qualified, top-level or sub-domain names to add.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> addDomains() {
        return (Optional<List<String>>) addDomains;
    }

    /**
     * A unique list of fully-qualified, top-level or sub-domain names to remove.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> removeDomains() {
        return (Optional<List<String>>) removeDomains;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique list of fully-qualified, top-level or sub-domain names to add.
     */
    public UpdateApplePayMerchantDomains withAddDomains(List<String> addDomains) {
        Utils.checkNotNull(addDomains, "addDomains");
        this.addDomains = Optional.ofNullable(addDomains);
        return this;
    }


    /**
     * A unique list of fully-qualified, top-level or sub-domain names to add.
     */
    public UpdateApplePayMerchantDomains withAddDomains(Optional<? extends List<String>> addDomains) {
        Utils.checkNotNull(addDomains, "addDomains");
        this.addDomains = addDomains;
        return this;
    }

    /**
     * A unique list of fully-qualified, top-level or sub-domain names to remove.
     */
    public UpdateApplePayMerchantDomains withRemoveDomains(List<String> removeDomains) {
        Utils.checkNotNull(removeDomains, "removeDomains");
        this.removeDomains = Optional.ofNullable(removeDomains);
        return this;
    }


    /**
     * A unique list of fully-qualified, top-level or sub-domain names to remove.
     */
    public UpdateApplePayMerchantDomains withRemoveDomains(Optional<? extends List<String>> removeDomains) {
        Utils.checkNotNull(removeDomains, "removeDomains");
        this.removeDomains = removeDomains;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateApplePayMerchantDomains other = (UpdateApplePayMerchantDomains) o;
        return 
            Utils.enhancedDeepEquals(this.addDomains, other.addDomains) &&
            Utils.enhancedDeepEquals(this.removeDomains, other.removeDomains);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            addDomains, removeDomains);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateApplePayMerchantDomains.class,
                "addDomains", addDomains,
                "removeDomains", removeDomains);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<String>> addDomains = Optional.empty();

        private Optional<? extends List<String>> removeDomains = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique list of fully-qualified, top-level or sub-domain names to add.
         */
        public Builder addDomains(List<String> addDomains) {
            Utils.checkNotNull(addDomains, "addDomains");
            this.addDomains = Optional.ofNullable(addDomains);
            return this;
        }

        /**
         * A unique list of fully-qualified, top-level or sub-domain names to add.
         */
        public Builder addDomains(Optional<? extends List<String>> addDomains) {
            Utils.checkNotNull(addDomains, "addDomains");
            this.addDomains = addDomains;
            return this;
        }


        /**
         * A unique list of fully-qualified, top-level or sub-domain names to remove.
         */
        public Builder removeDomains(List<String> removeDomains) {
            Utils.checkNotNull(removeDomains, "removeDomains");
            this.removeDomains = Optional.ofNullable(removeDomains);
            return this;
        }

        /**
         * A unique list of fully-qualified, top-level or sub-domain names to remove.
         */
        public Builder removeDomains(Optional<? extends List<String>> removeDomains) {
            Utils.checkNotNull(removeDomains, "removeDomains");
            this.removeDomains = removeDomains;
            return this;
        }

        public UpdateApplePayMerchantDomains build() {

            return new UpdateApplePayMerchantDomains(
                addDomains, removeDomains);
        }

    }
}
