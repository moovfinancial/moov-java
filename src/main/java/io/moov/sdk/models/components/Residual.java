/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;


public class Residual {

    @JsonProperty("residualID")
    private String residualID;


    @JsonProperty("partnerAccountID")
    private String partnerAccountID;


    @JsonProperty("periodStart")
    private OffsetDateTime periodStart;


    @JsonProperty("periodEnd")
    private OffsetDateTime periodEnd;


    @JsonProperty("merchantFees")
    private AmountDecimal merchantFees;


    @JsonProperty("partnerCost")
    private AmountDecimal partnerCost;


    @JsonProperty("netIncome")
    private AmountDecimal netIncome;

    /**
     * The decimal-formatted numerical string of the revenue split for partner.
     * 
     * <p>For example, 2.25% is '2.25'.
     */
    @JsonProperty("revenueShare")
    private String revenueShare;


    @JsonProperty("residualAmount")
    private AmountDecimal residualAmount;


    @JsonProperty("moovShare")
    private AmountDecimal moovShare;


    @JsonProperty("createdOn")
    private OffsetDateTime createdOn;


    @JsonProperty("updatedOn")
    private OffsetDateTime updatedOn;

    @JsonCreator
    public Residual(
            @JsonProperty("residualID") String residualID,
            @JsonProperty("partnerAccountID") String partnerAccountID,
            @JsonProperty("periodStart") OffsetDateTime periodStart,
            @JsonProperty("periodEnd") OffsetDateTime periodEnd,
            @JsonProperty("merchantFees") AmountDecimal merchantFees,
            @JsonProperty("partnerCost") AmountDecimal partnerCost,
            @JsonProperty("netIncome") AmountDecimal netIncome,
            @JsonProperty("revenueShare") String revenueShare,
            @JsonProperty("residualAmount") AmountDecimal residualAmount,
            @JsonProperty("moovShare") AmountDecimal moovShare,
            @JsonProperty("createdOn") OffsetDateTime createdOn,
            @JsonProperty("updatedOn") OffsetDateTime updatedOn) {
        Utils.checkNotNull(residualID, "residualID");
        Utils.checkNotNull(partnerAccountID, "partnerAccountID");
        Utils.checkNotNull(periodStart, "periodStart");
        Utils.checkNotNull(periodEnd, "periodEnd");
        Utils.checkNotNull(merchantFees, "merchantFees");
        Utils.checkNotNull(partnerCost, "partnerCost");
        Utils.checkNotNull(netIncome, "netIncome");
        Utils.checkNotNull(revenueShare, "revenueShare");
        Utils.checkNotNull(residualAmount, "residualAmount");
        Utils.checkNotNull(moovShare, "moovShare");
        Utils.checkNotNull(createdOn, "createdOn");
        Utils.checkNotNull(updatedOn, "updatedOn");
        this.residualID = residualID;
        this.partnerAccountID = partnerAccountID;
        this.periodStart = periodStart;
        this.periodEnd = periodEnd;
        this.merchantFees = merchantFees;
        this.partnerCost = partnerCost;
        this.netIncome = netIncome;
        this.revenueShare = revenueShare;
        this.residualAmount = residualAmount;
        this.moovShare = moovShare;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    @JsonIgnore
    public String residualID() {
        return residualID;
    }

    @JsonIgnore
    public String partnerAccountID() {
        return partnerAccountID;
    }

    @JsonIgnore
    public OffsetDateTime periodStart() {
        return periodStart;
    }

    @JsonIgnore
    public OffsetDateTime periodEnd() {
        return periodEnd;
    }

    @JsonIgnore
    public AmountDecimal merchantFees() {
        return merchantFees;
    }

    @JsonIgnore
    public AmountDecimal partnerCost() {
        return partnerCost;
    }

    @JsonIgnore
    public AmountDecimal netIncome() {
        return netIncome;
    }

    /**
     * The decimal-formatted numerical string of the revenue split for partner.
     * 
     * <p>For example, 2.25% is '2.25'.
     */
    @JsonIgnore
    public String revenueShare() {
        return revenueShare;
    }

    @JsonIgnore
    public AmountDecimal residualAmount() {
        return residualAmount;
    }

    @JsonIgnore
    public AmountDecimal moovShare() {
        return moovShare;
    }

    @JsonIgnore
    public OffsetDateTime createdOn() {
        return createdOn;
    }

    @JsonIgnore
    public OffsetDateTime updatedOn() {
        return updatedOn;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Residual withResidualID(String residualID) {
        Utils.checkNotNull(residualID, "residualID");
        this.residualID = residualID;
        return this;
    }

    public Residual withPartnerAccountID(String partnerAccountID) {
        Utils.checkNotNull(partnerAccountID, "partnerAccountID");
        this.partnerAccountID = partnerAccountID;
        return this;
    }

    public Residual withPeriodStart(OffsetDateTime periodStart) {
        Utils.checkNotNull(periodStart, "periodStart");
        this.periodStart = periodStart;
        return this;
    }

    public Residual withPeriodEnd(OffsetDateTime periodEnd) {
        Utils.checkNotNull(periodEnd, "periodEnd");
        this.periodEnd = periodEnd;
        return this;
    }

    public Residual withMerchantFees(AmountDecimal merchantFees) {
        Utils.checkNotNull(merchantFees, "merchantFees");
        this.merchantFees = merchantFees;
        return this;
    }

    public Residual withPartnerCost(AmountDecimal partnerCost) {
        Utils.checkNotNull(partnerCost, "partnerCost");
        this.partnerCost = partnerCost;
        return this;
    }

    public Residual withNetIncome(AmountDecimal netIncome) {
        Utils.checkNotNull(netIncome, "netIncome");
        this.netIncome = netIncome;
        return this;
    }

    /**
     * The decimal-formatted numerical string of the revenue split for partner.
     * 
     * <p>For example, 2.25% is '2.25'.
     */
    public Residual withRevenueShare(String revenueShare) {
        Utils.checkNotNull(revenueShare, "revenueShare");
        this.revenueShare = revenueShare;
        return this;
    }

    public Residual withResidualAmount(AmountDecimal residualAmount) {
        Utils.checkNotNull(residualAmount, "residualAmount");
        this.residualAmount = residualAmount;
        return this;
    }

    public Residual withMoovShare(AmountDecimal moovShare) {
        Utils.checkNotNull(moovShare, "moovShare");
        this.moovShare = moovShare;
        return this;
    }

    public Residual withCreatedOn(OffsetDateTime createdOn) {
        Utils.checkNotNull(createdOn, "createdOn");
        this.createdOn = createdOn;
        return this;
    }

    public Residual withUpdatedOn(OffsetDateTime updatedOn) {
        Utils.checkNotNull(updatedOn, "updatedOn");
        this.updatedOn = updatedOn;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Residual other = (Residual) o;
        return 
            Utils.enhancedDeepEquals(this.residualID, other.residualID) &&
            Utils.enhancedDeepEquals(this.partnerAccountID, other.partnerAccountID) &&
            Utils.enhancedDeepEquals(this.periodStart, other.periodStart) &&
            Utils.enhancedDeepEquals(this.periodEnd, other.periodEnd) &&
            Utils.enhancedDeepEquals(this.merchantFees, other.merchantFees) &&
            Utils.enhancedDeepEquals(this.partnerCost, other.partnerCost) &&
            Utils.enhancedDeepEquals(this.netIncome, other.netIncome) &&
            Utils.enhancedDeepEquals(this.revenueShare, other.revenueShare) &&
            Utils.enhancedDeepEquals(this.residualAmount, other.residualAmount) &&
            Utils.enhancedDeepEquals(this.moovShare, other.moovShare) &&
            Utils.enhancedDeepEquals(this.createdOn, other.createdOn) &&
            Utils.enhancedDeepEquals(this.updatedOn, other.updatedOn);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            residualID, partnerAccountID, periodStart,
            periodEnd, merchantFees, partnerCost,
            netIncome, revenueShare, residualAmount,
            moovShare, createdOn, updatedOn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Residual.class,
                "residualID", residualID,
                "partnerAccountID", partnerAccountID,
                "periodStart", periodStart,
                "periodEnd", periodEnd,
                "merchantFees", merchantFees,
                "partnerCost", partnerCost,
                "netIncome", netIncome,
                "revenueShare", revenueShare,
                "residualAmount", residualAmount,
                "moovShare", moovShare,
                "createdOn", createdOn,
                "updatedOn", updatedOn);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String residualID;

        private String partnerAccountID;

        private OffsetDateTime periodStart;

        private OffsetDateTime periodEnd;

        private AmountDecimal merchantFees;

        private AmountDecimal partnerCost;

        private AmountDecimal netIncome;

        private String revenueShare;

        private AmountDecimal residualAmount;

        private AmountDecimal moovShare;

        private OffsetDateTime createdOn;

        private OffsetDateTime updatedOn;

        private Builder() {
          // force use of static builder() method
        }


        public Builder residualID(String residualID) {
            Utils.checkNotNull(residualID, "residualID");
            this.residualID = residualID;
            return this;
        }


        public Builder partnerAccountID(String partnerAccountID) {
            Utils.checkNotNull(partnerAccountID, "partnerAccountID");
            this.partnerAccountID = partnerAccountID;
            return this;
        }


        public Builder periodStart(OffsetDateTime periodStart) {
            Utils.checkNotNull(periodStart, "periodStart");
            this.periodStart = periodStart;
            return this;
        }


        public Builder periodEnd(OffsetDateTime periodEnd) {
            Utils.checkNotNull(periodEnd, "periodEnd");
            this.periodEnd = periodEnd;
            return this;
        }


        public Builder merchantFees(AmountDecimal merchantFees) {
            Utils.checkNotNull(merchantFees, "merchantFees");
            this.merchantFees = merchantFees;
            return this;
        }


        public Builder partnerCost(AmountDecimal partnerCost) {
            Utils.checkNotNull(partnerCost, "partnerCost");
            this.partnerCost = partnerCost;
            return this;
        }


        public Builder netIncome(AmountDecimal netIncome) {
            Utils.checkNotNull(netIncome, "netIncome");
            this.netIncome = netIncome;
            return this;
        }


        /**
         * The decimal-formatted numerical string of the revenue split for partner.
         * 
         * <p>For example, 2.25% is '2.25'.
         */
        public Builder revenueShare(String revenueShare) {
            Utils.checkNotNull(revenueShare, "revenueShare");
            this.revenueShare = revenueShare;
            return this;
        }


        public Builder residualAmount(AmountDecimal residualAmount) {
            Utils.checkNotNull(residualAmount, "residualAmount");
            this.residualAmount = residualAmount;
            return this;
        }


        public Builder moovShare(AmountDecimal moovShare) {
            Utils.checkNotNull(moovShare, "moovShare");
            this.moovShare = moovShare;
            return this;
        }


        public Builder createdOn(OffsetDateTime createdOn) {
            Utils.checkNotNull(createdOn, "createdOn");
            this.createdOn = createdOn;
            return this;
        }


        public Builder updatedOn(OffsetDateTime updatedOn) {
            Utils.checkNotNull(updatedOn, "updatedOn");
            this.updatedOn = updatedOn;
            return this;
        }

        public Residual build() {

            return new Residual(
                residualID, partnerAccountID, periodStart,
                periodEnd, merchantFees, partnerCost,
                netIncome, revenueShare, residualAmount,
                moovShare, createdOn, updatedOn);
        }

    }
}
