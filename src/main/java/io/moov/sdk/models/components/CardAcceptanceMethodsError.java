/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class CardAcceptanceMethodsError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inPersonPercentage")
    private Optional<String> inPersonPercentage;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mailOrPhonePercentage")
    private Optional<String> mailOrPhonePercentage;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onlinePercentage")
    private Optional<String> onlinePercentage;

    @JsonCreator
    public CardAcceptanceMethodsError(
            @JsonProperty("inPersonPercentage") Optional<String> inPersonPercentage,
            @JsonProperty("mailOrPhonePercentage") Optional<String> mailOrPhonePercentage,
            @JsonProperty("onlinePercentage") Optional<String> onlinePercentage) {
        Utils.checkNotNull(inPersonPercentage, "inPersonPercentage");
        Utils.checkNotNull(mailOrPhonePercentage, "mailOrPhonePercentage");
        Utils.checkNotNull(onlinePercentage, "onlinePercentage");
        this.inPersonPercentage = inPersonPercentage;
        this.mailOrPhonePercentage = mailOrPhonePercentage;
        this.onlinePercentage = onlinePercentage;
    }
    
    public CardAcceptanceMethodsError() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> inPersonPercentage() {
        return inPersonPercentage;
    }

    @JsonIgnore
    public Optional<String> mailOrPhonePercentage() {
        return mailOrPhonePercentage;
    }

    @JsonIgnore
    public Optional<String> onlinePercentage() {
        return onlinePercentage;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CardAcceptanceMethodsError withInPersonPercentage(String inPersonPercentage) {
        Utils.checkNotNull(inPersonPercentage, "inPersonPercentage");
        this.inPersonPercentage = Optional.ofNullable(inPersonPercentage);
        return this;
    }


    public CardAcceptanceMethodsError withInPersonPercentage(Optional<String> inPersonPercentage) {
        Utils.checkNotNull(inPersonPercentage, "inPersonPercentage");
        this.inPersonPercentage = inPersonPercentage;
        return this;
    }

    public CardAcceptanceMethodsError withMailOrPhonePercentage(String mailOrPhonePercentage) {
        Utils.checkNotNull(mailOrPhonePercentage, "mailOrPhonePercentage");
        this.mailOrPhonePercentage = Optional.ofNullable(mailOrPhonePercentage);
        return this;
    }


    public CardAcceptanceMethodsError withMailOrPhonePercentage(Optional<String> mailOrPhonePercentage) {
        Utils.checkNotNull(mailOrPhonePercentage, "mailOrPhonePercentage");
        this.mailOrPhonePercentage = mailOrPhonePercentage;
        return this;
    }

    public CardAcceptanceMethodsError withOnlinePercentage(String onlinePercentage) {
        Utils.checkNotNull(onlinePercentage, "onlinePercentage");
        this.onlinePercentage = Optional.ofNullable(onlinePercentage);
        return this;
    }


    public CardAcceptanceMethodsError withOnlinePercentage(Optional<String> onlinePercentage) {
        Utils.checkNotNull(onlinePercentage, "onlinePercentage");
        this.onlinePercentage = onlinePercentage;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CardAcceptanceMethodsError other = (CardAcceptanceMethodsError) o;
        return 
            Utils.enhancedDeepEquals(this.inPersonPercentage, other.inPersonPercentage) &&
            Utils.enhancedDeepEquals(this.mailOrPhonePercentage, other.mailOrPhonePercentage) &&
            Utils.enhancedDeepEquals(this.onlinePercentage, other.onlinePercentage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            inPersonPercentage, mailOrPhonePercentage, onlinePercentage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CardAcceptanceMethodsError.class,
                "inPersonPercentage", inPersonPercentage,
                "mailOrPhonePercentage", mailOrPhonePercentage,
                "onlinePercentage", onlinePercentage);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> inPersonPercentage = Optional.empty();

        private Optional<String> mailOrPhonePercentage = Optional.empty();

        private Optional<String> onlinePercentage = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder inPersonPercentage(String inPersonPercentage) {
            Utils.checkNotNull(inPersonPercentage, "inPersonPercentage");
            this.inPersonPercentage = Optional.ofNullable(inPersonPercentage);
            return this;
        }

        public Builder inPersonPercentage(Optional<String> inPersonPercentage) {
            Utils.checkNotNull(inPersonPercentage, "inPersonPercentage");
            this.inPersonPercentage = inPersonPercentage;
            return this;
        }


        public Builder mailOrPhonePercentage(String mailOrPhonePercentage) {
            Utils.checkNotNull(mailOrPhonePercentage, "mailOrPhonePercentage");
            this.mailOrPhonePercentage = Optional.ofNullable(mailOrPhonePercentage);
            return this;
        }

        public Builder mailOrPhonePercentage(Optional<String> mailOrPhonePercentage) {
            Utils.checkNotNull(mailOrPhonePercentage, "mailOrPhonePercentage");
            this.mailOrPhonePercentage = mailOrPhonePercentage;
            return this;
        }


        public Builder onlinePercentage(String onlinePercentage) {
            Utils.checkNotNull(onlinePercentage, "onlinePercentage");
            this.onlinePercentage = Optional.ofNullable(onlinePercentage);
            return this;
        }

        public Builder onlinePercentage(Optional<String> onlinePercentage) {
            Utils.checkNotNull(onlinePercentage, "onlinePercentage");
            this.onlinePercentage = onlinePercentage;
            return this;
        }

        public CardAcceptanceMethodsError build() {

            return new CardAcceptanceMethodsError(
                inPersonPercentage, mailOrPhonePercentage, onlinePercentage);
        }

    }
}
