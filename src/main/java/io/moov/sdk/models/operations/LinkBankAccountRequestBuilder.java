/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk.models.operations;

import io.moov.sdk.models.components.BankAccountWaitFor;
import io.moov.sdk.models.components.LinkBankAccount;
import io.moov.sdk.models.components.Versions;
import io.moov.sdk.utils.Utils;
import java.lang.String;
import java.util.Optional;

public class LinkBankAccountRequestBuilder {

    private LinkBankAccountSecurity security;
    private Optional<? extends Versions> xMoovVersion = Optional.empty();
    private Optional<? extends BankAccountWaitFor> xWaitFor = Optional.empty();
    private String accountID;
    private LinkBankAccount linkBankAccount;
    private final SDKMethodInterfaces.MethodCallLinkBankAccount sdk;

    public LinkBankAccountRequestBuilder(SDKMethodInterfaces.MethodCallLinkBankAccount sdk) {
        this.sdk = sdk;
    }

    public LinkBankAccountRequestBuilder security(LinkBankAccountSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }
                
    public LinkBankAccountRequestBuilder xMoovVersion(Versions xMoovVersion) {
        Utils.checkNotNull(xMoovVersion, "xMoovVersion");
        this.xMoovVersion = Optional.of(xMoovVersion);
        return this;
    }

    public LinkBankAccountRequestBuilder xMoovVersion(Optional<? extends Versions> xMoovVersion) {
        Utils.checkNotNull(xMoovVersion, "xMoovVersion");
        this.xMoovVersion = xMoovVersion;
        return this;
    }
                
    public LinkBankAccountRequestBuilder xWaitFor(BankAccountWaitFor xWaitFor) {
        Utils.checkNotNull(xWaitFor, "xWaitFor");
        this.xWaitFor = Optional.of(xWaitFor);
        return this;
    }

    public LinkBankAccountRequestBuilder xWaitFor(Optional<? extends BankAccountWaitFor> xWaitFor) {
        Utils.checkNotNull(xWaitFor, "xWaitFor");
        this.xWaitFor = xWaitFor;
        return this;
    }

    public LinkBankAccountRequestBuilder accountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    public LinkBankAccountRequestBuilder linkBankAccount(LinkBankAccount linkBankAccount) {
        Utils.checkNotNull(linkBankAccount, "linkBankAccount");
        this.linkBankAccount = linkBankAccount;
        return this;
    }

    public LinkBankAccountResponse call() throws Exception {

        return sdk.link(
            security,
            xMoovVersion,
            xWaitFor,
            accountID,
            linkBankAccount);
    }
}
