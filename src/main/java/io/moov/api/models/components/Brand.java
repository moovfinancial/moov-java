/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Brand {

    /**
     * Set brand accent colors for light and dark modes.
     */
    @JsonProperty("colors")
    private Colors colors;

    @JsonCreator
    public Brand(
            @JsonProperty("colors") Colors colors) {
        Utils.checkNotNull(colors, "colors");
        this.colors = colors;
    }

    /**
     * Set brand accent colors for light and dark modes.
     */
    @JsonIgnore
    public Colors colors() {
        return colors;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Set brand accent colors for light and dark modes.
     */
    public Brand withColors(Colors colors) {
        Utils.checkNotNull(colors, "colors");
        this.colors = colors;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Brand other = (Brand) o;
        return 
            Objects.deepEquals(this.colors, other.colors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            colors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Brand.class,
                "colors", colors);
    }
    
    public final static class Builder {
 
        private Colors colors;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Set brand accent colors for light and dark modes.
         */
        public Builder colors(Colors colors) {
            Utils.checkNotNull(colors, "colors");
            this.colors = colors;
            return this;
        }
        
        public Brand build() {
            return new Brand(
                colors);
        }
    }
}

