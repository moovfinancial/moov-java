/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.operations;

import io.moov.sdk.models.components.AccountCountries;
import io.moov.sdk.models.components.AddCapabilities;
import io.moov.sdk.models.components.AuthTokenRequest;
import io.moov.sdk.models.components.BankAccountWaitFor;
import io.moov.sdk.models.components.BrandProperties;
import io.moov.sdk.models.components.CapabilityID;
import io.moov.sdk.models.components.CompleteBankAccountVerification;
import io.moov.sdk.models.components.CompleteMicroDeposits;
import io.moov.sdk.models.components.CreateAccount;
import io.moov.sdk.models.components.CreateApplePaySession;
import io.moov.sdk.models.components.CreateEvidenceFileMultiPart;
import io.moov.sdk.models.components.CreateEvidenceText;
import io.moov.sdk.models.components.CreateFeePlanAgreement;
import io.moov.sdk.models.components.CreatePaymentLink;
import io.moov.sdk.models.components.CreateRepresentative;
import io.moov.sdk.models.components.CreateSweepConfig;
import io.moov.sdk.models.components.CreateTerminalApplication;
import io.moov.sdk.models.components.CreateTransferOptions;
import io.moov.sdk.models.components.E2EEToken;
import io.moov.sdk.models.components.FileUploadRequestMultiPart;
import io.moov.sdk.models.components.LinkAccountTerminalApplication;
import io.moov.sdk.models.components.LinkApplePay;
import io.moov.sdk.models.components.LinkBankAccount;
import io.moov.sdk.models.components.LinkCard;
import io.moov.sdk.models.components.LinkCardWaitFor;
import io.moov.sdk.models.components.ListFeesFetchRequest;
import io.moov.sdk.models.components.OnboardingInviteRequest;
import io.moov.sdk.models.components.PatchAccount;
import io.moov.sdk.models.components.PatchSweepConfig;
import io.moov.sdk.models.components.PatchTransfer;
import io.moov.sdk.models.components.PaymentMethodType;
import io.moov.sdk.models.components.ReceiptRequest;
import io.moov.sdk.models.components.RegisterApplePayMerchantDomains;
import io.moov.sdk.models.components.RequestCard;
import io.moov.sdk.models.components.RevokeTokenRequest;
import io.moov.sdk.models.components.UpdateApplePayMerchantDomains;
import io.moov.sdk.models.components.UpdateBrand;
import io.moov.sdk.models.components.UpdateCard;
import io.moov.sdk.models.components.UpdateIssuedCard;
import io.moov.sdk.models.components.UpdatePaymentLink;
import io.moov.sdk.models.components.UpdateRepresentative;
import io.moov.sdk.models.components.UpdateUnderwriting;
import io.moov.sdk.models.components.UpsertSchedule;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public class SDKMethodInterfaces {

    public interface MethodCallCreateAccount {
        CreateAccountResponse create(
            Optional<String> xMoovVersion,
            CreateAccount createAccount) throws Exception;
    }

    public interface MethodCallListAccounts {
        ListAccountsResponse list(
            ListAccountsRequest request) throws Exception;
    }

    public interface MethodCallGetAccount {
        GetAccountResponse get(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallUpdateAccount {
        UpdateAccountResponse update(
            Optional<String> xMoovVersion,
            String accountID,
            PatchAccount patchAccount) throws Exception;
    }

    public interface MethodCallDisconnectAccount {
        DisconnectAccountResponse disconnect(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetAccountCountries {
        GetAccountCountriesResponse getCountries(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallAssignAccountCountries {
        AssignAccountCountriesResponse assignCountries(
            Optional<String> xMoovVersion,
            String accountID,
            AccountCountries accountCountries) throws Exception;
    }

    public interface MethodCallGetMerchantProcessingAgreement {
        GetMerchantProcessingAgreementResponse getMerchantProcessingAgreement(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetTermsOfServiceToken {
        GetTermsOfServiceTokenResponse getTermsOfServiceToken(
            Optional<String> xMoovVersion,
            Optional<String> origin,
            Optional<String> referer) throws Exception;
    }

    public interface MethodCallListAdjustments {
        ListAdjustmentsResponse list(
            Optional<String> xMoovVersion,
            String accountID,
            Optional<String> walletID) throws Exception;
    }

    public interface MethodCallGetAdjustment {
        GetAdjustmentResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String adjustmentID) throws Exception;
    }

    public interface MethodCallRegisterApplePayMerchantDomains {
        RegisterApplePayMerchantDomainsResponse registerMerchantDomains(
            Optional<String> xMoovVersion,
            String accountID,
            RegisterApplePayMerchantDomains registerApplePayMerchantDomains) throws Exception;
    }

    public interface MethodCallUpdateApplePayMerchantDomains {
        UpdateApplePayMerchantDomainsResponse updateMerchantDomains(
            Optional<String> xMoovVersion,
            String accountID,
            UpdateApplePayMerchantDomains updateApplePayMerchantDomains) throws Exception;
    }

    public interface MethodCallGetApplePayMerchantDomains {
        GetApplePayMerchantDomainsResponse getMerchantDomains(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallCreateApplePaySession {
        CreateApplePaySessionResponse createSession(
            Optional<String> xMoovVersion,
            String accountID,
            CreateApplePaySession createApplePaySession) throws Exception;
    }

    public interface MethodCallLinkApplePayToken {
        LinkApplePayTokenResponse linkToken(
            Optional<String> xMoovVersion,
            String accountID,
            LinkApplePay linkApplePay) throws Exception;
    }

    public interface MethodCallLinkBankAccount {
        LinkBankAccountResponse link(
            Optional<String> xMoovVersion,
            Optional<? extends BankAccountWaitFor> xWaitFor,
            String accountID,
            LinkBankAccount linkBankAccount) throws Exception;
    }

    public interface MethodCallListBankAccounts {
        ListBankAccountsResponse list(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetBankAccount {
        GetBankAccountResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }

    public interface MethodCallDisableBankAccount {
        DisableBankAccountResponse disable(
            Optional<String> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }

    public interface MethodCallInitiateMicroDeposits {
        InitiateMicroDepositsResponse initiateMicroDeposits(
            Optional<String> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }

    public interface MethodCallCompleteMicroDeposits {
        CompleteMicroDepositsResponse completeMicroDeposits(
            Optional<String> xMoovVersion,
            String accountID,
            String bankAccountID,
            CompleteMicroDeposits completeMicroDeposits) throws Exception;
    }

    public interface MethodCallGetBankAccountVerification {
        GetBankAccountVerificationResponse getVerification(
            Optional<String> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }

    public interface MethodCallInitiateBankAccountVerification {
        InitiateBankAccountVerificationResponse initiateVerification(
            Optional<String> xMoovVersion,
            Optional<? extends BankAccountWaitFor> xWaitFor,
            String accountID,
            String bankAccountID) throws Exception;
    }

    public interface MethodCallCompleteBankAccountVerification {
        CompleteBankAccountVerificationResponse completeVerification(
            Optional<String> xMoovVersion,
            String accountID,
            String bankAccountID,
            CompleteBankAccountVerification completeBankAccountVerification) throws Exception;
    }

    public interface MethodCallCreateBrand {
        CreateBrandResponse create(
            Optional<String> xMoovVersion,
            String accountID,
            BrandProperties brandProperties) throws Exception;
    }

    public interface MethodCallUpsertBrand {
        UpsertBrandResponse upsert(
            Optional<String> xMoovVersion,
            String accountID,
            BrandProperties brandProperties) throws Exception;
    }

    public interface MethodCallGetBrand {
        GetBrandResponse get(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallUpdateBrand {
        UpdateBrandResponse update(
            Optional<String> xMoovVersion,
            String accountID,
            UpdateBrand updateBrand) throws Exception;
    }

    public interface MethodCallListCapabilities {
        ListCapabilitiesResponse list(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallRequestCapabilities {
        RequestCapabilitiesResponse request(
            Optional<String> xMoovVersion,
            String accountID,
            AddCapabilities addCapabilities) throws Exception;
    }

    public interface MethodCallGetCapability {
        GetCapabilityResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            CapabilityID capabilityID) throws Exception;
    }

    public interface MethodCallDisableCapability {
        DisableCapabilityResponse disable(
            Optional<String> xMoovVersion,
            String accountID,
            CapabilityID capabilityID) throws Exception;
    }

    public interface MethodCallLinkCard {
        LinkCardResponse link(
            Optional<String> xMoovVersion,
            Optional<? extends LinkCardWaitFor> xWaitFor,
            String accountID,
            LinkCard linkCard) throws Exception;
    }

    public interface MethodCallListCards {
        ListCardsResponse list(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetCard {
        GetCardResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String cardID) throws Exception;
    }

    public interface MethodCallUpdateCard {
        UpdateCardResponse update(
            Optional<String> xMoovVersion,
            String accountID,
            String cardID,
            UpdateCard updateCard) throws Exception;
    }

    public interface MethodCallDisableCard {
        DisableCardResponse disable(
            Optional<String> xMoovVersion,
            String accountID,
            String cardID) throws Exception;
    }

    public interface MethodCallListDisputes {
        ListDisputesResponse list(
            ListDisputesRequest request) throws Exception;
    }

    public interface MethodCallGetDispute {
        GetDisputeResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }

    public interface MethodCallAcceptDispute {
        AcceptDisputeResponse accept(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }

    public interface MethodCallListDisputeEvidence {
        ListDisputeEvidenceResponse listEvidence(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }

    public interface MethodCallUploadDisputeEvidenceFile {
        UploadDisputeEvidenceFileResponse uploadEvidenceFile(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID,
            CreateEvidenceFileMultiPart createEvidenceFileMultiPart) throws Exception;
    }

    public interface MethodCallUploadDisputeEvidenceText {
        UploadDisputeEvidenceTextResponse uploadEvidenceText(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID,
            CreateEvidenceText createEvidenceText) throws Exception;
    }

    public interface MethodCallSubmitDisputeEvidence {
        SubmitDisputeEvidenceResponse submitEvidence(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }

    public interface MethodCallGetDisputeEvidence {
        GetDisputeEvidenceResponse getEvidence(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }

    public interface MethodCallUpdateDisputeEvidence {
        UpdateDisputeEvidenceResponse updateEvidence(
            UpdateDisputeEvidenceRequest request) throws Exception;
    }

    public interface MethodCallDeleteDisputeEvidenceFile {
        DeleteDisputeEvidenceFileResponse deleteEvidence(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }

    public interface MethodCallGetDisputeEvidenceData {
        GetDisputeEvidenceDataResponse getEvidenceData(
            Optional<String> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }

    public interface MethodCallListFeePlanAgreements {
        ListFeePlanAgreementsResponse listFeePlanAgreements(
            ListFeePlanAgreementsRequest request) throws Exception;
    }

    public interface MethodCallCreateFeePlanAgreements {
        CreateFeePlanAgreementsResponse createFeePlanAgreements(
            Optional<String> xMoovVersion,
            String accountID,
            CreateFeePlanAgreement createFeePlanAgreement) throws Exception;
    }

    public interface MethodCallListFeePlans {
        ListFeePlansResponse listFeePlans(
            Optional<String> xMoovVersion,
            String accountID,
            Optional<? extends List<String>> planIDs) throws Exception;
    }

    public interface MethodCallRetrieveFees {
        RetrieveFeesResponse retrieveFees(
            RetrieveFeesRequest request) throws Exception;
    }

    public interface MethodCallListFeesFetch {
        ListFeesFetchResponse listFeesFetch(
            Optional<String> xMoovVersion,
            String accountID,
            Optional<? extends ListFeesFetchRequest> listFeesFetchRequest) throws Exception;
    }

    public interface MethodCallListPartnerPricing {
        ListPartnerPricingResponse listPartnerPricing(
            Optional<String> xMoovVersion,
            String accountID,
            Optional<? extends List<String>> planIDs) throws Exception;
    }

    public interface MethodCallListPartnerPricingAgreements {
        ListPartnerPricingAgreementsResponse listPartnerPricingAgreements(
            ListPartnerPricingAgreementsRequest request) throws Exception;
    }

    public interface MethodCallUploadFile {
        UploadFileResponse upload(
            Optional<String> xMoovVersion,
            String accountID,
            FileUploadRequestMultiPart fileUploadRequestMultiPart) throws Exception;
    }

    public interface MethodCallListFiles {
        ListFilesResponse list(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetFileDetails {
        GetFileDetailsResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String fileID) throws Exception;
    }

    public interface MethodCallCreatePaymentLink {
        CreatePaymentLinkResponse create(
            Optional<String> xMoovVersion,
            String accountID,
            CreatePaymentLink createPaymentLink) throws Exception;
    }

    public interface MethodCallListPaymentLinks {
        ListPaymentLinksResponse list(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetPaymentLink {
        GetPaymentLinkResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }

    public interface MethodCallUpdatePaymentLink {
        UpdatePaymentLinkResponse update(
            Optional<String> xMoovVersion,
            String accountID,
            String paymentLinkCode,
            UpdatePaymentLink updatePaymentLink) throws Exception;
    }

    public interface MethodCallDisablePaymentLink {
        DisablePaymentLinkResponse disable(
            Optional<String> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }

    public interface MethodCallGetPaymentLinkQRCode {
        GetPaymentLinkQRCodeResponse getQRCode(
            Optional<String> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }

    public interface MethodCallListPaymentMethods {
        ListPaymentMethodsResponse list(
            Optional<String> xMoovVersion,
            String accountID,
            Optional<String> sourceID,
            Optional<? extends PaymentMethodType> paymentMethodType) throws Exception;
    }

    public interface MethodCallGetPaymentMethod {
        GetPaymentMethodResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String paymentMethodID) throws Exception;
    }

    public interface MethodCallCreateRepresentative {
        CreateRepresentativeResponse create(
            Optional<String> xMoovVersion,
            String accountID,
            CreateRepresentative createRepresentative) throws Exception;
    }

    public interface MethodCallListRepresentatives {
        ListRepresentativesResponse list(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallDeleteRepresentative {
        DeleteRepresentativeResponse delete(
            Optional<String> xMoovVersion,
            String accountID,
            String representativeID) throws Exception;
    }

    public interface MethodCallGetRepresentative {
        GetRepresentativeResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String representativeID) throws Exception;
    }

    public interface MethodCallUpdateRepresentative {
        UpdateRepresentativeResponse update(
            Optional<String> xMoovVersion,
            String accountID,
            String representativeID,
            UpdateRepresentative updateRepresentative) throws Exception;
    }

    public interface MethodCallCreateSchedule {
        CreateScheduleResponse create(
            Optional<String> xMoovVersion,
            String accountID,
            UpsertSchedule upsertSchedule) throws Exception;
    }

    public interface MethodCallListSchedules {
        ListSchedulesResponse list(
            ListSchedulesRequest request) throws Exception;
    }

    public interface MethodCallUpdateSchedule {
        UpdateScheduleResponse update(
            Optional<String> xMoovVersion,
            String accountID,
            String scheduleID,
            UpsertSchedule upsertSchedule) throws Exception;
    }

    public interface MethodCallGetSchedules {
        GetSchedulesResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String scheduleID) throws Exception;
    }

    public interface MethodCallCancelSchedule {
        CancelScheduleResponse cancel(
            Optional<String> xMoovVersion,
            String accountID,
            String scheduleID) throws Exception;
    }

    public interface MethodCallGetScheduledOccurrence {
        GetScheduledOccurrenceResponse getOccurrance(
            Optional<String> xMoovVersion,
            String accountID,
            String scheduleID,
            String occurrenceFilter) throws Exception;
    }

    public interface MethodCallCreateSweepConfig {
        CreateSweepConfigResponse createConfig(
            Optional<String> xMoovVersion,
            String accountID,
            CreateSweepConfig createSweepConfig) throws Exception;
    }

    public interface MethodCallListSweepConfigs {
        ListSweepConfigsResponse listConfigs(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetSweepConfig {
        GetSweepConfigResponse getConfig(
            Optional<String> xMoovVersion,
            String accountID,
            String sweepConfigID) throws Exception;
    }

    public interface MethodCallUpdateSweepConfig {
        UpdateSweepConfigResponse updateConfig(
            Optional<String> xMoovVersion,
            String accountID,
            String sweepConfigID,
            PatchSweepConfig patchSweepConfig) throws Exception;
    }

    public interface MethodCallListSweeps {
        ListSweepsResponse list(
            ListSweepsRequest request) throws Exception;
    }

    public interface MethodCallGetSweep {
        GetSweepResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String walletID,
            String sweepID) throws Exception;
    }

    public interface MethodCallLinkAccountTerminalApplication {
        LinkAccountTerminalApplicationResponse link(
            Optional<String> xMoovVersion,
            String accountID,
            LinkAccountTerminalApplication linkAccountTerminalApplication) throws Exception;
    }

    public interface MethodCallListAccountTerminalApplications {
        ListAccountTerminalApplicationsResponse list(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetAccountTerminalApplication {
        GetAccountTerminalApplicationResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String terminalApplicationID) throws Exception;
    }

    public interface MethodCallGetTerminalConfiguration {
        GetTerminalConfigurationResponse getConfiguration(
            Optional<String> xMoovVersion,
            String accountID,
            String terminalApplicationID) throws Exception;
    }

    public interface MethodCallCreateTransferOptionsForAccount {
        CreateTransferOptionsForAccountResponse generateOptionsForAccount(
            Optional<String> xMoovVersion,
            String accountID,
            CreateTransferOptions createTransferOptions) throws Exception;
    }

    public interface MethodCallCreateTransfer {
        CreateTransferResponse create(
            CreateTransferRequest request) throws Exception;
    }

    public interface MethodCallListTransfers {
        ListTransfersResponse list(
            ListTransfersRequest request) throws Exception;
    }

    public interface MethodCallGetTransfer {
        GetTransferResponse get(
            Optional<String> xMoovVersion,
            String transferID,
            String accountID) throws Exception;
    }

    public interface MethodCallUpdateTransfer {
        UpdateTransferResponse update(
            Optional<String> xMoovVersion,
            String transferID,
            String accountID,
            PatchTransfer patchTransfer) throws Exception;
    }

    public interface MethodCallCreateCancellation {
        CreateCancellationResponse createCancellation(
            Optional<String> xMoovVersion,
            String accountID,
            String transferID) throws Exception;
    }

    public interface MethodCallGetCancellation {
        GetCancellationResponse getCancellation(
            Optional<String> xMoovVersion,
            String accountID,
            String transferID,
            String cancellationID) throws Exception;
    }

    public interface MethodCallInitiateRefund {
        InitiateRefundResponse initiateRefund(
            InitiateRefundRequest request) throws Exception;
    }

    public interface MethodCallListRefunds {
        ListRefundsResponse listRefunds(
            Optional<String> xMoovVersion,
            String accountID,
            String transferID) throws Exception;
    }

    public interface MethodCallGetRefund {
        GetRefundResponse getRefund(
            Optional<String> xMoovVersion,
            String transferID,
            String accountID,
            String refundID) throws Exception;
    }

    public interface MethodCallCreateReversal {
        CreateReversalResponse createReversal(
            CreateReversalRequest request) throws Exception;
    }

    public interface MethodCallCreateTransferOptions {
        CreateTransferOptionsResponse generateOptions(
            Optional<String> xMoovVersion,
            CreateTransferOptions createTransferOptions) throws Exception;
    }

    public interface MethodCallGetUnderwriting {
        GetUnderwritingResponse get(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallUpsertUnderwriting {
        UpsertUnderwritingResponse upsert(
            Optional<String> xMoovVersion,
            String accountID,
            UpdateUnderwriting updateUnderwriting) throws Exception;
    }

    public interface MethodCallListWallets {
        ListWalletsResponse list(
            Optional<String> xMoovVersion,
            String accountID) throws Exception;
    }

    public interface MethodCallGetWallet {
        GetWalletResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String walletID) throws Exception;
    }

    public interface MethodCallListWalletTransactions {
        ListWalletTransactionsResponse list(
            ListWalletTransactionsRequest request) throws Exception;
    }

    public interface MethodCallGetWalletTransaction {
        GetWalletTransactionResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String walletID,
            String transactionID) throws Exception;
    }

    public interface MethodCallGetAvatar {
        GetAvatarResponse get(
            Optional<String> xMoovVersion,
            String uniqueID) throws Exception;
    }

    public interface MethodCallTestEndToEndToken {
        TestEndToEndTokenResponse testEncryptedToken(
            Optional<String> xMoovVersion,
            E2EEToken e2EEToken) throws Exception;
    }

    public interface MethodCallGenerateEndToEndKey {
        GenerateEndToEndKeyResponse generateKey(
            Optional<String> xMoovVersion) throws Exception;
    }

    public interface MethodCallGetEnrichmentAddress {
        GetEnrichmentAddressResponse get(
            GetEnrichmentAddressRequest request) throws Exception;
    }

    public interface MethodCallGetEnrichmentProfile {
        GetEnrichmentProfileResponse get(
            Optional<String> xMoovVersion,
            String email) throws Exception;
    }

    public interface MethodCallListIndustries {
        ListIndustriesResponse list(
            Optional<String> xMoovVersion) throws Exception;
    }

    public interface MethodCallSearchInstitutions {
        SearchInstitutionsResponse searchInstitutions(
            Optional<String> xMoovVersion,
            Optional<String> name,
            Optional<String> routingNumber,
            Optional<Long> limit) throws Exception;
    }

    public interface MethodCallListInstitutions {
        ListInstitutionsResponse search(
            ListInstitutionsRequest request) throws Exception;
    }

    public interface MethodCallListIssuedCardAuthorizations {
        ListIssuedCardAuthorizationsResponse listAuthorizations(
            ListIssuedCardAuthorizationsRequest request) throws Exception;
    }

    public interface MethodCallGetIssuedCardAuthorization {
        GetIssuedCardAuthorizationResponse getAuthorization(
            Optional<String> xMoovVersion,
            String accountID,
            String authorizationID) throws Exception;
    }

    public interface MethodCallListIssuedCardAuthorizationEvents {
        ListIssuedCardAuthorizationEventsResponse listAuthorizationEvents(
            ListIssuedCardAuthorizationEventsRequest request) throws Exception;
    }

    public interface MethodCallListIssuedCardTransactions {
        ListIssuedCardTransactionsResponse list(
            ListIssuedCardTransactionsRequest request) throws Exception;
    }

    public interface MethodCallGetIssuedCardTransaction {
        GetIssuedCardTransactionResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String cardTransactionID) throws Exception;
    }

    public interface MethodCallRequestCard {
        RequestCardResponse request(
            Optional<String> xMoovVersion,
            String accountID,
            RequestCard requestCard) throws Exception;
    }

    public interface MethodCallListIssuedCards {
        ListIssuedCardsResponse list(
            ListIssuedCardsRequest request) throws Exception;
    }

    public interface MethodCallGetIssuedCard {
        GetIssuedCardResponse get(
            Optional<String> xMoovVersion,
            String accountID,
            String issuedCardID) throws Exception;
    }

    public interface MethodCallUpdateIssuedCard {
        UpdateIssuedCardResponse update(
            Optional<String> xMoovVersion,
            String accountID,
            String issuedCardID,
            UpdateIssuedCard updateIssuedCard) throws Exception;
    }

    public interface MethodCallGetFullIssuedCard {
        GetFullIssuedCardResponse getFull(
            Optional<String> xMoovVersion,
            String accountID,
            String issuedCardID) throws Exception;
    }

    public interface MethodCallRevokeAccessToken {
        RevokeAccessTokenResponse revokeAccessToken(
            Optional<String> xMoovVersion,
            RevokeTokenRequest revokeTokenRequest) throws Exception;
    }

    public interface MethodCallCreateAccessToken {
        CreateAccessTokenResponse createAccessToken(
            Optional<String> xMoovVersion,
            AuthTokenRequest authTokenRequest) throws Exception;
    }

    public interface MethodCallCreateOnboardingInvite {
        CreateOnboardingInviteResponse createInvite(
            Optional<String> xMoovVersion,
            OnboardingInviteRequest onboardingInviteRequest) throws Exception;
    }

    public interface MethodCallListOnboardingInvites {
        ListOnboardingInvitesResponse listInvites(
            Optional<String> xMoovVersion) throws Exception;
    }

    public interface MethodCallGetOnboardingInvite {
        GetOnboardingInviteResponse getInvite(
            Optional<String> xMoovVersion,
            String code) throws Exception;
    }

    public interface MethodCallRevokeOnboardingInvite {
        RevokeOnboardingInviteResponse revokeInvite(
            Optional<String> xMoovVersion,
            String code) throws Exception;
    }

    public interface MethodCallPing {
        PingResponse ping(
            Optional<String> xMoovVersion) throws Exception;
    }

    public interface MethodCallCreateReceipts {
        CreateReceiptsResponse create(
            Optional<String> xMoovVersion,
            List<ReceiptRequest> requestBody) throws Exception;
    }

    public interface MethodCallListReceipts {
        ListReceiptsResponse list(
            Optional<String> xMoovVersion,
            String id) throws Exception;
    }

    public interface MethodCallCreateTerminalApplication {
        CreateTerminalApplicationResponse create(
            Optional<String> xMoovVersion,
            CreateTerminalApplication createTerminalApplication) throws Exception;
    }

    public interface MethodCallListTerminalApplications {
        ListTerminalApplicationsResponse list(
            Optional<String> xMoovVersion) throws Exception;
    }

    public interface MethodCallGetTerminalApplication {
        GetTerminalApplicationResponse get(
            Optional<String> xMoovVersion,
            String terminalApplicationID) throws Exception;
    }

    public interface MethodCallDeleteTerminalApplication {
        DeleteTerminalApplicationResponse delete(
            Optional<String> xMoovVersion,
            String terminalApplicationID) throws Exception;
    }
}
