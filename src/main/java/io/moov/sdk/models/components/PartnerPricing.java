/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.moov.sdk.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PartnerPricing {

    @JsonProperty("planID")
    private String planID;

    /**
     * The name of the fee plan.
     */
    @JsonProperty("name")
    private String name;

    /**
     * A description of the fee plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The integer percentage value of the revenue split for partner.
     */
    @JsonProperty("revenueShare")
    private long revenueShare;

    /**
     * Specifies the card processing pricing model
     */
    @JsonProperty("cardAcquiringModel")
    private CardAcquiringModel cardAcquiringModel;

    @JsonProperty("billableFees")
    private List<BillableFee> billableFees;

    /**
     * The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
     */
    @JsonProperty("minimumCommitment")
    private MinimumCommitment minimumCommitment;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonCreator
    public PartnerPricing(
            @JsonProperty("planID") String planID,
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("revenueShare") long revenueShare,
            @JsonProperty("cardAcquiringModel") CardAcquiringModel cardAcquiringModel,
            @JsonProperty("billableFees") List<BillableFee> billableFees,
            @JsonProperty("minimumCommitment") MinimumCommitment minimumCommitment,
            @JsonProperty("createdAt") OffsetDateTime createdAt) {
        Utils.checkNotNull(planID, "planID");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(revenueShare, "revenueShare");
        Utils.checkNotNull(cardAcquiringModel, "cardAcquiringModel");
        Utils.checkNotNull(billableFees, "billableFees");
        Utils.checkNotNull(minimumCommitment, "minimumCommitment");
        Utils.checkNotNull(createdAt, "createdAt");
        this.planID = planID;
        this.name = name;
        this.description = description;
        this.revenueShare = revenueShare;
        this.cardAcquiringModel = cardAcquiringModel;
        this.billableFees = billableFees;
        this.minimumCommitment = minimumCommitment;
        this.createdAt = createdAt;
    }
    
    public PartnerPricing(
            String planID,
            String name,
            long revenueShare,
            CardAcquiringModel cardAcquiringModel,
            List<BillableFee> billableFees,
            MinimumCommitment minimumCommitment,
            OffsetDateTime createdAt) {
        this(planID, name, Optional.empty(), revenueShare, cardAcquiringModel, billableFees, minimumCommitment, createdAt);
    }

    @JsonIgnore
    public String planID() {
        return planID;
    }

    /**
     * The name of the fee plan.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A description of the fee plan.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The integer percentage value of the revenue split for partner.
     */
    @JsonIgnore
    public long revenueShare() {
        return revenueShare;
    }

    /**
     * Specifies the card processing pricing model
     */
    @JsonIgnore
    public CardAcquiringModel cardAcquiringModel() {
        return cardAcquiringModel;
    }

    @JsonIgnore
    public List<BillableFee> billableFees() {
        return billableFees;
    }

    /**
     * The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
     */
    @JsonIgnore
    public MinimumCommitment minimumCommitment() {
        return minimumCommitment;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PartnerPricing withPlanID(String planID) {
        Utils.checkNotNull(planID, "planID");
        this.planID = planID;
        return this;
    }

    /**
     * The name of the fee plan.
     */
    public PartnerPricing withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A description of the fee plan.
     */
    public PartnerPricing withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A description of the fee plan.
     */
    public PartnerPricing withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The integer percentage value of the revenue split for partner.
     */
    public PartnerPricing withRevenueShare(long revenueShare) {
        Utils.checkNotNull(revenueShare, "revenueShare");
        this.revenueShare = revenueShare;
        return this;
    }

    /**
     * Specifies the card processing pricing model
     */
    public PartnerPricing withCardAcquiringModel(CardAcquiringModel cardAcquiringModel) {
        Utils.checkNotNull(cardAcquiringModel, "cardAcquiringModel");
        this.cardAcquiringModel = cardAcquiringModel;
        return this;
    }

    public PartnerPricing withBillableFees(List<BillableFee> billableFees) {
        Utils.checkNotNull(billableFees, "billableFees");
        this.billableFees = billableFees;
        return this;
    }

    /**
     * The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
     */
    public PartnerPricing withMinimumCommitment(MinimumCommitment minimumCommitment) {
        Utils.checkNotNull(minimumCommitment, "minimumCommitment");
        this.minimumCommitment = minimumCommitment;
        return this;
    }

    public PartnerPricing withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PartnerPricing other = (PartnerPricing) o;
        return 
            Objects.deepEquals(this.planID, other.planID) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.revenueShare, other.revenueShare) &&
            Objects.deepEquals(this.cardAcquiringModel, other.cardAcquiringModel) &&
            Objects.deepEquals(this.billableFees, other.billableFees) &&
            Objects.deepEquals(this.minimumCommitment, other.minimumCommitment) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            planID,
            name,
            description,
            revenueShare,
            cardAcquiringModel,
            billableFees,
            minimumCommitment,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PartnerPricing.class,
                "planID", planID,
                "name", name,
                "description", description,
                "revenueShare", revenueShare,
                "cardAcquiringModel", cardAcquiringModel,
                "billableFees", billableFees,
                "minimumCommitment", minimumCommitment,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private String planID;
 
        private String name;
 
        private Optional<String> description = Optional.empty();
 
        private Long revenueShare;
 
        private CardAcquiringModel cardAcquiringModel;
 
        private List<BillableFee> billableFees;
 
        private MinimumCommitment minimumCommitment;
 
        private OffsetDateTime createdAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder planID(String planID) {
            Utils.checkNotNull(planID, "planID");
            this.planID = planID;
            return this;
        }

        /**
         * The name of the fee plan.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A description of the fee plan.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A description of the fee plan.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The integer percentage value of the revenue split for partner.
         */
        public Builder revenueShare(long revenueShare) {
            Utils.checkNotNull(revenueShare, "revenueShare");
            this.revenueShare = revenueShare;
            return this;
        }

        /**
         * Specifies the card processing pricing model
         */
        public Builder cardAcquiringModel(CardAcquiringModel cardAcquiringModel) {
            Utils.checkNotNull(cardAcquiringModel, "cardAcquiringModel");
            this.cardAcquiringModel = cardAcquiringModel;
            return this;
        }

        public Builder billableFees(List<BillableFee> billableFees) {
            Utils.checkNotNull(billableFees, "billableFees");
            this.billableFees = billableFees;
            return this;
        }

        /**
         * The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
         */
        public Builder minimumCommitment(MinimumCommitment minimumCommitment) {
            Utils.checkNotNull(minimumCommitment, "minimumCommitment");
            this.minimumCommitment = minimumCommitment;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public PartnerPricing build() {
            return new PartnerPricing(
                planID,
                name,
                description,
                revenueShare,
                cardAcquiringModel,
                billableFees,
                minimumCommitment,
                createdAt);
        }
    }
}

