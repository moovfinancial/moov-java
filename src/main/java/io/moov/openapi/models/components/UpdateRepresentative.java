/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateRepresentative {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends IndividualNameUpdate> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<? extends Phone> phone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<? extends Email> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private JsonNullable<? extends UpdateRepresentativeAddress> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthDate")
    private JsonNullable<? extends UpdateRepresentativeBirthDate> birthDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("governmentID")
    private JsonNullable<? extends UpdateRepresentativeGovernmentID> governmentID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responsibilities")
    private JsonNullable<? extends Responsibilities> responsibilities;

    @JsonCreator
    public UpdateRepresentative(
            @JsonProperty("name") Optional<? extends IndividualNameUpdate> name,
            @JsonProperty("phone") JsonNullable<? extends Phone> phone,
            @JsonProperty("email") JsonNullable<? extends Email> email,
            @JsonProperty("address") JsonNullable<? extends UpdateRepresentativeAddress> address,
            @JsonProperty("birthDate") JsonNullable<? extends UpdateRepresentativeBirthDate> birthDate,
            @JsonProperty("governmentID") JsonNullable<? extends UpdateRepresentativeGovernmentID> governmentID,
            @JsonProperty("responsibilities") JsonNullable<? extends Responsibilities> responsibilities) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(birthDate, "birthDate");
        Utils.checkNotNull(governmentID, "governmentID");
        Utils.checkNotNull(responsibilities, "responsibilities");
        this.name = name;
        this.phone = phone;
        this.email = email;
        this.address = address;
        this.birthDate = birthDate;
        this.governmentID = governmentID;
        this.responsibilities = responsibilities;
    }
    
    public UpdateRepresentative() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IndividualNameUpdate> name() {
        return (Optional<IndividualNameUpdate>) name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Phone> phone() {
        return (JsonNullable<Phone>) phone;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Email> email() {
        return (JsonNullable<Email>) email;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateRepresentativeAddress> address() {
        return (JsonNullable<UpdateRepresentativeAddress>) address;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateRepresentativeBirthDate> birthDate() {
        return (JsonNullable<UpdateRepresentativeBirthDate>) birthDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateRepresentativeGovernmentID> governmentID() {
        return (JsonNullable<UpdateRepresentativeGovernmentID>) governmentID;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Responsibilities> responsibilities() {
        return (JsonNullable<Responsibilities>) responsibilities;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateRepresentative withName(IndividualNameUpdate name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public UpdateRepresentative withName(Optional<? extends IndividualNameUpdate> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public UpdateRepresentative withPhone(Phone phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    public UpdateRepresentative withPhone(JsonNullable<? extends Phone> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    public UpdateRepresentative withEmail(Email email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    public UpdateRepresentative withEmail(JsonNullable<? extends Email> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public UpdateRepresentative withAddress(UpdateRepresentativeAddress address) {
        Utils.checkNotNull(address, "address");
        this.address = JsonNullable.of(address);
        return this;
    }

    public UpdateRepresentative withAddress(JsonNullable<? extends UpdateRepresentativeAddress> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public UpdateRepresentative withBirthDate(UpdateRepresentativeBirthDate birthDate) {
        Utils.checkNotNull(birthDate, "birthDate");
        this.birthDate = JsonNullable.of(birthDate);
        return this;
    }

    public UpdateRepresentative withBirthDate(JsonNullable<? extends UpdateRepresentativeBirthDate> birthDate) {
        Utils.checkNotNull(birthDate, "birthDate");
        this.birthDate = birthDate;
        return this;
    }

    public UpdateRepresentative withGovernmentID(UpdateRepresentativeGovernmentID governmentID) {
        Utils.checkNotNull(governmentID, "governmentID");
        this.governmentID = JsonNullable.of(governmentID);
        return this;
    }

    public UpdateRepresentative withGovernmentID(JsonNullable<? extends UpdateRepresentativeGovernmentID> governmentID) {
        Utils.checkNotNull(governmentID, "governmentID");
        this.governmentID = governmentID;
        return this;
    }

    public UpdateRepresentative withResponsibilities(Responsibilities responsibilities) {
        Utils.checkNotNull(responsibilities, "responsibilities");
        this.responsibilities = JsonNullable.of(responsibilities);
        return this;
    }

    public UpdateRepresentative withResponsibilities(JsonNullable<? extends Responsibilities> responsibilities) {
        Utils.checkNotNull(responsibilities, "responsibilities");
        this.responsibilities = responsibilities;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateRepresentative other = (UpdateRepresentative) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.birthDate, other.birthDate) &&
            Objects.deepEquals(this.governmentID, other.governmentID) &&
            Objects.deepEquals(this.responsibilities, other.responsibilities);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            phone,
            email,
            address,
            birthDate,
            governmentID,
            responsibilities);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateRepresentative.class,
                "name", name,
                "phone", phone,
                "email", email,
                "address", address,
                "birthDate", birthDate,
                "governmentID", governmentID,
                "responsibilities", responsibilities);
    }
    
    public final static class Builder {
 
        private Optional<? extends IndividualNameUpdate> name = Optional.empty();
 
        private JsonNullable<? extends Phone> phone = JsonNullable.undefined();
 
        private JsonNullable<? extends Email> email = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateRepresentativeAddress> address = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateRepresentativeBirthDate> birthDate = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateRepresentativeGovernmentID> governmentID = JsonNullable.undefined();
 
        private JsonNullable<? extends Responsibilities> responsibilities = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(IndividualNameUpdate name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends IndividualNameUpdate> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder phone(Phone phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        public Builder phone(JsonNullable<? extends Phone> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        public Builder email(Email email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        public Builder email(JsonNullable<? extends Email> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder address(UpdateRepresentativeAddress address) {
            Utils.checkNotNull(address, "address");
            this.address = JsonNullable.of(address);
            return this;
        }

        public Builder address(JsonNullable<? extends UpdateRepresentativeAddress> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder birthDate(UpdateRepresentativeBirthDate birthDate) {
            Utils.checkNotNull(birthDate, "birthDate");
            this.birthDate = JsonNullable.of(birthDate);
            return this;
        }

        public Builder birthDate(JsonNullable<? extends UpdateRepresentativeBirthDate> birthDate) {
            Utils.checkNotNull(birthDate, "birthDate");
            this.birthDate = birthDate;
            return this;
        }

        public Builder governmentID(UpdateRepresentativeGovernmentID governmentID) {
            Utils.checkNotNull(governmentID, "governmentID");
            this.governmentID = JsonNullable.of(governmentID);
            return this;
        }

        public Builder governmentID(JsonNullable<? extends UpdateRepresentativeGovernmentID> governmentID) {
            Utils.checkNotNull(governmentID, "governmentID");
            this.governmentID = governmentID;
            return this;
        }

        public Builder responsibilities(Responsibilities responsibilities) {
            Utils.checkNotNull(responsibilities, "responsibilities");
            this.responsibilities = JsonNullable.of(responsibilities);
            return this;
        }

        public Builder responsibilities(JsonNullable<? extends Responsibilities> responsibilities) {
            Utils.checkNotNull(responsibilities, "responsibilities");
            this.responsibilities = responsibilities;
            return this;
        }
        
        public UpdateRepresentative build() {
            return new UpdateRepresentative(
                name,
                phone,
                email,
                address,
                birthDate,
                governmentID,
                responsibilities);
        }
    }
}

