/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.moov.sdk.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UpdateBrand {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colors")
    private Optional<? extends UpdateColors> colors;

    @JsonCreator
    public UpdateBrand(
            @JsonProperty("colors") Optional<? extends UpdateColors> colors) {
        Utils.checkNotNull(colors, "colors");
        this.colors = colors;
    }
    
    public UpdateBrand() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateColors> colors() {
        return (Optional<UpdateColors>) colors;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateBrand withColors(UpdateColors colors) {
        Utils.checkNotNull(colors, "colors");
        this.colors = Optional.ofNullable(colors);
        return this;
    }

    public UpdateBrand withColors(Optional<? extends UpdateColors> colors) {
        Utils.checkNotNull(colors, "colors");
        this.colors = colors;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateBrand other = (UpdateBrand) o;
        return 
            Objects.deepEquals(this.colors, other.colors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            colors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateBrand.class,
                "colors", colors);
    }
    
    public final static class Builder {
 
        private Optional<? extends UpdateColors> colors = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder colors(UpdateColors colors) {
            Utils.checkNotNull(colors, "colors");
            this.colors = Optional.ofNullable(colors);
            return this;
        }

        public Builder colors(Optional<? extends UpdateColors> colors) {
            Utils.checkNotNull(colors, "colors");
            this.colors = colors;
            return this;
        }
        
        public UpdateBrand build() {
            return new UpdateBrand(
                colors);
        }
    }
}

