/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;

/**
 * BillingCountAndAmount
 * 
 * <p>Represents a count of items and their total amount.
 */
public class BillingCountAndAmount {
    /**
     * The number of items.
     */
    @JsonProperty("count")
    private long count;

    /**
     * The total amount.
     */
    @JsonProperty("amount")
    private AmountDecimal amount;

    @JsonCreator
    public BillingCountAndAmount(
            @JsonProperty("count") long count,
            @JsonProperty("amount") AmountDecimal amount) {
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(amount, "amount");
        this.count = count;
        this.amount = amount;
    }

    /**
     * The number of items.
     */
    @JsonIgnore
    public long count() {
        return count;
    }

    /**
     * The total amount.
     */
    @JsonIgnore
    public AmountDecimal amount() {
        return amount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The number of items.
     */
    public BillingCountAndAmount withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * The total amount.
     */
    public BillingCountAndAmount withAmount(AmountDecimal amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillingCountAndAmount other = (BillingCountAndAmount) o;
        return 
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            count, amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillingCountAndAmount.class,
                "count", count,
                "amount", amount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long count;

        private AmountDecimal amount;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The number of items.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        /**
         * The total amount.
         */
        public Builder amount(AmountDecimal amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public BillingCountAndAmount build() {

            return new BillingCountAndAmount(
                count, amount);
        }

    }
}
