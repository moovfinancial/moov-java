/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.moov.sdk.utils.SpeakeasyMetadata;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ImageUpdateRequestMultiPart
 * 
 * <p>Multipart request body for updating an image and/or its metadata.
 */
public class ImageUpdateRequestMultiPart {

    @SpeakeasyMetadata("multipartForm:file,name=image")
    private Optional<? extends ImageUpdateRequestMultiPartImage> image;

    /**
     * JSON-encoded metadata to update for the image.
     * 
     * <p>Omit this field if not updating metadata, or send `null` to clear existing metadata.
     */
    @SpeakeasyMetadata("multipartForm:name=metadata,json")
    private JsonNullable<? extends Metadata> metadata;

    @JsonCreator
    public ImageUpdateRequestMultiPart(
            Optional<? extends ImageUpdateRequestMultiPartImage> image,
            JsonNullable<? extends Metadata> metadata) {
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(metadata, "metadata");
        this.image = image;
        this.metadata = metadata;
    }
    
    public ImageUpdateRequestMultiPart() {
        this(Optional.empty(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ImageUpdateRequestMultiPartImage> image() {
        return (Optional<ImageUpdateRequestMultiPartImage>) image;
    }

    /**
     * JSON-encoded metadata to update for the image.
     * 
     * <p>Omit this field if not updating metadata, or send `null` to clear existing metadata.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Metadata> metadata() {
        return (JsonNullable<Metadata>) metadata;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ImageUpdateRequestMultiPart withImage(ImageUpdateRequestMultiPartImage image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }


    public ImageUpdateRequestMultiPart withImage(Optional<? extends ImageUpdateRequestMultiPartImage> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    /**
     * JSON-encoded metadata to update for the image.
     * 
     * <p>Omit this field if not updating metadata, or send `null` to clear existing metadata.
     */
    public ImageUpdateRequestMultiPart withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * JSON-encoded metadata to update for the image.
     * 
     * <p>Omit this field if not updating metadata, or send `null` to clear existing metadata.
     */
    public ImageUpdateRequestMultiPart withMetadata(JsonNullable<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImageUpdateRequestMultiPart other = (ImageUpdateRequestMultiPart) o;
        return 
            Utils.enhancedDeepEquals(this.image, other.image) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            image, metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ImageUpdateRequestMultiPart.class,
                "image", image,
                "metadata", metadata);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends ImageUpdateRequestMultiPartImage> image = Optional.empty();

        private JsonNullable<? extends Metadata> metadata = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder image(ImageUpdateRequestMultiPartImage image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        public Builder image(Optional<? extends ImageUpdateRequestMultiPartImage> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }


        /**
         * JSON-encoded metadata to update for the image.
         * 
         * <p>Omit this field if not updating metadata, or send `null` to clear existing metadata.
         */
        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * JSON-encoded metadata to update for the image.
         * 
         * <p>Omit this field if not updating metadata, or send `null` to clear existing metadata.
         */
        public Builder metadata(JsonNullable<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public ImageUpdateRequestMultiPart build() {

            return new ImageUpdateRequestMultiPart(
                image, metadata);
        }

    }
}
