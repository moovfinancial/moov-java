/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;


public class EvidenceText {

    @JsonProperty("evidenceID")
    private String evidenceID;

    @JsonProperty("disputeID")
    private String disputeID;

    @JsonProperty("evidenceType")
    private EvidenceType evidenceType;

    @JsonProperty("text")
    private String text;

    @JsonProperty("createdOn")
    private OffsetDateTime createdOn;

    @JsonCreator
    public EvidenceText(
            @JsonProperty("evidenceID") String evidenceID,
            @JsonProperty("disputeID") String disputeID,
            @JsonProperty("evidenceType") EvidenceType evidenceType,
            @JsonProperty("text") String text,
            @JsonProperty("createdOn") OffsetDateTime createdOn) {
        Utils.checkNotNull(evidenceID, "evidenceID");
        Utils.checkNotNull(disputeID, "disputeID");
        Utils.checkNotNull(evidenceType, "evidenceType");
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(createdOn, "createdOn");
        this.evidenceID = evidenceID;
        this.disputeID = disputeID;
        this.evidenceType = evidenceType;
        this.text = text;
        this.createdOn = createdOn;
    }

    @JsonIgnore
    public String evidenceID() {
        return evidenceID;
    }

    @JsonIgnore
    public String disputeID() {
        return disputeID;
    }

    @JsonIgnore
    public EvidenceType evidenceType() {
        return evidenceType;
    }

    @JsonIgnore
    public String text() {
        return text;
    }

    @JsonIgnore
    public OffsetDateTime createdOn() {
        return createdOn;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public EvidenceText withEvidenceID(String evidenceID) {
        Utils.checkNotNull(evidenceID, "evidenceID");
        this.evidenceID = evidenceID;
        return this;
    }

    public EvidenceText withDisputeID(String disputeID) {
        Utils.checkNotNull(disputeID, "disputeID");
        this.disputeID = disputeID;
        return this;
    }

    public EvidenceText withEvidenceType(EvidenceType evidenceType) {
        Utils.checkNotNull(evidenceType, "evidenceType");
        this.evidenceType = evidenceType;
        return this;
    }

    public EvidenceText withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    public EvidenceText withCreatedOn(OffsetDateTime createdOn) {
        Utils.checkNotNull(createdOn, "createdOn");
        this.createdOn = createdOn;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EvidenceText other = (EvidenceText) o;
        return 
            Objects.deepEquals(this.evidenceID, other.evidenceID) &&
            Objects.deepEquals(this.disputeID, other.disputeID) &&
            Objects.deepEquals(this.evidenceType, other.evidenceType) &&
            Objects.deepEquals(this.text, other.text) &&
            Objects.deepEquals(this.createdOn, other.createdOn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            evidenceID,
            disputeID,
            evidenceType,
            text,
            createdOn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EvidenceText.class,
                "evidenceID", evidenceID,
                "disputeID", disputeID,
                "evidenceType", evidenceType,
                "text", text,
                "createdOn", createdOn);
    }
    
    public final static class Builder {
 
        private String evidenceID;
 
        private String disputeID;
 
        private EvidenceType evidenceType;
 
        private String text;
 
        private OffsetDateTime createdOn;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder evidenceID(String evidenceID) {
            Utils.checkNotNull(evidenceID, "evidenceID");
            this.evidenceID = evidenceID;
            return this;
        }

        public Builder disputeID(String disputeID) {
            Utils.checkNotNull(disputeID, "disputeID");
            this.disputeID = disputeID;
            return this;
        }

        public Builder evidenceType(EvidenceType evidenceType) {
            Utils.checkNotNull(evidenceType, "evidenceType");
            this.evidenceType = evidenceType;
            return this;
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        public Builder createdOn(OffsetDateTime createdOn) {
            Utils.checkNotNull(createdOn, "createdOn");
            this.createdOn = createdOn;
            return this;
        }
        
        public EvidenceText build() {
            return new EvidenceText(
                evidenceID,
                disputeID,
                evidenceType,
                text,
                createdOn);
        }
    }
}

