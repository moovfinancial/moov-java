/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.operations;

import static io.moov.sdk.operations.Operations.RequestOperation;

import io.moov.sdk.SDKConfiguration;
import io.moov.sdk.models.components.IssuedCardState;
import io.moov.sdk.operations.ListIssuedCards;
import io.moov.sdk.utils.Headers;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public class ListIssuedCardsRequestBuilder {

    private String accountID;
    private Optional<Long> skip = Optional.empty();
    private Optional<Long> count = Optional.empty();
    private Optional<? extends List<IssuedCardState>> states = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public ListIssuedCardsRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public ListIssuedCardsRequestBuilder accountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }
                
    public ListIssuedCardsRequestBuilder skip(long skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = Optional.of(skip);
        return this;
    }

    public ListIssuedCardsRequestBuilder skip(Optional<Long> skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = skip;
        return this;
    }
                
    public ListIssuedCardsRequestBuilder count(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.of(count);
        return this;
    }

    public ListIssuedCardsRequestBuilder count(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }
                
    public ListIssuedCardsRequestBuilder states(List<IssuedCardState> states) {
        Utils.checkNotNull(states, "states");
        this.states = Optional.of(states);
        return this;
    }

    public ListIssuedCardsRequestBuilder states(Optional<? extends List<IssuedCardState>> states) {
        Utils.checkNotNull(states, "states");
        this.states = states;
        return this;
    }


    private ListIssuedCardsRequest buildRequest() {

        ListIssuedCardsRequest request = new ListIssuedCardsRequest(accountID,
            skip,
            count,
            states);

        return request;
    }

    public ListIssuedCardsResponse call() {
        
        RequestOperation<ListIssuedCardsRequest, ListIssuedCardsResponse> operation
              = new ListIssuedCards.Sync(sdkConfiguration, _headers);
        ListIssuedCardsRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
