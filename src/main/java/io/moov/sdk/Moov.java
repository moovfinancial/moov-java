/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk;

import io.moov.sdk.utils.HTTPClient;
import io.moov.sdk.utils.RetryConfig;
import io.moov.sdk.utils.SpeakeasyHTTPClient;
import io.moov.sdk.utils.Utils;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

/**
 * Moov API: Moov is a platform that enables developers to integrate all aspects of money movement with ease and speed.
 * The Moov API makes it simple for platforms to send, receive, and store money. Our API is based upon REST
 * principles, returns JSON responses, and uses standard HTTP response codes. To learn more about how Moov
 * works at a high level, read our [concepts](https://docs.moov.io/guides/get-started/glossary/) guide.
 */
public class Moov {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * Production API host
         */
        "https://api.moov.io",
    };

    private final Accounts accounts;

    private final Adjustments adjustments;

    private final ApplePay applePay;

    private final BankAccounts bankAccounts;

    private final Branding branding;

    private final Capabilities capabilities;

    private final Cards cards;

    private final Disputes disputes;

    private final FeePlans feePlans;

    private final Files files;

    private final PaymentLinks paymentLinks;

    private final PaymentMethods paymentMethods;

    private final Representatives representatives;

    private final Scheduling scheduling;

    private final Sweeps sweeps;

    private final Transfers transfers;

    private final Underwriting underwriting;

    private final Wallets wallets;

    private final WalletTransactions walletTransactions;

    private final Avatars avatars;

    private final EndToEndEncryption endToEndEncryption;

    private final EnrichedAddress enrichedAddress;

    private final EnrichedProfile enrichedProfile;

    private final Industries industries;

    private final Institutions institutions;

    private final IssuingTransactions issuingTransactions;

    private final CardIssuing cardIssuing;

    private final Authentication authentication;

    private final Onboarding onboarding;

    private final Ping ping;

    private final Receipts receipts;

    private final TerminalApplications terminalApplications;

    public Accounts accounts() {
        return accounts;
    }

    public Adjustments adjustments() {
        return adjustments;
    }

    public ApplePay applePay() {
        return applePay;
    }

    public BankAccounts bankAccounts() {
        return bankAccounts;
    }

    public Branding branding() {
        return branding;
    }

    public Capabilities capabilities() {
        return capabilities;
    }

    public Cards cards() {
        return cards;
    }

    public Disputes disputes() {
        return disputes;
    }

    public FeePlans feePlans() {
        return feePlans;
    }

    public Files files() {
        return files;
    }

    public PaymentLinks paymentLinks() {
        return paymentLinks;
    }

    public PaymentMethods paymentMethods() {
        return paymentMethods;
    }

    public Representatives representatives() {
        return representatives;
    }

    public Scheduling scheduling() {
        return scheduling;
    }

    public Sweeps sweeps() {
        return sweeps;
    }

    public Transfers transfers() {
        return transfers;
    }

    public Underwriting underwriting() {
        return underwriting;
    }

    public Wallets wallets() {
        return wallets;
    }

    public WalletTransactions walletTransactions() {
        return walletTransactions;
    }

    public Avatars avatars() {
        return avatars;
    }

    public EndToEndEncryption endToEndEncryption() {
        return endToEndEncryption;
    }

    public EnrichedAddress enrichedAddress() {
        return enrichedAddress;
    }

    public EnrichedProfile enrichedProfile() {
        return enrichedProfile;
    }

    public Industries industries() {
        return industries;
    }

    public Institutions institutions() {
        return institutions;
    }

    public IssuingTransactions issuingTransactions() {
        return issuingTransactions;
    }

    public CardIssuing cardIssuing() {
        return cardIssuing;
    }

    public Authentication authentication() {
        return authentication;
    }

    public Onboarding onboarding() {
        return onboarding;
    }

    public Ping ping() {
        return ping;
    }

    public Receipts receipts() {
        return receipts;
    }

    public TerminalApplications terminalApplications() {
        return terminalApplications;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests.
         * @return The builder instance.
         */
        public Builder security(io.moov.sdk.models.components.Security security) {
            this.sdkConfiguration.securitySource = SecuritySource.of(security);
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.sdkConfiguration.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        /**
         * Allows setting the xMoovVersion parameter for all supported operations.
         *
         * @param xMoovVersion The value to set.
         * @return The builder instance.
         */
        public Builder xMoovVersion(String xMoovVersion) {
            if (!this.sdkConfiguration.globals.get("parameters").containsKey("header")) {
                this.sdkConfiguration.globals.get("parameters").put("header", new HashMap<>());
            }

            this.sdkConfiguration.globals.get("parameters").get("header").put("xMoovVersion", xMoovVersion);

            return this;
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(io.moov.sdk.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super io.moov.sdk.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public Moov build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new Moov(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Moov(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.accounts = new Accounts(sdkConfiguration);
        this.adjustments = new Adjustments(sdkConfiguration);
        this.applePay = new ApplePay(sdkConfiguration);
        this.bankAccounts = new BankAccounts(sdkConfiguration);
        this.branding = new Branding(sdkConfiguration);
        this.capabilities = new Capabilities(sdkConfiguration);
        this.cards = new Cards(sdkConfiguration);
        this.disputes = new Disputes(sdkConfiguration);
        this.feePlans = new FeePlans(sdkConfiguration);
        this.files = new Files(sdkConfiguration);
        this.paymentLinks = new PaymentLinks(sdkConfiguration);
        this.paymentMethods = new PaymentMethods(sdkConfiguration);
        this.representatives = new Representatives(sdkConfiguration);
        this.scheduling = new Scheduling(sdkConfiguration);
        this.sweeps = new Sweeps(sdkConfiguration);
        this.transfers = new Transfers(sdkConfiguration);
        this.underwriting = new Underwriting(sdkConfiguration);
        this.wallets = new Wallets(sdkConfiguration);
        this.walletTransactions = new WalletTransactions(sdkConfiguration);
        this.avatars = new Avatars(sdkConfiguration);
        this.endToEndEncryption = new EndToEndEncryption(sdkConfiguration);
        this.enrichedAddress = new EnrichedAddress(sdkConfiguration);
        this.enrichedProfile = new EnrichedProfile(sdkConfiguration);
        this.industries = new Industries(sdkConfiguration);
        this.institutions = new Institutions(sdkConfiguration);
        this.issuingTransactions = new IssuingTransactions(sdkConfiguration);
        this.cardIssuing = new CardIssuing(sdkConfiguration);
        this.authentication = new Authentication(sdkConfiguration);
        this.onboarding = new Onboarding(sdkConfiguration);
        this.ping = new Ping(sdkConfiguration);
        this.receipts = new Receipts(sdkConfiguration);
        this.terminalApplications = new TerminalApplications(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
