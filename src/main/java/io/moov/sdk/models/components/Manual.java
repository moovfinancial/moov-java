/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class Manual {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptedDate")
    private Optional<String> acceptedDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptedDomain")
    private Optional<String> acceptedDomain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptedIP")
    private Optional<String> acceptedIP;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptedUserAgent")
    private Optional<String> acceptedUserAgent;

    @JsonCreator
    public Manual(
            @JsonProperty("acceptedDate") Optional<String> acceptedDate,
            @JsonProperty("acceptedDomain") Optional<String> acceptedDomain,
            @JsonProperty("acceptedIP") Optional<String> acceptedIP,
            @JsonProperty("acceptedUserAgent") Optional<String> acceptedUserAgent) {
        Utils.checkNotNull(acceptedDate, "acceptedDate");
        Utils.checkNotNull(acceptedDomain, "acceptedDomain");
        Utils.checkNotNull(acceptedIP, "acceptedIP");
        Utils.checkNotNull(acceptedUserAgent, "acceptedUserAgent");
        this.acceptedDate = acceptedDate;
        this.acceptedDomain = acceptedDomain;
        this.acceptedIP = acceptedIP;
        this.acceptedUserAgent = acceptedUserAgent;
    }
    
    public Manual() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> acceptedDate() {
        return acceptedDate;
    }

    @JsonIgnore
    public Optional<String> acceptedDomain() {
        return acceptedDomain;
    }

    @JsonIgnore
    public Optional<String> acceptedIP() {
        return acceptedIP;
    }

    @JsonIgnore
    public Optional<String> acceptedUserAgent() {
        return acceptedUserAgent;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Manual withAcceptedDate(String acceptedDate) {
        Utils.checkNotNull(acceptedDate, "acceptedDate");
        this.acceptedDate = Optional.ofNullable(acceptedDate);
        return this;
    }

    public Manual withAcceptedDate(Optional<String> acceptedDate) {
        Utils.checkNotNull(acceptedDate, "acceptedDate");
        this.acceptedDate = acceptedDate;
        return this;
    }

    public Manual withAcceptedDomain(String acceptedDomain) {
        Utils.checkNotNull(acceptedDomain, "acceptedDomain");
        this.acceptedDomain = Optional.ofNullable(acceptedDomain);
        return this;
    }

    public Manual withAcceptedDomain(Optional<String> acceptedDomain) {
        Utils.checkNotNull(acceptedDomain, "acceptedDomain");
        this.acceptedDomain = acceptedDomain;
        return this;
    }

    public Manual withAcceptedIP(String acceptedIP) {
        Utils.checkNotNull(acceptedIP, "acceptedIP");
        this.acceptedIP = Optional.ofNullable(acceptedIP);
        return this;
    }

    public Manual withAcceptedIP(Optional<String> acceptedIP) {
        Utils.checkNotNull(acceptedIP, "acceptedIP");
        this.acceptedIP = acceptedIP;
        return this;
    }

    public Manual withAcceptedUserAgent(String acceptedUserAgent) {
        Utils.checkNotNull(acceptedUserAgent, "acceptedUserAgent");
        this.acceptedUserAgent = Optional.ofNullable(acceptedUserAgent);
        return this;
    }

    public Manual withAcceptedUserAgent(Optional<String> acceptedUserAgent) {
        Utils.checkNotNull(acceptedUserAgent, "acceptedUserAgent");
        this.acceptedUserAgent = acceptedUserAgent;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Manual other = (Manual) o;
        return 
            Utils.enhancedDeepEquals(this.acceptedDate, other.acceptedDate) &&
            Utils.enhancedDeepEquals(this.acceptedDomain, other.acceptedDomain) &&
            Utils.enhancedDeepEquals(this.acceptedIP, other.acceptedIP) &&
            Utils.enhancedDeepEquals(this.acceptedUserAgent, other.acceptedUserAgent);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            acceptedDate,
            acceptedDomain,
            acceptedIP,
            acceptedUserAgent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Manual.class,
                "acceptedDate", acceptedDate,
                "acceptedDomain", acceptedDomain,
                "acceptedIP", acceptedIP,
                "acceptedUserAgent", acceptedUserAgent);
    }
    
    public final static class Builder {
 
        private Optional<String> acceptedDate = Optional.empty();
 
        private Optional<String> acceptedDomain = Optional.empty();
 
        private Optional<String> acceptedIP = Optional.empty();
 
        private Optional<String> acceptedUserAgent = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder acceptedDate(String acceptedDate) {
            Utils.checkNotNull(acceptedDate, "acceptedDate");
            this.acceptedDate = Optional.ofNullable(acceptedDate);
            return this;
        }

        public Builder acceptedDate(Optional<String> acceptedDate) {
            Utils.checkNotNull(acceptedDate, "acceptedDate");
            this.acceptedDate = acceptedDate;
            return this;
        }

        public Builder acceptedDomain(String acceptedDomain) {
            Utils.checkNotNull(acceptedDomain, "acceptedDomain");
            this.acceptedDomain = Optional.ofNullable(acceptedDomain);
            return this;
        }

        public Builder acceptedDomain(Optional<String> acceptedDomain) {
            Utils.checkNotNull(acceptedDomain, "acceptedDomain");
            this.acceptedDomain = acceptedDomain;
            return this;
        }

        public Builder acceptedIP(String acceptedIP) {
            Utils.checkNotNull(acceptedIP, "acceptedIP");
            this.acceptedIP = Optional.ofNullable(acceptedIP);
            return this;
        }

        public Builder acceptedIP(Optional<String> acceptedIP) {
            Utils.checkNotNull(acceptedIP, "acceptedIP");
            this.acceptedIP = acceptedIP;
            return this;
        }

        public Builder acceptedUserAgent(String acceptedUserAgent) {
            Utils.checkNotNull(acceptedUserAgent, "acceptedUserAgent");
            this.acceptedUserAgent = Optional.ofNullable(acceptedUserAgent);
            return this;
        }

        public Builder acceptedUserAgent(Optional<String> acceptedUserAgent) {
            Utils.checkNotNull(acceptedUserAgent, "acceptedUserAgent");
            this.acceptedUserAgent = acceptedUserAgent;
            return this;
        }
        
        public Manual build() {
            return new Manual(
                acceptedDate,
                acceptedDomain,
                acceptedIP,
                acceptedUserAgent);
        }
    }
}
