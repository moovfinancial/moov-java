/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * BillingSummary
 * 
 * <p>A summary of all fees included in a statement.
 */
public class BillingSummary {
    /**
     * A summary of card acquiring volume and fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardAcquiring")
    private Optional<? extends CardAcquiring> cardAcquiring;

    /**
     * A summary of ACH volume and fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ach")
    private Optional<? extends BillingSummaryDetails> ach;

    /**
     * A summary of instant payment volume and fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instantPayments")
    private Optional<? extends BillingSummaryDetails> instantPayments;

    /**
     * The total amount of platform fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformFees")
    private Optional<? extends AmountDecimal> platformFees;

    /**
     * The total amount of adjustment fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adjustmentFees")
    private Optional<? extends AmountDecimal> adjustmentFees;

    /**
     * The total amount of other fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otherFees")
    private Optional<? extends AmountDecimal> otherFees;

    /**
     * The total amount of all fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private Optional<? extends AmountDecimal> total;

    @JsonCreator
    public BillingSummary(
            @JsonProperty("cardAcquiring") Optional<? extends CardAcquiring> cardAcquiring,
            @JsonProperty("ach") Optional<? extends BillingSummaryDetails> ach,
            @JsonProperty("instantPayments") Optional<? extends BillingSummaryDetails> instantPayments,
            @JsonProperty("platformFees") Optional<? extends AmountDecimal> platformFees,
            @JsonProperty("adjustmentFees") Optional<? extends AmountDecimal> adjustmentFees,
            @JsonProperty("otherFees") Optional<? extends AmountDecimal> otherFees,
            @JsonProperty("total") Optional<? extends AmountDecimal> total) {
        Utils.checkNotNull(cardAcquiring, "cardAcquiring");
        Utils.checkNotNull(ach, "ach");
        Utils.checkNotNull(instantPayments, "instantPayments");
        Utils.checkNotNull(platformFees, "platformFees");
        Utils.checkNotNull(adjustmentFees, "adjustmentFees");
        Utils.checkNotNull(otherFees, "otherFees");
        Utils.checkNotNull(total, "total");
        this.cardAcquiring = cardAcquiring;
        this.ach = ach;
        this.instantPayments = instantPayments;
        this.platformFees = platformFees;
        this.adjustmentFees = adjustmentFees;
        this.otherFees = otherFees;
        this.total = total;
    }
    
    public BillingSummary() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * A summary of card acquiring volume and fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CardAcquiring> cardAcquiring() {
        return (Optional<CardAcquiring>) cardAcquiring;
    }

    /**
     * A summary of ACH volume and fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingSummaryDetails> ach() {
        return (Optional<BillingSummaryDetails>) ach;
    }

    /**
     * A summary of instant payment volume and fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingSummaryDetails> instantPayments() {
        return (Optional<BillingSummaryDetails>) instantPayments;
    }

    /**
     * The total amount of platform fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimal> platformFees() {
        return (Optional<AmountDecimal>) platformFees;
    }

    /**
     * The total amount of adjustment fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimal> adjustmentFees() {
        return (Optional<AmountDecimal>) adjustmentFees;
    }

    /**
     * The total amount of other fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimal> otherFees() {
        return (Optional<AmountDecimal>) otherFees;
    }

    /**
     * The total amount of all fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimal> total() {
        return (Optional<AmountDecimal>) total;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A summary of card acquiring volume and fees.
     */
    public BillingSummary withCardAcquiring(CardAcquiring cardAcquiring) {
        Utils.checkNotNull(cardAcquiring, "cardAcquiring");
        this.cardAcquiring = Optional.ofNullable(cardAcquiring);
        return this;
    }


    /**
     * A summary of card acquiring volume and fees.
     */
    public BillingSummary withCardAcquiring(Optional<? extends CardAcquiring> cardAcquiring) {
        Utils.checkNotNull(cardAcquiring, "cardAcquiring");
        this.cardAcquiring = cardAcquiring;
        return this;
    }

    /**
     * A summary of ACH volume and fees.
     */
    public BillingSummary withAch(BillingSummaryDetails ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = Optional.ofNullable(ach);
        return this;
    }


    /**
     * A summary of ACH volume and fees.
     */
    public BillingSummary withAch(Optional<? extends BillingSummaryDetails> ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = ach;
        return this;
    }

    /**
     * A summary of instant payment volume and fees.
     */
    public BillingSummary withInstantPayments(BillingSummaryDetails instantPayments) {
        Utils.checkNotNull(instantPayments, "instantPayments");
        this.instantPayments = Optional.ofNullable(instantPayments);
        return this;
    }


    /**
     * A summary of instant payment volume and fees.
     */
    public BillingSummary withInstantPayments(Optional<? extends BillingSummaryDetails> instantPayments) {
        Utils.checkNotNull(instantPayments, "instantPayments");
        this.instantPayments = instantPayments;
        return this;
    }

    /**
     * The total amount of platform fees.
     */
    public BillingSummary withPlatformFees(AmountDecimal platformFees) {
        Utils.checkNotNull(platformFees, "platformFees");
        this.platformFees = Optional.ofNullable(platformFees);
        return this;
    }


    /**
     * The total amount of platform fees.
     */
    public BillingSummary withPlatformFees(Optional<? extends AmountDecimal> platformFees) {
        Utils.checkNotNull(platformFees, "platformFees");
        this.platformFees = platformFees;
        return this;
    }

    /**
     * The total amount of adjustment fees.
     */
    public BillingSummary withAdjustmentFees(AmountDecimal adjustmentFees) {
        Utils.checkNotNull(adjustmentFees, "adjustmentFees");
        this.adjustmentFees = Optional.ofNullable(adjustmentFees);
        return this;
    }


    /**
     * The total amount of adjustment fees.
     */
    public BillingSummary withAdjustmentFees(Optional<? extends AmountDecimal> adjustmentFees) {
        Utils.checkNotNull(adjustmentFees, "adjustmentFees");
        this.adjustmentFees = adjustmentFees;
        return this;
    }

    /**
     * The total amount of other fees.
     */
    public BillingSummary withOtherFees(AmountDecimal otherFees) {
        Utils.checkNotNull(otherFees, "otherFees");
        this.otherFees = Optional.ofNullable(otherFees);
        return this;
    }


    /**
     * The total amount of other fees.
     */
    public BillingSummary withOtherFees(Optional<? extends AmountDecimal> otherFees) {
        Utils.checkNotNull(otherFees, "otherFees");
        this.otherFees = otherFees;
        return this;
    }

    /**
     * The total amount of all fees.
     */
    public BillingSummary withTotal(AmountDecimal total) {
        Utils.checkNotNull(total, "total");
        this.total = Optional.ofNullable(total);
        return this;
    }


    /**
     * The total amount of all fees.
     */
    public BillingSummary withTotal(Optional<? extends AmountDecimal> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillingSummary other = (BillingSummary) o;
        return 
            Utils.enhancedDeepEquals(this.cardAcquiring, other.cardAcquiring) &&
            Utils.enhancedDeepEquals(this.ach, other.ach) &&
            Utils.enhancedDeepEquals(this.instantPayments, other.instantPayments) &&
            Utils.enhancedDeepEquals(this.platformFees, other.platformFees) &&
            Utils.enhancedDeepEquals(this.adjustmentFees, other.adjustmentFees) &&
            Utils.enhancedDeepEquals(this.otherFees, other.otherFees) &&
            Utils.enhancedDeepEquals(this.total, other.total);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            cardAcquiring, ach, instantPayments,
            platformFees, adjustmentFees, otherFees,
            total);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillingSummary.class,
                "cardAcquiring", cardAcquiring,
                "ach", ach,
                "instantPayments", instantPayments,
                "platformFees", platformFees,
                "adjustmentFees", adjustmentFees,
                "otherFees", otherFees,
                "total", total);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends CardAcquiring> cardAcquiring = Optional.empty();

        private Optional<? extends BillingSummaryDetails> ach = Optional.empty();

        private Optional<? extends BillingSummaryDetails> instantPayments = Optional.empty();

        private Optional<? extends AmountDecimal> platformFees = Optional.empty();

        private Optional<? extends AmountDecimal> adjustmentFees = Optional.empty();

        private Optional<? extends AmountDecimal> otherFees = Optional.empty();

        private Optional<? extends AmountDecimal> total = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A summary of card acquiring volume and fees.
         */
        public Builder cardAcquiring(CardAcquiring cardAcquiring) {
            Utils.checkNotNull(cardAcquiring, "cardAcquiring");
            this.cardAcquiring = Optional.ofNullable(cardAcquiring);
            return this;
        }

        /**
         * A summary of card acquiring volume and fees.
         */
        public Builder cardAcquiring(Optional<? extends CardAcquiring> cardAcquiring) {
            Utils.checkNotNull(cardAcquiring, "cardAcquiring");
            this.cardAcquiring = cardAcquiring;
            return this;
        }


        /**
         * A summary of ACH volume and fees.
         */
        public Builder ach(BillingSummaryDetails ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = Optional.ofNullable(ach);
            return this;
        }

        /**
         * A summary of ACH volume and fees.
         */
        public Builder ach(Optional<? extends BillingSummaryDetails> ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = ach;
            return this;
        }


        /**
         * A summary of instant payment volume and fees.
         */
        public Builder instantPayments(BillingSummaryDetails instantPayments) {
            Utils.checkNotNull(instantPayments, "instantPayments");
            this.instantPayments = Optional.ofNullable(instantPayments);
            return this;
        }

        /**
         * A summary of instant payment volume and fees.
         */
        public Builder instantPayments(Optional<? extends BillingSummaryDetails> instantPayments) {
            Utils.checkNotNull(instantPayments, "instantPayments");
            this.instantPayments = instantPayments;
            return this;
        }


        /**
         * The total amount of platform fees.
         */
        public Builder platformFees(AmountDecimal platformFees) {
            Utils.checkNotNull(platformFees, "platformFees");
            this.platformFees = Optional.ofNullable(platformFees);
            return this;
        }

        /**
         * The total amount of platform fees.
         */
        public Builder platformFees(Optional<? extends AmountDecimal> platformFees) {
            Utils.checkNotNull(platformFees, "platformFees");
            this.platformFees = platformFees;
            return this;
        }


        /**
         * The total amount of adjustment fees.
         */
        public Builder adjustmentFees(AmountDecimal adjustmentFees) {
            Utils.checkNotNull(adjustmentFees, "adjustmentFees");
            this.adjustmentFees = Optional.ofNullable(adjustmentFees);
            return this;
        }

        /**
         * The total amount of adjustment fees.
         */
        public Builder adjustmentFees(Optional<? extends AmountDecimal> adjustmentFees) {
            Utils.checkNotNull(adjustmentFees, "adjustmentFees");
            this.adjustmentFees = adjustmentFees;
            return this;
        }


        /**
         * The total amount of other fees.
         */
        public Builder otherFees(AmountDecimal otherFees) {
            Utils.checkNotNull(otherFees, "otherFees");
            this.otherFees = Optional.ofNullable(otherFees);
            return this;
        }

        /**
         * The total amount of other fees.
         */
        public Builder otherFees(Optional<? extends AmountDecimal> otherFees) {
            Utils.checkNotNull(otherFees, "otherFees");
            this.otherFees = otherFees;
            return this;
        }


        /**
         * The total amount of all fees.
         */
        public Builder total(AmountDecimal total) {
            Utils.checkNotNull(total, "total");
            this.total = Optional.ofNullable(total);
            return this;
        }

        /**
         * The total amount of all fees.
         */
        public Builder total(Optional<? extends AmountDecimal> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        public BillingSummary build() {

            return new BillingSummary(
                cardAcquiring, ach, instantPayments,
                platformFees, adjustmentFees, otherFees,
                total);
        }

    }
}
