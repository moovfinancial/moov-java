/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class AmountDecimalValidationError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valueDecimal")
    private Optional<String> valueDecimal;

    @JsonCreator
    public AmountDecimalValidationError(
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("valueDecimal") Optional<String> valueDecimal) {
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(valueDecimal, "valueDecimal");
        this.currency = currency;
        this.valueDecimal = valueDecimal;
    }
    
    public AmountDecimalValidationError() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<String> valueDecimal() {
        return valueDecimal;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AmountDecimalValidationError withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public AmountDecimalValidationError withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AmountDecimalValidationError withValueDecimal(String valueDecimal) {
        Utils.checkNotNull(valueDecimal, "valueDecimal");
        this.valueDecimal = Optional.ofNullable(valueDecimal);
        return this;
    }


    public AmountDecimalValidationError withValueDecimal(Optional<String> valueDecimal) {
        Utils.checkNotNull(valueDecimal, "valueDecimal");
        this.valueDecimal = valueDecimal;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AmountDecimalValidationError other = (AmountDecimalValidationError) o;
        return 
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.valueDecimal, other.valueDecimal);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            currency, valueDecimal);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AmountDecimalValidationError.class,
                "currency", currency,
                "valueDecimal", valueDecimal);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> currency = Optional.empty();

        private Optional<String> valueDecimal = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder valueDecimal(String valueDecimal) {
            Utils.checkNotNull(valueDecimal, "valueDecimal");
            this.valueDecimal = Optional.ofNullable(valueDecimal);
            return this;
        }

        public Builder valueDecimal(Optional<String> valueDecimal) {
            Utils.checkNotNull(valueDecimal, "valueDecimal");
            this.valueDecimal = valueDecimal;
            return this;
        }

        public AmountDecimalValidationError build() {

            return new AmountDecimalValidationError(
                currency, valueDecimal);
        }

    }
}
