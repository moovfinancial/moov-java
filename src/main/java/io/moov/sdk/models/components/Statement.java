/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Statement
 * 
 * <p>A billing statement for a Moov account.
 */
public class Statement {
    /**
     * The unique identifier for the statement.
     */
    @JsonProperty("statementID")
    private String statementID;

    /**
     * The name of the statement.
     */
    @JsonProperty("statementName")
    private String statementName;

    /**
     * The name of the statement file.
     */
    @JsonProperty("fileName")
    private String fileName;

    /**
     * The size of the statement file in bytes.
     */
    @JsonProperty("fileSize")
    private long fileSize;

    /**
     * The start date and time of the billing period.
     */
    @JsonProperty("billingPeriodStartDateTime")
    private OffsetDateTime billingPeriodStartDateTime;

    /**
     * The end date and time of the billing period.
     */
    @JsonProperty("billingPeriodEndDateTime")
    private OffsetDateTime billingPeriodEndDateTime;

    /**
     * List of subscription IDs associated with this statement.
     */
    @JsonProperty("subscriptionIDs")
    private List<String> subscriptionIDs;

    /**
     * A summary of all fees included in this statement.
     */
    @JsonProperty("summary")
    private BillingSummary summary;

    /**
     * A detailed breakdown of card acquiring fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardAcquiringFees")
    private Optional<? extends CardAcquiringFees> cardAcquiringFees;

    /**
     * A detailed breakdown of ACH fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("achFees")
    private Optional<? extends ACHFees> achFees;

    /**
     * A detailed breakdown of instant payment fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instantPaymentFees")
    private Optional<? extends InstantPaymentFees> instantPaymentFees;

    /**
     * A detailed breakdown of platform fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformFees")
    private Optional<? extends PlatformFees> platformFees;

    /**
     * A detailed breakdown of other card-related fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otherCardFees")
    private Optional<? extends OtherCardFees> otherCardFees;

    /**
     * The date and time the statement was created.
     */
    @JsonProperty("createdOn")
    private OffsetDateTime createdOn;

    /**
     * The date and time the statement was last updated.
     */
    @JsonProperty("updatedOn")
    private OffsetDateTime updatedOn;

    @JsonCreator
    public Statement(
            @JsonProperty("statementID") String statementID,
            @JsonProperty("statementName") String statementName,
            @JsonProperty("fileName") String fileName,
            @JsonProperty("fileSize") long fileSize,
            @JsonProperty("billingPeriodStartDateTime") OffsetDateTime billingPeriodStartDateTime,
            @JsonProperty("billingPeriodEndDateTime") OffsetDateTime billingPeriodEndDateTime,
            @JsonProperty("subscriptionIDs") List<String> subscriptionIDs,
            @JsonProperty("summary") BillingSummary summary,
            @JsonProperty("cardAcquiringFees") Optional<? extends CardAcquiringFees> cardAcquiringFees,
            @JsonProperty("achFees") Optional<? extends ACHFees> achFees,
            @JsonProperty("instantPaymentFees") Optional<? extends InstantPaymentFees> instantPaymentFees,
            @JsonProperty("platformFees") Optional<? extends PlatformFees> platformFees,
            @JsonProperty("otherCardFees") Optional<? extends OtherCardFees> otherCardFees,
            @JsonProperty("createdOn") OffsetDateTime createdOn,
            @JsonProperty("updatedOn") OffsetDateTime updatedOn) {
        Utils.checkNotNull(statementID, "statementID");
        Utils.checkNotNull(statementName, "statementName");
        Utils.checkNotNull(fileName, "fileName");
        Utils.checkNotNull(fileSize, "fileSize");
        Utils.checkNotNull(billingPeriodStartDateTime, "billingPeriodStartDateTime");
        Utils.checkNotNull(billingPeriodEndDateTime, "billingPeriodEndDateTime");
        Utils.checkNotNull(subscriptionIDs, "subscriptionIDs");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(cardAcquiringFees, "cardAcquiringFees");
        Utils.checkNotNull(achFees, "achFees");
        Utils.checkNotNull(instantPaymentFees, "instantPaymentFees");
        Utils.checkNotNull(platformFees, "platformFees");
        Utils.checkNotNull(otherCardFees, "otherCardFees");
        Utils.checkNotNull(createdOn, "createdOn");
        Utils.checkNotNull(updatedOn, "updatedOn");
        this.statementID = statementID;
        this.statementName = statementName;
        this.fileName = fileName;
        this.fileSize = fileSize;
        this.billingPeriodStartDateTime = billingPeriodStartDateTime;
        this.billingPeriodEndDateTime = billingPeriodEndDateTime;
        this.subscriptionIDs = subscriptionIDs;
        this.summary = summary;
        this.cardAcquiringFees = cardAcquiringFees;
        this.achFees = achFees;
        this.instantPaymentFees = instantPaymentFees;
        this.platformFees = platformFees;
        this.otherCardFees = otherCardFees;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }
    
    public Statement(
            String statementID,
            String statementName,
            String fileName,
            long fileSize,
            OffsetDateTime billingPeriodStartDateTime,
            OffsetDateTime billingPeriodEndDateTime,
            List<String> subscriptionIDs,
            BillingSummary summary,
            OffsetDateTime createdOn,
            OffsetDateTime updatedOn) {
        this(statementID, statementName, fileName,
            fileSize, billingPeriodStartDateTime, billingPeriodEndDateTime,
            subscriptionIDs, summary, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), createdOn, updatedOn);
    }

    /**
     * The unique identifier for the statement.
     */
    @JsonIgnore
    public String statementID() {
        return statementID;
    }

    /**
     * The name of the statement.
     */
    @JsonIgnore
    public String statementName() {
        return statementName;
    }

    /**
     * The name of the statement file.
     */
    @JsonIgnore
    public String fileName() {
        return fileName;
    }

    /**
     * The size of the statement file in bytes.
     */
    @JsonIgnore
    public long fileSize() {
        return fileSize;
    }

    /**
     * The start date and time of the billing period.
     */
    @JsonIgnore
    public OffsetDateTime billingPeriodStartDateTime() {
        return billingPeriodStartDateTime;
    }

    /**
     * The end date and time of the billing period.
     */
    @JsonIgnore
    public OffsetDateTime billingPeriodEndDateTime() {
        return billingPeriodEndDateTime;
    }

    /**
     * List of subscription IDs associated with this statement.
     */
    @JsonIgnore
    public List<String> subscriptionIDs() {
        return subscriptionIDs;
    }

    /**
     * A summary of all fees included in this statement.
     */
    @JsonIgnore
    public BillingSummary summary() {
        return summary;
    }

    /**
     * A detailed breakdown of card acquiring fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CardAcquiringFees> cardAcquiringFees() {
        return (Optional<CardAcquiringFees>) cardAcquiringFees;
    }

    /**
     * A detailed breakdown of ACH fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ACHFees> achFees() {
        return (Optional<ACHFees>) achFees;
    }

    /**
     * A detailed breakdown of instant payment fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InstantPaymentFees> instantPaymentFees() {
        return (Optional<InstantPaymentFees>) instantPaymentFees;
    }

    /**
     * A detailed breakdown of platform fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PlatformFees> platformFees() {
        return (Optional<PlatformFees>) platformFees;
    }

    /**
     * A detailed breakdown of other card-related fees.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OtherCardFees> otherCardFees() {
        return (Optional<OtherCardFees>) otherCardFees;
    }

    /**
     * The date and time the statement was created.
     */
    @JsonIgnore
    public OffsetDateTime createdOn() {
        return createdOn;
    }

    /**
     * The date and time the statement was last updated.
     */
    @JsonIgnore
    public OffsetDateTime updatedOn() {
        return updatedOn;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier for the statement.
     */
    public Statement withStatementID(String statementID) {
        Utils.checkNotNull(statementID, "statementID");
        this.statementID = statementID;
        return this;
    }

    /**
     * The name of the statement.
     */
    public Statement withStatementName(String statementName) {
        Utils.checkNotNull(statementName, "statementName");
        this.statementName = statementName;
        return this;
    }

    /**
     * The name of the statement file.
     */
    public Statement withFileName(String fileName) {
        Utils.checkNotNull(fileName, "fileName");
        this.fileName = fileName;
        return this;
    }

    /**
     * The size of the statement file in bytes.
     */
    public Statement withFileSize(long fileSize) {
        Utils.checkNotNull(fileSize, "fileSize");
        this.fileSize = fileSize;
        return this;
    }

    /**
     * The start date and time of the billing period.
     */
    public Statement withBillingPeriodStartDateTime(OffsetDateTime billingPeriodStartDateTime) {
        Utils.checkNotNull(billingPeriodStartDateTime, "billingPeriodStartDateTime");
        this.billingPeriodStartDateTime = billingPeriodStartDateTime;
        return this;
    }

    /**
     * The end date and time of the billing period.
     */
    public Statement withBillingPeriodEndDateTime(OffsetDateTime billingPeriodEndDateTime) {
        Utils.checkNotNull(billingPeriodEndDateTime, "billingPeriodEndDateTime");
        this.billingPeriodEndDateTime = billingPeriodEndDateTime;
        return this;
    }

    /**
     * List of subscription IDs associated with this statement.
     */
    public Statement withSubscriptionIDs(List<String> subscriptionIDs) {
        Utils.checkNotNull(subscriptionIDs, "subscriptionIDs");
        this.subscriptionIDs = subscriptionIDs;
        return this;
    }

    /**
     * A summary of all fees included in this statement.
     */
    public Statement withSummary(BillingSummary summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    /**
     * A detailed breakdown of card acquiring fees.
     */
    public Statement withCardAcquiringFees(CardAcquiringFees cardAcquiringFees) {
        Utils.checkNotNull(cardAcquiringFees, "cardAcquiringFees");
        this.cardAcquiringFees = Optional.ofNullable(cardAcquiringFees);
        return this;
    }


    /**
     * A detailed breakdown of card acquiring fees.
     */
    public Statement withCardAcquiringFees(Optional<? extends CardAcquiringFees> cardAcquiringFees) {
        Utils.checkNotNull(cardAcquiringFees, "cardAcquiringFees");
        this.cardAcquiringFees = cardAcquiringFees;
        return this;
    }

    /**
     * A detailed breakdown of ACH fees.
     */
    public Statement withAchFees(ACHFees achFees) {
        Utils.checkNotNull(achFees, "achFees");
        this.achFees = Optional.ofNullable(achFees);
        return this;
    }


    /**
     * A detailed breakdown of ACH fees.
     */
    public Statement withAchFees(Optional<? extends ACHFees> achFees) {
        Utils.checkNotNull(achFees, "achFees");
        this.achFees = achFees;
        return this;
    }

    /**
     * A detailed breakdown of instant payment fees.
     */
    public Statement withInstantPaymentFees(InstantPaymentFees instantPaymentFees) {
        Utils.checkNotNull(instantPaymentFees, "instantPaymentFees");
        this.instantPaymentFees = Optional.ofNullable(instantPaymentFees);
        return this;
    }


    /**
     * A detailed breakdown of instant payment fees.
     */
    public Statement withInstantPaymentFees(Optional<? extends InstantPaymentFees> instantPaymentFees) {
        Utils.checkNotNull(instantPaymentFees, "instantPaymentFees");
        this.instantPaymentFees = instantPaymentFees;
        return this;
    }

    /**
     * A detailed breakdown of platform fees.
     */
    public Statement withPlatformFees(PlatformFees platformFees) {
        Utils.checkNotNull(platformFees, "platformFees");
        this.platformFees = Optional.ofNullable(platformFees);
        return this;
    }


    /**
     * A detailed breakdown of platform fees.
     */
    public Statement withPlatformFees(Optional<? extends PlatformFees> platformFees) {
        Utils.checkNotNull(platformFees, "platformFees");
        this.platformFees = platformFees;
        return this;
    }

    /**
     * A detailed breakdown of other card-related fees.
     */
    public Statement withOtherCardFees(OtherCardFees otherCardFees) {
        Utils.checkNotNull(otherCardFees, "otherCardFees");
        this.otherCardFees = Optional.ofNullable(otherCardFees);
        return this;
    }


    /**
     * A detailed breakdown of other card-related fees.
     */
    public Statement withOtherCardFees(Optional<? extends OtherCardFees> otherCardFees) {
        Utils.checkNotNull(otherCardFees, "otherCardFees");
        this.otherCardFees = otherCardFees;
        return this;
    }

    /**
     * The date and time the statement was created.
     */
    public Statement withCreatedOn(OffsetDateTime createdOn) {
        Utils.checkNotNull(createdOn, "createdOn");
        this.createdOn = createdOn;
        return this;
    }

    /**
     * The date and time the statement was last updated.
     */
    public Statement withUpdatedOn(OffsetDateTime updatedOn) {
        Utils.checkNotNull(updatedOn, "updatedOn");
        this.updatedOn = updatedOn;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Statement other = (Statement) o;
        return 
            Utils.enhancedDeepEquals(this.statementID, other.statementID) &&
            Utils.enhancedDeepEquals(this.statementName, other.statementName) &&
            Utils.enhancedDeepEquals(this.fileName, other.fileName) &&
            Utils.enhancedDeepEquals(this.fileSize, other.fileSize) &&
            Utils.enhancedDeepEquals(this.billingPeriodStartDateTime, other.billingPeriodStartDateTime) &&
            Utils.enhancedDeepEquals(this.billingPeriodEndDateTime, other.billingPeriodEndDateTime) &&
            Utils.enhancedDeepEquals(this.subscriptionIDs, other.subscriptionIDs) &&
            Utils.enhancedDeepEquals(this.summary, other.summary) &&
            Utils.enhancedDeepEquals(this.cardAcquiringFees, other.cardAcquiringFees) &&
            Utils.enhancedDeepEquals(this.achFees, other.achFees) &&
            Utils.enhancedDeepEquals(this.instantPaymentFees, other.instantPaymentFees) &&
            Utils.enhancedDeepEquals(this.platformFees, other.platformFees) &&
            Utils.enhancedDeepEquals(this.otherCardFees, other.otherCardFees) &&
            Utils.enhancedDeepEquals(this.createdOn, other.createdOn) &&
            Utils.enhancedDeepEquals(this.updatedOn, other.updatedOn);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            statementID, statementName, fileName,
            fileSize, billingPeriodStartDateTime, billingPeriodEndDateTime,
            subscriptionIDs, summary, cardAcquiringFees,
            achFees, instantPaymentFees, platformFees,
            otherCardFees, createdOn, updatedOn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Statement.class,
                "statementID", statementID,
                "statementName", statementName,
                "fileName", fileName,
                "fileSize", fileSize,
                "billingPeriodStartDateTime", billingPeriodStartDateTime,
                "billingPeriodEndDateTime", billingPeriodEndDateTime,
                "subscriptionIDs", subscriptionIDs,
                "summary", summary,
                "cardAcquiringFees", cardAcquiringFees,
                "achFees", achFees,
                "instantPaymentFees", instantPaymentFees,
                "platformFees", platformFees,
                "otherCardFees", otherCardFees,
                "createdOn", createdOn,
                "updatedOn", updatedOn);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String statementID;

        private String statementName;

        private String fileName;

        private Long fileSize;

        private OffsetDateTime billingPeriodStartDateTime;

        private OffsetDateTime billingPeriodEndDateTime;

        private List<String> subscriptionIDs;

        private BillingSummary summary;

        private Optional<? extends CardAcquiringFees> cardAcquiringFees = Optional.empty();

        private Optional<? extends ACHFees> achFees = Optional.empty();

        private Optional<? extends InstantPaymentFees> instantPaymentFees = Optional.empty();

        private Optional<? extends PlatformFees> platformFees = Optional.empty();

        private Optional<? extends OtherCardFees> otherCardFees = Optional.empty();

        private OffsetDateTime createdOn;

        private OffsetDateTime updatedOn;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier for the statement.
         */
        public Builder statementID(String statementID) {
            Utils.checkNotNull(statementID, "statementID");
            this.statementID = statementID;
            return this;
        }


        /**
         * The name of the statement.
         */
        public Builder statementName(String statementName) {
            Utils.checkNotNull(statementName, "statementName");
            this.statementName = statementName;
            return this;
        }


        /**
         * The name of the statement file.
         */
        public Builder fileName(String fileName) {
            Utils.checkNotNull(fileName, "fileName");
            this.fileName = fileName;
            return this;
        }


        /**
         * The size of the statement file in bytes.
         */
        public Builder fileSize(long fileSize) {
            Utils.checkNotNull(fileSize, "fileSize");
            this.fileSize = fileSize;
            return this;
        }


        /**
         * The start date and time of the billing period.
         */
        public Builder billingPeriodStartDateTime(OffsetDateTime billingPeriodStartDateTime) {
            Utils.checkNotNull(billingPeriodStartDateTime, "billingPeriodStartDateTime");
            this.billingPeriodStartDateTime = billingPeriodStartDateTime;
            return this;
        }


        /**
         * The end date and time of the billing period.
         */
        public Builder billingPeriodEndDateTime(OffsetDateTime billingPeriodEndDateTime) {
            Utils.checkNotNull(billingPeriodEndDateTime, "billingPeriodEndDateTime");
            this.billingPeriodEndDateTime = billingPeriodEndDateTime;
            return this;
        }


        /**
         * List of subscription IDs associated with this statement.
         */
        public Builder subscriptionIDs(List<String> subscriptionIDs) {
            Utils.checkNotNull(subscriptionIDs, "subscriptionIDs");
            this.subscriptionIDs = subscriptionIDs;
            return this;
        }


        /**
         * A summary of all fees included in this statement.
         */
        public Builder summary(BillingSummary summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }


        /**
         * A detailed breakdown of card acquiring fees.
         */
        public Builder cardAcquiringFees(CardAcquiringFees cardAcquiringFees) {
            Utils.checkNotNull(cardAcquiringFees, "cardAcquiringFees");
            this.cardAcquiringFees = Optional.ofNullable(cardAcquiringFees);
            return this;
        }

        /**
         * A detailed breakdown of card acquiring fees.
         */
        public Builder cardAcquiringFees(Optional<? extends CardAcquiringFees> cardAcquiringFees) {
            Utils.checkNotNull(cardAcquiringFees, "cardAcquiringFees");
            this.cardAcquiringFees = cardAcquiringFees;
            return this;
        }


        /**
         * A detailed breakdown of ACH fees.
         */
        public Builder achFees(ACHFees achFees) {
            Utils.checkNotNull(achFees, "achFees");
            this.achFees = Optional.ofNullable(achFees);
            return this;
        }

        /**
         * A detailed breakdown of ACH fees.
         */
        public Builder achFees(Optional<? extends ACHFees> achFees) {
            Utils.checkNotNull(achFees, "achFees");
            this.achFees = achFees;
            return this;
        }


        /**
         * A detailed breakdown of instant payment fees.
         */
        public Builder instantPaymentFees(InstantPaymentFees instantPaymentFees) {
            Utils.checkNotNull(instantPaymentFees, "instantPaymentFees");
            this.instantPaymentFees = Optional.ofNullable(instantPaymentFees);
            return this;
        }

        /**
         * A detailed breakdown of instant payment fees.
         */
        public Builder instantPaymentFees(Optional<? extends InstantPaymentFees> instantPaymentFees) {
            Utils.checkNotNull(instantPaymentFees, "instantPaymentFees");
            this.instantPaymentFees = instantPaymentFees;
            return this;
        }


        /**
         * A detailed breakdown of platform fees.
         */
        public Builder platformFees(PlatformFees platformFees) {
            Utils.checkNotNull(platformFees, "platformFees");
            this.platformFees = Optional.ofNullable(platformFees);
            return this;
        }

        /**
         * A detailed breakdown of platform fees.
         */
        public Builder platformFees(Optional<? extends PlatformFees> platformFees) {
            Utils.checkNotNull(platformFees, "platformFees");
            this.platformFees = platformFees;
            return this;
        }


        /**
         * A detailed breakdown of other card-related fees.
         */
        public Builder otherCardFees(OtherCardFees otherCardFees) {
            Utils.checkNotNull(otherCardFees, "otherCardFees");
            this.otherCardFees = Optional.ofNullable(otherCardFees);
            return this;
        }

        /**
         * A detailed breakdown of other card-related fees.
         */
        public Builder otherCardFees(Optional<? extends OtherCardFees> otherCardFees) {
            Utils.checkNotNull(otherCardFees, "otherCardFees");
            this.otherCardFees = otherCardFees;
            return this;
        }


        /**
         * The date and time the statement was created.
         */
        public Builder createdOn(OffsetDateTime createdOn) {
            Utils.checkNotNull(createdOn, "createdOn");
            this.createdOn = createdOn;
            return this;
        }


        /**
         * The date and time the statement was last updated.
         */
        public Builder updatedOn(OffsetDateTime updatedOn) {
            Utils.checkNotNull(updatedOn, "updatedOn");
            this.updatedOn = updatedOn;
            return this;
        }

        public Statement build() {

            return new Statement(
                statementID, statementName, fileName,
                fileSize, billingPeriodStartDateTime, billingPeriodEndDateTime,
                subscriptionIDs, summary, cardAcquiringFees,
                achFees, instantPaymentFees, platformFees,
                otherCardFees, createdOn, updatedOn);
        }

    }
}
