/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SendFundsError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ach")
    private Optional<? extends SendFundsAchError> ach;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushToCard")
    private Optional<? extends SendFundsPushToCardError> pushToCard;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rtp")
    private Optional<? extends SendFundsRtpError> rtp;

    @JsonCreator
    public SendFundsError(
            @JsonProperty("ach") Optional<? extends SendFundsAchError> ach,
            @JsonProperty("pushToCard") Optional<? extends SendFundsPushToCardError> pushToCard,
            @JsonProperty("rtp") Optional<? extends SendFundsRtpError> rtp) {
        Utils.checkNotNull(ach, "ach");
        Utils.checkNotNull(pushToCard, "pushToCard");
        Utils.checkNotNull(rtp, "rtp");
        this.ach = ach;
        this.pushToCard = pushToCard;
        this.rtp = rtp;
    }
    
    public SendFundsError() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SendFundsAchError> ach() {
        return (Optional<SendFundsAchError>) ach;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SendFundsPushToCardError> pushToCard() {
        return (Optional<SendFundsPushToCardError>) pushToCard;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SendFundsRtpError> rtp() {
        return (Optional<SendFundsRtpError>) rtp;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SendFundsError withAch(SendFundsAchError ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = Optional.ofNullable(ach);
        return this;
    }

    public SendFundsError withAch(Optional<? extends SendFundsAchError> ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = ach;
        return this;
    }

    public SendFundsError withPushToCard(SendFundsPushToCardError pushToCard) {
        Utils.checkNotNull(pushToCard, "pushToCard");
        this.pushToCard = Optional.ofNullable(pushToCard);
        return this;
    }

    public SendFundsError withPushToCard(Optional<? extends SendFundsPushToCardError> pushToCard) {
        Utils.checkNotNull(pushToCard, "pushToCard");
        this.pushToCard = pushToCard;
        return this;
    }

    public SendFundsError withRtp(SendFundsRtpError rtp) {
        Utils.checkNotNull(rtp, "rtp");
        this.rtp = Optional.ofNullable(rtp);
        return this;
    }

    public SendFundsError withRtp(Optional<? extends SendFundsRtpError> rtp) {
        Utils.checkNotNull(rtp, "rtp");
        this.rtp = rtp;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SendFundsError other = (SendFundsError) o;
        return 
            Objects.deepEquals(this.ach, other.ach) &&
            Objects.deepEquals(this.pushToCard, other.pushToCard) &&
            Objects.deepEquals(this.rtp, other.rtp);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ach,
            pushToCard,
            rtp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SendFundsError.class,
                "ach", ach,
                "pushToCard", pushToCard,
                "rtp", rtp);
    }
    
    public final static class Builder {
 
        private Optional<? extends SendFundsAchError> ach = Optional.empty();
 
        private Optional<? extends SendFundsPushToCardError> pushToCard = Optional.empty();
 
        private Optional<? extends SendFundsRtpError> rtp = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ach(SendFundsAchError ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = Optional.ofNullable(ach);
            return this;
        }

        public Builder ach(Optional<? extends SendFundsAchError> ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = ach;
            return this;
        }

        public Builder pushToCard(SendFundsPushToCardError pushToCard) {
            Utils.checkNotNull(pushToCard, "pushToCard");
            this.pushToCard = Optional.ofNullable(pushToCard);
            return this;
        }

        public Builder pushToCard(Optional<? extends SendFundsPushToCardError> pushToCard) {
            Utils.checkNotNull(pushToCard, "pushToCard");
            this.pushToCard = pushToCard;
            return this;
        }

        public Builder rtp(SendFundsRtpError rtp) {
            Utils.checkNotNull(rtp, "rtp");
            this.rtp = Optional.ofNullable(rtp);
            return this;
        }

        public Builder rtp(Optional<? extends SendFundsRtpError> rtp) {
            Utils.checkNotNull(rtp, "rtp");
            this.rtp = rtp;
            return this;
        }
        
        public SendFundsError build() {
            return new SendFundsError(
                ach,
                pushToCard,
                rtp);
        }
    }
}
