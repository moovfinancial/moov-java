/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class ReversedWithRefund {

    /**
     * Details of a card refund.
     */
    @JsonProperty("refund")
    private CardAcquiringRefund refund;

    @JsonCreator
    public ReversedWithRefund(
            @JsonProperty("refund") CardAcquiringRefund refund) {
        Utils.checkNotNull(refund, "refund");
        this.refund = refund;
    }

    /**
     * Details of a card refund.
     */
    @JsonIgnore
    public CardAcquiringRefund refund() {
        return refund;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Details of a card refund.
     */
    public ReversedWithRefund withRefund(CardAcquiringRefund refund) {
        Utils.checkNotNull(refund, "refund");
        this.refund = refund;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReversedWithRefund other = (ReversedWithRefund) o;
        return 
            Objects.deepEquals(this.refund, other.refund);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            refund);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReversedWithRefund.class,
                "refund", refund);
    }
    
    public final static class Builder {
 
        private CardAcquiringRefund refund;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Details of a card refund.
         */
        public Builder refund(CardAcquiringRefund refund) {
            Utils.checkNotNull(refund, "refund");
            this.refund = refund;
            return this;
        }
        
        public ReversedWithRefund build() {
            return new ReversedWithRefund(
                refund);
        }
    }
}

