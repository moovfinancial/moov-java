/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.operations;

import static io.moov.sdk.operations.Operations.RequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import io.moov.sdk.SDKConfiguration;
import io.moov.sdk.operations.GetPublicImage;
import io.moov.sdk.utils.Headers;
import io.moov.sdk.utils.LazySingletonValue;
import io.moov.sdk.utils.Utils;
import java.lang.String;
import java.util.Optional;

public class GetPublicImageRequestBuilder {

    private Optional<String> ifNoneMatch = Optional.empty();
    private String publicID;
    private Optional<String> size = Utils.readDefaultOrConstValue(
                            "size",
                            "\"400x400\"",
                            new TypeReference<Optional<String>>() {});
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetPublicImageRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public GetPublicImageRequestBuilder ifNoneMatch(String ifNoneMatch) {
        Utils.checkNotNull(ifNoneMatch, "ifNoneMatch");
        this.ifNoneMatch = Optional.of(ifNoneMatch);
        return this;
    }

    public GetPublicImageRequestBuilder ifNoneMatch(Optional<String> ifNoneMatch) {
        Utils.checkNotNull(ifNoneMatch, "ifNoneMatch");
        this.ifNoneMatch = ifNoneMatch;
        return this;
    }

    public GetPublicImageRequestBuilder publicID(String publicID) {
        Utils.checkNotNull(publicID, "publicID");
        this.publicID = publicID;
        return this;
    }
                
    public GetPublicImageRequestBuilder size(String size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.of(size);
        return this;
    }

    public GetPublicImageRequestBuilder size(Optional<String> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }


    private GetPublicImageRequest buildRequest() {
        if (size == null) {
            size = _SINGLETON_VALUE_Size.value();
        }

        GetPublicImageRequest request = new GetPublicImageRequest(ifNoneMatch,
            publicID,
            size);

        return request;
    }

    public GetPublicImageResponse call() {
        
        RequestOperation<GetPublicImageRequest, GetPublicImageResponse> operation
              = new GetPublicImage.Sync(sdkConfiguration, _headers);
        GetPublicImageRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }

    private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Size =
            new LazySingletonValue<>(
                    "size",
                    "\"400x400\"",
                    new TypeReference<Optional<String>>() {});
}
