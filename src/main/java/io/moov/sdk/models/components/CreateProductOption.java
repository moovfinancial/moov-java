/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class CreateProductOption {
    /**
     * The display name of a product option.
     */
    @JsonProperty("name")
    private String name;

    /**
     * A detailed description of the option.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The adjustment applied to a product's base price by this option. Can be negative, positive, or zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceModifier")
    private Optional<? extends AmountDecimal> priceModifier;

    /**
     * Assign previously uploaded images to a product or option.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private Optional<? extends List<AssignProductImage>> images;

    @JsonCreator
    public CreateProductOption(
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("priceModifier") Optional<? extends AmountDecimal> priceModifier,
            @JsonProperty("images") Optional<? extends List<AssignProductImage>> images) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(priceModifier, "priceModifier");
        Utils.checkNotNull(images, "images");
        this.name = name;
        this.description = description;
        this.priceModifier = priceModifier;
        this.images = images;
    }
    
    public CreateProductOption(
            String name) {
        this(name, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * The display name of a product option.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A detailed description of the option.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The adjustment applied to a product's base price by this option. Can be negative, positive, or zero.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimal> priceModifier() {
        return (Optional<AmountDecimal>) priceModifier;
    }

    /**
     * Assign previously uploaded images to a product or option.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AssignProductImage>> images() {
        return (Optional<List<AssignProductImage>>) images;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The display name of a product option.
     */
    public CreateProductOption withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A detailed description of the option.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    public CreateProductOption withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A detailed description of the option.
     * 
     * <p>- Must be valid UTF-8 text
     * - Supports Markdown for formatting
     * - HTML is not permitted and will be rejected
     */
    public CreateProductOption withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The adjustment applied to a product's base price by this option. Can be negative, positive, or zero.
     */
    public CreateProductOption withPriceModifier(AmountDecimal priceModifier) {
        Utils.checkNotNull(priceModifier, "priceModifier");
        this.priceModifier = Optional.ofNullable(priceModifier);
        return this;
    }


    /**
     * The adjustment applied to a product's base price by this option. Can be negative, positive, or zero.
     */
    public CreateProductOption withPriceModifier(Optional<? extends AmountDecimal> priceModifier) {
        Utils.checkNotNull(priceModifier, "priceModifier");
        this.priceModifier = priceModifier;
        return this;
    }

    /**
     * Assign previously uploaded images to a product or option.
     */
    public CreateProductOption withImages(List<AssignProductImage> images) {
        Utils.checkNotNull(images, "images");
        this.images = Optional.ofNullable(images);
        return this;
    }


    /**
     * Assign previously uploaded images to a product or option.
     */
    public CreateProductOption withImages(Optional<? extends List<AssignProductImage>> images) {
        Utils.checkNotNull(images, "images");
        this.images = images;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateProductOption other = (CreateProductOption) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.priceModifier, other.priceModifier) &&
            Utils.enhancedDeepEquals(this.images, other.images);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, priceModifier,
            images);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateProductOption.class,
                "name", name,
                "description", description,
                "priceModifier", priceModifier,
                "images", images);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private Optional<String> description = Optional.empty();

        private Optional<? extends AmountDecimal> priceModifier = Optional.empty();

        private Optional<? extends List<AssignProductImage>> images = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The display name of a product option.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * A detailed description of the option.
         * 
         * <p>- Must be valid UTF-8 text
         * - Supports Markdown for formatting
         * - HTML is not permitted and will be rejected
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A detailed description of the option.
         * 
         * <p>- Must be valid UTF-8 text
         * - Supports Markdown for formatting
         * - HTML is not permitted and will be rejected
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The adjustment applied to a product's base price by this option. Can be negative, positive, or zero.
         */
        public Builder priceModifier(AmountDecimal priceModifier) {
            Utils.checkNotNull(priceModifier, "priceModifier");
            this.priceModifier = Optional.ofNullable(priceModifier);
            return this;
        }

        /**
         * The adjustment applied to a product's base price by this option. Can be negative, positive, or zero.
         */
        public Builder priceModifier(Optional<? extends AmountDecimal> priceModifier) {
            Utils.checkNotNull(priceModifier, "priceModifier");
            this.priceModifier = priceModifier;
            return this;
        }


        /**
         * Assign previously uploaded images to a product or option.
         */
        public Builder images(List<AssignProductImage> images) {
            Utils.checkNotNull(images, "images");
            this.images = Optional.ofNullable(images);
            return this;
        }

        /**
         * Assign previously uploaded images to a product or option.
         */
        public Builder images(Optional<? extends List<AssignProductImage>> images) {
            Utils.checkNotNull(images, "images");
            this.images = images;
            return this;
        }

        public CreateProductOption build() {

            return new CreateProductOption(
                name, description, priceModifier,
                images);
        }

    }
}
