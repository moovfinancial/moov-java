/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * VolumeRange
 * 
 * <p>Defines the volume ranges for tiered pricing models.
 */
public class VolumeRange {
    /**
     * Specifies the lower value of a tier for the fee.
     */
    @JsonProperty("fromValue")
    private long fromValue;

    /**
     * Specifies the upper value of a tier for the fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toValue")
    private Optional<Long> toValue;

    /**
     * The flat amount for a whole tier of the fee.
     */
    @JsonProperty("flatAmount")
    private AmountDecimal flatAmount;

    /**
     * The unit price for a specific tier of the fee.
     */
    @JsonProperty("perUnitAmount")
    private AmountDecimal perUnitAmount;

    @JsonCreator
    public VolumeRange(
            @JsonProperty("fromValue") long fromValue,
            @JsonProperty("toValue") Optional<Long> toValue,
            @JsonProperty("flatAmount") AmountDecimal flatAmount,
            @JsonProperty("perUnitAmount") AmountDecimal perUnitAmount) {
        Utils.checkNotNull(fromValue, "fromValue");
        Utils.checkNotNull(toValue, "toValue");
        Utils.checkNotNull(flatAmount, "flatAmount");
        Utils.checkNotNull(perUnitAmount, "perUnitAmount");
        this.fromValue = fromValue;
        this.toValue = toValue;
        this.flatAmount = flatAmount;
        this.perUnitAmount = perUnitAmount;
    }
    
    public VolumeRange(
            long fromValue,
            AmountDecimal flatAmount,
            AmountDecimal perUnitAmount) {
        this(fromValue, Optional.empty(), flatAmount,
            perUnitAmount);
    }

    /**
     * Specifies the lower value of a tier for the fee.
     */
    @JsonIgnore
    public long fromValue() {
        return fromValue;
    }

    /**
     * Specifies the upper value of a tier for the fee.
     */
    @JsonIgnore
    public Optional<Long> toValue() {
        return toValue;
    }

    /**
     * The flat amount for a whole tier of the fee.
     */
    @JsonIgnore
    public AmountDecimal flatAmount() {
        return flatAmount;
    }

    /**
     * The unit price for a specific tier of the fee.
     */
    @JsonIgnore
    public AmountDecimal perUnitAmount() {
        return perUnitAmount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Specifies the lower value of a tier for the fee.
     */
    public VolumeRange withFromValue(long fromValue) {
        Utils.checkNotNull(fromValue, "fromValue");
        this.fromValue = fromValue;
        return this;
    }

    /**
     * Specifies the upper value of a tier for the fee.
     */
    public VolumeRange withToValue(long toValue) {
        Utils.checkNotNull(toValue, "toValue");
        this.toValue = Optional.ofNullable(toValue);
        return this;
    }


    /**
     * Specifies the upper value of a tier for the fee.
     */
    public VolumeRange withToValue(Optional<Long> toValue) {
        Utils.checkNotNull(toValue, "toValue");
        this.toValue = toValue;
        return this;
    }

    /**
     * The flat amount for a whole tier of the fee.
     */
    public VolumeRange withFlatAmount(AmountDecimal flatAmount) {
        Utils.checkNotNull(flatAmount, "flatAmount");
        this.flatAmount = flatAmount;
        return this;
    }

    /**
     * The unit price for a specific tier of the fee.
     */
    public VolumeRange withPerUnitAmount(AmountDecimal perUnitAmount) {
        Utils.checkNotNull(perUnitAmount, "perUnitAmount");
        this.perUnitAmount = perUnitAmount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VolumeRange other = (VolumeRange) o;
        return 
            Utils.enhancedDeepEquals(this.fromValue, other.fromValue) &&
            Utils.enhancedDeepEquals(this.toValue, other.toValue) &&
            Utils.enhancedDeepEquals(this.flatAmount, other.flatAmount) &&
            Utils.enhancedDeepEquals(this.perUnitAmount, other.perUnitAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fromValue, toValue, flatAmount,
            perUnitAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VolumeRange.class,
                "fromValue", fromValue,
                "toValue", toValue,
                "flatAmount", flatAmount,
                "perUnitAmount", perUnitAmount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long fromValue;

        private Optional<Long> toValue = Optional.empty();

        private AmountDecimal flatAmount;

        private AmountDecimal perUnitAmount;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Specifies the lower value of a tier for the fee.
         */
        public Builder fromValue(long fromValue) {
            Utils.checkNotNull(fromValue, "fromValue");
            this.fromValue = fromValue;
            return this;
        }


        /**
         * Specifies the upper value of a tier for the fee.
         */
        public Builder toValue(long toValue) {
            Utils.checkNotNull(toValue, "toValue");
            this.toValue = Optional.ofNullable(toValue);
            return this;
        }

        /**
         * Specifies the upper value of a tier for the fee.
         */
        public Builder toValue(Optional<Long> toValue) {
            Utils.checkNotNull(toValue, "toValue");
            this.toValue = toValue;
            return this;
        }


        /**
         * The flat amount for a whole tier of the fee.
         */
        public Builder flatAmount(AmountDecimal flatAmount) {
            Utils.checkNotNull(flatAmount, "flatAmount");
            this.flatAmount = flatAmount;
            return this;
        }


        /**
         * The unit price for a specific tier of the fee.
         */
        public Builder perUnitAmount(AmountDecimal perUnitAmount) {
            Utils.checkNotNull(perUnitAmount, "perUnitAmount");
            this.perUnitAmount = perUnitAmount;
            return this;
        }

        public VolumeRange build() {

            return new VolumeRange(
                fromValue, toValue, flatAmount,
                perUnitAmount);
        }

    }
}
