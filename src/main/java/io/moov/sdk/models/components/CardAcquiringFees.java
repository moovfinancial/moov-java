/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * CardAcquiringFees
 * 
 * <p>A detailed breakdown of card acquiring fees by card brand.
 */
public class CardAcquiringFees {
    /**
     * Fees associated with Visa transactions.
     */
    @JsonProperty("visa")
    private CardBrandFees visa;

    /**
     * Fees associated with Mastercard transactions.
     */
    @JsonProperty("mastercard")
    private CardBrandFees mastercard;

    /**
     * Fees associated with Discover transactions.
     */
    @JsonProperty("discover")
    private CardBrandFees discover;

    /**
     * Fees associated with American Express transactions.
     */
    @JsonProperty("americanExpress")
    private CardBrandFees americanExpress;

    @JsonCreator
    public CardAcquiringFees(
            @JsonProperty("visa") CardBrandFees visa,
            @JsonProperty("mastercard") CardBrandFees mastercard,
            @JsonProperty("discover") CardBrandFees discover,
            @JsonProperty("americanExpress") CardBrandFees americanExpress) {
        Utils.checkNotNull(visa, "visa");
        Utils.checkNotNull(mastercard, "mastercard");
        Utils.checkNotNull(discover, "discover");
        Utils.checkNotNull(americanExpress, "americanExpress");
        this.visa = visa;
        this.mastercard = mastercard;
        this.discover = discover;
        this.americanExpress = americanExpress;
    }

    /**
     * Fees associated with Visa transactions.
     */
    @JsonIgnore
    public CardBrandFees visa() {
        return visa;
    }

    /**
     * Fees associated with Mastercard transactions.
     */
    @JsonIgnore
    public CardBrandFees mastercard() {
        return mastercard;
    }

    /**
     * Fees associated with Discover transactions.
     */
    @JsonIgnore
    public CardBrandFees discover() {
        return discover;
    }

    /**
     * Fees associated with American Express transactions.
     */
    @JsonIgnore
    public CardBrandFees americanExpress() {
        return americanExpress;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Fees associated with Visa transactions.
     */
    public CardAcquiringFees withVisa(CardBrandFees visa) {
        Utils.checkNotNull(visa, "visa");
        this.visa = visa;
        return this;
    }

    /**
     * Fees associated with Mastercard transactions.
     */
    public CardAcquiringFees withMastercard(CardBrandFees mastercard) {
        Utils.checkNotNull(mastercard, "mastercard");
        this.mastercard = mastercard;
        return this;
    }

    /**
     * Fees associated with Discover transactions.
     */
    public CardAcquiringFees withDiscover(CardBrandFees discover) {
        Utils.checkNotNull(discover, "discover");
        this.discover = discover;
        return this;
    }

    /**
     * Fees associated with American Express transactions.
     */
    public CardAcquiringFees withAmericanExpress(CardBrandFees americanExpress) {
        Utils.checkNotNull(americanExpress, "americanExpress");
        this.americanExpress = americanExpress;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CardAcquiringFees other = (CardAcquiringFees) o;
        return 
            Utils.enhancedDeepEquals(this.visa, other.visa) &&
            Utils.enhancedDeepEquals(this.mastercard, other.mastercard) &&
            Utils.enhancedDeepEquals(this.discover, other.discover) &&
            Utils.enhancedDeepEquals(this.americanExpress, other.americanExpress);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            visa, mastercard, discover,
            americanExpress);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CardAcquiringFees.class,
                "visa", visa,
                "mastercard", mastercard,
                "discover", discover,
                "americanExpress", americanExpress);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CardBrandFees visa;

        private CardBrandFees mastercard;

        private CardBrandFees discover;

        private CardBrandFees americanExpress;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Fees associated with Visa transactions.
         */
        public Builder visa(CardBrandFees visa) {
            Utils.checkNotNull(visa, "visa");
            this.visa = visa;
            return this;
        }


        /**
         * Fees associated with Mastercard transactions.
         */
        public Builder mastercard(CardBrandFees mastercard) {
            Utils.checkNotNull(mastercard, "mastercard");
            this.mastercard = mastercard;
            return this;
        }


        /**
         * Fees associated with Discover transactions.
         */
        public Builder discover(CardBrandFees discover) {
            Utils.checkNotNull(discover, "discover");
            this.discover = discover;
            return this;
        }


        /**
         * Fees associated with American Express transactions.
         */
        public Builder americanExpress(CardBrandFees americanExpress) {
            Utils.checkNotNull(americanExpress, "americanExpress");
            this.americanExpress = americanExpress;
            return this;
        }

        public CardAcquiringFees build() {

            return new CardAcquiringFees(
                visa, mastercard, discover,
                americanExpress);
        }

    }
}
