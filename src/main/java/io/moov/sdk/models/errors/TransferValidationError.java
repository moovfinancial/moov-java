/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.net.http.HttpResponse;
import java.util.Optional;

@SuppressWarnings("serial")
public class TransferValidationError extends MoovError {

    @Nullable
    private final Data data;

    @Nullable
    private final Throwable deserializationException;

    public TransferValidationError(
                int code,
                byte[] body,
                HttpResponse<?> rawResponse,
                @Nullable Data data,
                @Nullable Throwable deserializationException) {
        super("API error occurred", code, body, rawResponse, null);
        this.data = data;
        this.deserializationException = deserializationException;
    }

    /**
    * Parse a response into an instance of TransferValidationError. If deserialization of the response body fails,
    * the resulting TransferValidationError instance will have a null data() value and a non-null deserializationException().
    */
    public static TransferValidationError from(HttpResponse<InputStream> response) {
        try {
            byte[] bytes = Utils.extractByteArrayFromBody(response);
            Data data = Utils.mapper().readValue(bytes, Data.class);
            return new TransferValidationError(response.statusCode(), bytes, response, data, null);
        } catch (Exception e) {
            return new TransferValidationError(response.statusCode(), null, response, null, e);
        }
    }

    @Deprecated
    public Optional<String> amount() {
        return data().flatMap(Data::amount);
    }

    @Deprecated
    public Optional<String> source() {
        return data().flatMap(Data::source);
    }

    @Deprecated
    public Optional<String> sourcePaymentMethodID() {
        return data().flatMap(Data::sourcePaymentMethodID);
    }

    @Deprecated
    public Optional<String> destinationPaymentMethodID() {
        return data().flatMap(Data::destinationPaymentMethodID);
    }

    @Deprecated
    public Optional<String> description() {
        return data().flatMap(Data::description);
    }

    @Deprecated
    public Optional<String> facilitatorFeeTotalDecimal() {
        return data().flatMap(Data::facilitatorFeeTotalDecimal);
    }

    @Deprecated
    public Optional<String> facilitatorFeeMarkupDecimal() {
        return data().flatMap(Data::facilitatorFeeMarkupDecimal);
    }

    @Deprecated
    public Optional<String> metadata() {
        return data().flatMap(Data::metadata);
    }

    @Deprecated
    public Optional<String> salesTaxAmount() {
        return data().flatMap(Data::salesTaxAmount);
    }

    @Deprecated
    public Optional<String> foreignID() {
        return data().flatMap(Data::foreignID);
    }

    public Optional<Data> data() {
        return Optional.ofNullable(data);
    }

    /**
     * Returns the exception if an error occurs while deserializing the response body.
     */
    public Optional<Throwable> deserializationException() {
        return Optional.ofNullable(deserializationException);
    }

    public static class Data {

        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("amount")
        private Optional<String> amount;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("source")
        private Optional<String> source;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("sourcePaymentMethodID")
        private Optional<String> sourcePaymentMethodID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("destinationPaymentMethodID")
        private Optional<String> destinationPaymentMethodID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("description")
        private Optional<String> description;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("FacilitatorFee.TotalDecimal")
        private Optional<String> facilitatorFeeTotalDecimal;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("FacilitatorFee.MarkupDecimal")
        private Optional<String> facilitatorFeeMarkupDecimal;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("metadata")
        private Optional<String> metadata;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("salesTaxAmount")
        private Optional<String> salesTaxAmount;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("foreignID")
        private Optional<String> foreignID;

        @JsonCreator
        public Data(
                @JsonProperty("amount") Optional<String> amount,
                @JsonProperty("source") Optional<String> source,
                @JsonProperty("sourcePaymentMethodID") Optional<String> sourcePaymentMethodID,
                @JsonProperty("destinationPaymentMethodID") Optional<String> destinationPaymentMethodID,
                @JsonProperty("description") Optional<String> description,
                @JsonProperty("FacilitatorFee.TotalDecimal") Optional<String> facilitatorFeeTotalDecimal,
                @JsonProperty("FacilitatorFee.MarkupDecimal") Optional<String> facilitatorFeeMarkupDecimal,
                @JsonProperty("metadata") Optional<String> metadata,
                @JsonProperty("salesTaxAmount") Optional<String> salesTaxAmount,
                @JsonProperty("foreignID") Optional<String> foreignID) {
            Utils.checkNotNull(amount, "amount");
            Utils.checkNotNull(source, "source");
            Utils.checkNotNull(sourcePaymentMethodID, "sourcePaymentMethodID");
            Utils.checkNotNull(destinationPaymentMethodID, "destinationPaymentMethodID");
            Utils.checkNotNull(description, "description");
            Utils.checkNotNull(facilitatorFeeTotalDecimal, "facilitatorFeeTotalDecimal");
            Utils.checkNotNull(facilitatorFeeMarkupDecimal, "facilitatorFeeMarkupDecimal");
            Utils.checkNotNull(metadata, "metadata");
            Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
            Utils.checkNotNull(foreignID, "foreignID");
            this.amount = amount;
            this.source = source;
            this.sourcePaymentMethodID = sourcePaymentMethodID;
            this.destinationPaymentMethodID = destinationPaymentMethodID;
            this.description = description;
            this.facilitatorFeeTotalDecimal = facilitatorFeeTotalDecimal;
            this.facilitatorFeeMarkupDecimal = facilitatorFeeMarkupDecimal;
            this.metadata = metadata;
            this.salesTaxAmount = salesTaxAmount;
            this.foreignID = foreignID;
        }
        
        public Data() {
            this(Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty());
        }

        @JsonIgnore
        public Optional<String> amount() {
            return amount;
        }

        @JsonIgnore
        public Optional<String> source() {
            return source;
        }

        @JsonIgnore
        public Optional<String> sourcePaymentMethodID() {
            return sourcePaymentMethodID;
        }

        @JsonIgnore
        public Optional<String> destinationPaymentMethodID() {
            return destinationPaymentMethodID;
        }

        @JsonIgnore
        public Optional<String> description() {
            return description;
        }

        @JsonIgnore
        public Optional<String> facilitatorFeeTotalDecimal() {
            return facilitatorFeeTotalDecimal;
        }

        @JsonIgnore
        public Optional<String> facilitatorFeeMarkupDecimal() {
            return facilitatorFeeMarkupDecimal;
        }

        @JsonIgnore
        public Optional<String> metadata() {
            return metadata;
        }

        @JsonIgnore
        public Optional<String> salesTaxAmount() {
            return salesTaxAmount;
        }

        @JsonIgnore
        public Optional<String> foreignID() {
            return foreignID;
        }

        public static Builder builder() {
            return new Builder();
        }


        public Data withAmount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }


        public Data withAmount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Data withSource(String source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }


        public Data withSource(Optional<String> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Data withSourcePaymentMethodID(String sourcePaymentMethodID) {
            Utils.checkNotNull(sourcePaymentMethodID, "sourcePaymentMethodID");
            this.sourcePaymentMethodID = Optional.ofNullable(sourcePaymentMethodID);
            return this;
        }


        public Data withSourcePaymentMethodID(Optional<String> sourcePaymentMethodID) {
            Utils.checkNotNull(sourcePaymentMethodID, "sourcePaymentMethodID");
            this.sourcePaymentMethodID = sourcePaymentMethodID;
            return this;
        }

        public Data withDestinationPaymentMethodID(String destinationPaymentMethodID) {
            Utils.checkNotNull(destinationPaymentMethodID, "destinationPaymentMethodID");
            this.destinationPaymentMethodID = Optional.ofNullable(destinationPaymentMethodID);
            return this;
        }


        public Data withDestinationPaymentMethodID(Optional<String> destinationPaymentMethodID) {
            Utils.checkNotNull(destinationPaymentMethodID, "destinationPaymentMethodID");
            this.destinationPaymentMethodID = destinationPaymentMethodID;
            return this;
        }

        public Data withDescription(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }


        public Data withDescription(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Data withFacilitatorFeeTotalDecimal(String facilitatorFeeTotalDecimal) {
            Utils.checkNotNull(facilitatorFeeTotalDecimal, "facilitatorFeeTotalDecimal");
            this.facilitatorFeeTotalDecimal = Optional.ofNullable(facilitatorFeeTotalDecimal);
            return this;
        }


        public Data withFacilitatorFeeTotalDecimal(Optional<String> facilitatorFeeTotalDecimal) {
            Utils.checkNotNull(facilitatorFeeTotalDecimal, "facilitatorFeeTotalDecimal");
            this.facilitatorFeeTotalDecimal = facilitatorFeeTotalDecimal;
            return this;
        }

        public Data withFacilitatorFeeMarkupDecimal(String facilitatorFeeMarkupDecimal) {
            Utils.checkNotNull(facilitatorFeeMarkupDecimal, "facilitatorFeeMarkupDecimal");
            this.facilitatorFeeMarkupDecimal = Optional.ofNullable(facilitatorFeeMarkupDecimal);
            return this;
        }


        public Data withFacilitatorFeeMarkupDecimal(Optional<String> facilitatorFeeMarkupDecimal) {
            Utils.checkNotNull(facilitatorFeeMarkupDecimal, "facilitatorFeeMarkupDecimal");
            this.facilitatorFeeMarkupDecimal = facilitatorFeeMarkupDecimal;
            return this;
        }

        public Data withMetadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }


        public Data withMetadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Data withSalesTaxAmount(String salesTaxAmount) {
            Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
            this.salesTaxAmount = Optional.ofNullable(salesTaxAmount);
            return this;
        }


        public Data withSalesTaxAmount(Optional<String> salesTaxAmount) {
            Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
            this.salesTaxAmount = salesTaxAmount;
            return this;
        }

        public Data withForeignID(String foreignID) {
            Utils.checkNotNull(foreignID, "foreignID");
            this.foreignID = Optional.ofNullable(foreignID);
            return this;
        }


        public Data withForeignID(Optional<String> foreignID) {
            Utils.checkNotNull(foreignID, "foreignID");
            this.foreignID = foreignID;
            return this;
        }

        @Override
        public boolean equals(java.lang.Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Data other = (Data) o;
            return 
                Utils.enhancedDeepEquals(this.amount, other.amount) &&
                Utils.enhancedDeepEquals(this.source, other.source) &&
                Utils.enhancedDeepEquals(this.sourcePaymentMethodID, other.sourcePaymentMethodID) &&
                Utils.enhancedDeepEquals(this.destinationPaymentMethodID, other.destinationPaymentMethodID) &&
                Utils.enhancedDeepEquals(this.description, other.description) &&
                Utils.enhancedDeepEquals(this.facilitatorFeeTotalDecimal, other.facilitatorFeeTotalDecimal) &&
                Utils.enhancedDeepEquals(this.facilitatorFeeMarkupDecimal, other.facilitatorFeeMarkupDecimal) &&
                Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
                Utils.enhancedDeepEquals(this.salesTaxAmount, other.salesTaxAmount) &&
                Utils.enhancedDeepEquals(this.foreignID, other.foreignID);
        }
        
        @Override
        public int hashCode() {
            return Utils.enhancedHash(
                amount, source, sourcePaymentMethodID,
                destinationPaymentMethodID, description, facilitatorFeeTotalDecimal,
                facilitatorFeeMarkupDecimal, metadata, salesTaxAmount,
                foreignID);
        }
        
        @Override
        public String toString() {
            return Utils.toString(Data.class,
                    "amount", amount,
                    "source", source,
                    "sourcePaymentMethodID", sourcePaymentMethodID,
                    "destinationPaymentMethodID", destinationPaymentMethodID,
                    "description", description,
                    "facilitatorFeeTotalDecimal", facilitatorFeeTotalDecimal,
                    "facilitatorFeeMarkupDecimal", facilitatorFeeMarkupDecimal,
                    "metadata", metadata,
                    "salesTaxAmount", salesTaxAmount,
                    "foreignID", foreignID);
        }

        @SuppressWarnings("UnusedReturnValue")
        public final static class Builder {

            private Optional<String> amount = Optional.empty();

            private Optional<String> source = Optional.empty();

            private Optional<String> sourcePaymentMethodID = Optional.empty();

            private Optional<String> destinationPaymentMethodID = Optional.empty();

            private Optional<String> description = Optional.empty();

            private Optional<String> facilitatorFeeTotalDecimal = Optional.empty();

            private Optional<String> facilitatorFeeMarkupDecimal = Optional.empty();

            private Optional<String> metadata = Optional.empty();

            private Optional<String> salesTaxAmount = Optional.empty();

            private Optional<String> foreignID = Optional.empty();

            private Builder() {
              // force use of static builder() method
            }


            public Builder amount(String amount) {
                Utils.checkNotNull(amount, "amount");
                this.amount = Optional.ofNullable(amount);
                return this;
            }

            public Builder amount(Optional<String> amount) {
                Utils.checkNotNull(amount, "amount");
                this.amount = amount;
                return this;
            }


            public Builder source(String source) {
                Utils.checkNotNull(source, "source");
                this.source = Optional.ofNullable(source);
                return this;
            }

            public Builder source(Optional<String> source) {
                Utils.checkNotNull(source, "source");
                this.source = source;
                return this;
            }


            public Builder sourcePaymentMethodID(String sourcePaymentMethodID) {
                Utils.checkNotNull(sourcePaymentMethodID, "sourcePaymentMethodID");
                this.sourcePaymentMethodID = Optional.ofNullable(sourcePaymentMethodID);
                return this;
            }

            public Builder sourcePaymentMethodID(Optional<String> sourcePaymentMethodID) {
                Utils.checkNotNull(sourcePaymentMethodID, "sourcePaymentMethodID");
                this.sourcePaymentMethodID = sourcePaymentMethodID;
                return this;
            }


            public Builder destinationPaymentMethodID(String destinationPaymentMethodID) {
                Utils.checkNotNull(destinationPaymentMethodID, "destinationPaymentMethodID");
                this.destinationPaymentMethodID = Optional.ofNullable(destinationPaymentMethodID);
                return this;
            }

            public Builder destinationPaymentMethodID(Optional<String> destinationPaymentMethodID) {
                Utils.checkNotNull(destinationPaymentMethodID, "destinationPaymentMethodID");
                this.destinationPaymentMethodID = destinationPaymentMethodID;
                return this;
            }


            public Builder description(String description) {
                Utils.checkNotNull(description, "description");
                this.description = Optional.ofNullable(description);
                return this;
            }

            public Builder description(Optional<String> description) {
                Utils.checkNotNull(description, "description");
                this.description = description;
                return this;
            }


            public Builder facilitatorFeeTotalDecimal(String facilitatorFeeTotalDecimal) {
                Utils.checkNotNull(facilitatorFeeTotalDecimal, "facilitatorFeeTotalDecimal");
                this.facilitatorFeeTotalDecimal = Optional.ofNullable(facilitatorFeeTotalDecimal);
                return this;
            }

            public Builder facilitatorFeeTotalDecimal(Optional<String> facilitatorFeeTotalDecimal) {
                Utils.checkNotNull(facilitatorFeeTotalDecimal, "facilitatorFeeTotalDecimal");
                this.facilitatorFeeTotalDecimal = facilitatorFeeTotalDecimal;
                return this;
            }


            public Builder facilitatorFeeMarkupDecimal(String facilitatorFeeMarkupDecimal) {
                Utils.checkNotNull(facilitatorFeeMarkupDecimal, "facilitatorFeeMarkupDecimal");
                this.facilitatorFeeMarkupDecimal = Optional.ofNullable(facilitatorFeeMarkupDecimal);
                return this;
            }

            public Builder facilitatorFeeMarkupDecimal(Optional<String> facilitatorFeeMarkupDecimal) {
                Utils.checkNotNull(facilitatorFeeMarkupDecimal, "facilitatorFeeMarkupDecimal");
                this.facilitatorFeeMarkupDecimal = facilitatorFeeMarkupDecimal;
                return this;
            }


            public Builder metadata(String metadata) {
                Utils.checkNotNull(metadata, "metadata");
                this.metadata = Optional.ofNullable(metadata);
                return this;
            }

            public Builder metadata(Optional<String> metadata) {
                Utils.checkNotNull(metadata, "metadata");
                this.metadata = metadata;
                return this;
            }


            public Builder salesTaxAmount(String salesTaxAmount) {
                Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
                this.salesTaxAmount = Optional.ofNullable(salesTaxAmount);
                return this;
            }

            public Builder salesTaxAmount(Optional<String> salesTaxAmount) {
                Utils.checkNotNull(salesTaxAmount, "salesTaxAmount");
                this.salesTaxAmount = salesTaxAmount;
                return this;
            }


            public Builder foreignID(String foreignID) {
                Utils.checkNotNull(foreignID, "foreignID");
                this.foreignID = Optional.ofNullable(foreignID);
                return this;
            }

            public Builder foreignID(Optional<String> foreignID) {
                Utils.checkNotNull(foreignID, "foreignID");
                this.foreignID = foreignID;
                return this;
            }

            public Data build() {

                return new Data(
                    amount, source, sourcePaymentMethodID,
                    destinationPaymentMethodID, description, facilitatorFeeTotalDecimal,
                    facilitatorFeeMarkupDecimal, metadata, salesTaxAmount,
                    foreignID);
            }

        }
    }

}

