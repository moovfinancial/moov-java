/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.openapi.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;


public class DisputeEvidenceMetadata {

    @JsonProperty("evidenceID")
    private String evidenceID;

    @JsonProperty("disputeID")
    private String disputeID;

    @JsonProperty("mimeType")
    private String mimeType;

    @JsonProperty("filename")
    private String filename;

    @JsonProperty("size")
    private long size;

    @JsonProperty("evidenceType")
    private EvidenceType evidenceType;

    /**
     * The text submited as evidence.
     */
    @JsonProperty("text")
    private String text;

    @JsonProperty("createdOn")
    private OffsetDateTime createdOn;

    @JsonProperty("updatedOn")
    private OffsetDateTime updatedOn;

    @JsonCreator
    public DisputeEvidenceMetadata(
            @JsonProperty("evidenceID") String evidenceID,
            @JsonProperty("disputeID") String disputeID,
            @JsonProperty("mimeType") String mimeType,
            @JsonProperty("filename") String filename,
            @JsonProperty("size") long size,
            @JsonProperty("evidenceType") EvidenceType evidenceType,
            @JsonProperty("text") String text,
            @JsonProperty("createdOn") OffsetDateTime createdOn,
            @JsonProperty("updatedOn") OffsetDateTime updatedOn) {
        Utils.checkNotNull(evidenceID, "evidenceID");
        Utils.checkNotNull(disputeID, "disputeID");
        Utils.checkNotNull(mimeType, "mimeType");
        Utils.checkNotNull(filename, "filename");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(evidenceType, "evidenceType");
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(createdOn, "createdOn");
        Utils.checkNotNull(updatedOn, "updatedOn");
        this.evidenceID = evidenceID;
        this.disputeID = disputeID;
        this.mimeType = mimeType;
        this.filename = filename;
        this.size = size;
        this.evidenceType = evidenceType;
        this.text = text;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
    }

    @JsonIgnore
    public String evidenceID() {
        return evidenceID;
    }

    @JsonIgnore
    public String disputeID() {
        return disputeID;
    }

    @JsonIgnore
    public String mimeType() {
        return mimeType;
    }

    @JsonIgnore
    public String filename() {
        return filename;
    }

    @JsonIgnore
    public long size() {
        return size;
    }

    @JsonIgnore
    public EvidenceType evidenceType() {
        return evidenceType;
    }

    /**
     * The text submited as evidence.
     */
    @JsonIgnore
    public String text() {
        return text;
    }

    @JsonIgnore
    public OffsetDateTime createdOn() {
        return createdOn;
    }

    @JsonIgnore
    public OffsetDateTime updatedOn() {
        return updatedOn;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DisputeEvidenceMetadata withEvidenceID(String evidenceID) {
        Utils.checkNotNull(evidenceID, "evidenceID");
        this.evidenceID = evidenceID;
        return this;
    }

    public DisputeEvidenceMetadata withDisputeID(String disputeID) {
        Utils.checkNotNull(disputeID, "disputeID");
        this.disputeID = disputeID;
        return this;
    }

    public DisputeEvidenceMetadata withMimeType(String mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = mimeType;
        return this;
    }

    public DisputeEvidenceMetadata withFilename(String filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = filename;
        return this;
    }

    public DisputeEvidenceMetadata withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public DisputeEvidenceMetadata withEvidenceType(EvidenceType evidenceType) {
        Utils.checkNotNull(evidenceType, "evidenceType");
        this.evidenceType = evidenceType;
        return this;
    }

    /**
     * The text submited as evidence.
     */
    public DisputeEvidenceMetadata withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    public DisputeEvidenceMetadata withCreatedOn(OffsetDateTime createdOn) {
        Utils.checkNotNull(createdOn, "createdOn");
        this.createdOn = createdOn;
        return this;
    }

    public DisputeEvidenceMetadata withUpdatedOn(OffsetDateTime updatedOn) {
        Utils.checkNotNull(updatedOn, "updatedOn");
        this.updatedOn = updatedOn;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DisputeEvidenceMetadata other = (DisputeEvidenceMetadata) o;
        return 
            Objects.deepEquals(this.evidenceID, other.evidenceID) &&
            Objects.deepEquals(this.disputeID, other.disputeID) &&
            Objects.deepEquals(this.mimeType, other.mimeType) &&
            Objects.deepEquals(this.filename, other.filename) &&
            Objects.deepEquals(this.size, other.size) &&
            Objects.deepEquals(this.evidenceType, other.evidenceType) &&
            Objects.deepEquals(this.text, other.text) &&
            Objects.deepEquals(this.createdOn, other.createdOn) &&
            Objects.deepEquals(this.updatedOn, other.updatedOn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            evidenceID,
            disputeID,
            mimeType,
            filename,
            size,
            evidenceType,
            text,
            createdOn,
            updatedOn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DisputeEvidenceMetadata.class,
                "evidenceID", evidenceID,
                "disputeID", disputeID,
                "mimeType", mimeType,
                "filename", filename,
                "size", size,
                "evidenceType", evidenceType,
                "text", text,
                "createdOn", createdOn,
                "updatedOn", updatedOn);
    }
    
    public final static class Builder {
 
        private String evidenceID;
 
        private String disputeID;
 
        private String mimeType;
 
        private String filename;
 
        private Long size;
 
        private EvidenceType evidenceType;
 
        private String text;
 
        private OffsetDateTime createdOn;
 
        private OffsetDateTime updatedOn;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder evidenceID(String evidenceID) {
            Utils.checkNotNull(evidenceID, "evidenceID");
            this.evidenceID = evidenceID;
            return this;
        }

        public Builder disputeID(String disputeID) {
            Utils.checkNotNull(disputeID, "disputeID");
            this.disputeID = disputeID;
            return this;
        }

        public Builder mimeType(String mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = mimeType;
            return this;
        }

        public Builder filename(String filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = filename;
            return this;
        }

        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder evidenceType(EvidenceType evidenceType) {
            Utils.checkNotNull(evidenceType, "evidenceType");
            this.evidenceType = evidenceType;
            return this;
        }

        /**
         * The text submited as evidence.
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        public Builder createdOn(OffsetDateTime createdOn) {
            Utils.checkNotNull(createdOn, "createdOn");
            this.createdOn = createdOn;
            return this;
        }

        public Builder updatedOn(OffsetDateTime updatedOn) {
            Utils.checkNotNull(updatedOn, "updatedOn");
            this.updatedOn = updatedOn;
            return this;
        }
        
        public DisputeEvidenceMetadata build() {
            return new DisputeEvidenceMetadata(
                evidenceID,
                disputeID,
                mimeType,
                filename,
                size,
                evidenceType,
                text,
                createdOn,
                updatedOn);
        }
    }
}

