/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * SettingsUpdate - User provided settings to manage an account.
 */

public class SettingsUpdate {

    /**
     * User provided settings to manage card payments. This data is only allowed on a business account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardPayment")
    private Optional<? extends CardPaymentSettings> cardPayment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("achPayment")
    private Optional<? extends ACHPaymentSettingsUpdate> achPayment;

    @JsonCreator
    public SettingsUpdate(
            @JsonProperty("cardPayment") Optional<? extends CardPaymentSettings> cardPayment,
            @JsonProperty("achPayment") Optional<? extends ACHPaymentSettingsUpdate> achPayment) {
        Utils.checkNotNull(cardPayment, "cardPayment");
        Utils.checkNotNull(achPayment, "achPayment");
        this.cardPayment = cardPayment;
        this.achPayment = achPayment;
    }
    
    public SettingsUpdate() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * User provided settings to manage card payments. This data is only allowed on a business account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CardPaymentSettings> cardPayment() {
        return (Optional<CardPaymentSettings>) cardPayment;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ACHPaymentSettingsUpdate> achPayment() {
        return (Optional<ACHPaymentSettingsUpdate>) achPayment;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * User provided settings to manage card payments. This data is only allowed on a business account.
     */
    public SettingsUpdate withCardPayment(CardPaymentSettings cardPayment) {
        Utils.checkNotNull(cardPayment, "cardPayment");
        this.cardPayment = Optional.ofNullable(cardPayment);
        return this;
    }

    /**
     * User provided settings to manage card payments. This data is only allowed on a business account.
     */
    public SettingsUpdate withCardPayment(Optional<? extends CardPaymentSettings> cardPayment) {
        Utils.checkNotNull(cardPayment, "cardPayment");
        this.cardPayment = cardPayment;
        return this;
    }

    public SettingsUpdate withAchPayment(ACHPaymentSettingsUpdate achPayment) {
        Utils.checkNotNull(achPayment, "achPayment");
        this.achPayment = Optional.ofNullable(achPayment);
        return this;
    }

    public SettingsUpdate withAchPayment(Optional<? extends ACHPaymentSettingsUpdate> achPayment) {
        Utils.checkNotNull(achPayment, "achPayment");
        this.achPayment = achPayment;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SettingsUpdate other = (SettingsUpdate) o;
        return 
            Objects.deepEquals(this.cardPayment, other.cardPayment) &&
            Objects.deepEquals(this.achPayment, other.achPayment);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cardPayment,
            achPayment);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SettingsUpdate.class,
                "cardPayment", cardPayment,
                "achPayment", achPayment);
    }
    
    public final static class Builder {
 
        private Optional<? extends CardPaymentSettings> cardPayment = Optional.empty();
 
        private Optional<? extends ACHPaymentSettingsUpdate> achPayment = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * User provided settings to manage card payments. This data is only allowed on a business account.
         */
        public Builder cardPayment(CardPaymentSettings cardPayment) {
            Utils.checkNotNull(cardPayment, "cardPayment");
            this.cardPayment = Optional.ofNullable(cardPayment);
            return this;
        }

        /**
         * User provided settings to manage card payments. This data is only allowed on a business account.
         */
        public Builder cardPayment(Optional<? extends CardPaymentSettings> cardPayment) {
            Utils.checkNotNull(cardPayment, "cardPayment");
            this.cardPayment = cardPayment;
            return this;
        }

        public Builder achPayment(ACHPaymentSettingsUpdate achPayment) {
            Utils.checkNotNull(achPayment, "achPayment");
            this.achPayment = Optional.ofNullable(achPayment);
            return this;
        }

        public Builder achPayment(Optional<? extends ACHPaymentSettingsUpdate> achPayment) {
            Utils.checkNotNull(achPayment, "achPayment");
            this.achPayment = achPayment;
            return this;
        }
        
        public SettingsUpdate build() {
            return new SettingsUpdate(
                cardPayment,
                achPayment);
        }
    }
}

