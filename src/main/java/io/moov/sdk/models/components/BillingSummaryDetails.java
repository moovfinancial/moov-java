/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * BillingSummaryDetails
 * 
 * <p>Details of volume and fees for a specific payment method.
 */
public class BillingSummaryDetails {
    /**
     * The total transaction volume amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeAmount")
    private Optional<? extends AmountDecimal> volumeAmount;

    /**
     * The total number of transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeCount")
    private Optional<Long> volumeCount;

    /**
     * The total fee amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feeAmount")
    private Optional<? extends AmountDecimal> feeAmount;

    @JsonCreator
    public BillingSummaryDetails(
            @JsonProperty("volumeAmount") Optional<? extends AmountDecimal> volumeAmount,
            @JsonProperty("volumeCount") Optional<Long> volumeCount,
            @JsonProperty("feeAmount") Optional<? extends AmountDecimal> feeAmount) {
        Utils.checkNotNull(volumeAmount, "volumeAmount");
        Utils.checkNotNull(volumeCount, "volumeCount");
        Utils.checkNotNull(feeAmount, "feeAmount");
        this.volumeAmount = volumeAmount;
        this.volumeCount = volumeCount;
        this.feeAmount = feeAmount;
    }
    
    public BillingSummaryDetails() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The total transaction volume amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimal> volumeAmount() {
        return (Optional<AmountDecimal>) volumeAmount;
    }

    /**
     * The total number of transactions.
     */
    @JsonIgnore
    public Optional<Long> volumeCount() {
        return volumeCount;
    }

    /**
     * The total fee amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimal> feeAmount() {
        return (Optional<AmountDecimal>) feeAmount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The total transaction volume amount.
     */
    public BillingSummaryDetails withVolumeAmount(AmountDecimal volumeAmount) {
        Utils.checkNotNull(volumeAmount, "volumeAmount");
        this.volumeAmount = Optional.ofNullable(volumeAmount);
        return this;
    }


    /**
     * The total transaction volume amount.
     */
    public BillingSummaryDetails withVolumeAmount(Optional<? extends AmountDecimal> volumeAmount) {
        Utils.checkNotNull(volumeAmount, "volumeAmount");
        this.volumeAmount = volumeAmount;
        return this;
    }

    /**
     * The total number of transactions.
     */
    public BillingSummaryDetails withVolumeCount(long volumeCount) {
        Utils.checkNotNull(volumeCount, "volumeCount");
        this.volumeCount = Optional.ofNullable(volumeCount);
        return this;
    }


    /**
     * The total number of transactions.
     */
    public BillingSummaryDetails withVolumeCount(Optional<Long> volumeCount) {
        Utils.checkNotNull(volumeCount, "volumeCount");
        this.volumeCount = volumeCount;
        return this;
    }

    /**
     * The total fee amount.
     */
    public BillingSummaryDetails withFeeAmount(AmountDecimal feeAmount) {
        Utils.checkNotNull(feeAmount, "feeAmount");
        this.feeAmount = Optional.ofNullable(feeAmount);
        return this;
    }


    /**
     * The total fee amount.
     */
    public BillingSummaryDetails withFeeAmount(Optional<? extends AmountDecimal> feeAmount) {
        Utils.checkNotNull(feeAmount, "feeAmount");
        this.feeAmount = feeAmount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillingSummaryDetails other = (BillingSummaryDetails) o;
        return 
            Utils.enhancedDeepEquals(this.volumeAmount, other.volumeAmount) &&
            Utils.enhancedDeepEquals(this.volumeCount, other.volumeCount) &&
            Utils.enhancedDeepEquals(this.feeAmount, other.feeAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            volumeAmount, volumeCount, feeAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillingSummaryDetails.class,
                "volumeAmount", volumeAmount,
                "volumeCount", volumeCount,
                "feeAmount", feeAmount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends AmountDecimal> volumeAmount = Optional.empty();

        private Optional<Long> volumeCount = Optional.empty();

        private Optional<? extends AmountDecimal> feeAmount = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The total transaction volume amount.
         */
        public Builder volumeAmount(AmountDecimal volumeAmount) {
            Utils.checkNotNull(volumeAmount, "volumeAmount");
            this.volumeAmount = Optional.ofNullable(volumeAmount);
            return this;
        }

        /**
         * The total transaction volume amount.
         */
        public Builder volumeAmount(Optional<? extends AmountDecimal> volumeAmount) {
            Utils.checkNotNull(volumeAmount, "volumeAmount");
            this.volumeAmount = volumeAmount;
            return this;
        }


        /**
         * The total number of transactions.
         */
        public Builder volumeCount(long volumeCount) {
            Utils.checkNotNull(volumeCount, "volumeCount");
            this.volumeCount = Optional.ofNullable(volumeCount);
            return this;
        }

        /**
         * The total number of transactions.
         */
        public Builder volumeCount(Optional<Long> volumeCount) {
            Utils.checkNotNull(volumeCount, "volumeCount");
            this.volumeCount = volumeCount;
            return this;
        }


        /**
         * The total fee amount.
         */
        public Builder feeAmount(AmountDecimal feeAmount) {
            Utils.checkNotNull(feeAmount, "feeAmount");
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        /**
         * The total fee amount.
         */
        public Builder feeAmount(Optional<? extends AmountDecimal> feeAmount) {
            Utils.checkNotNull(feeAmount, "feeAmount");
            this.feeAmount = feeAmount;
            return this;
        }

        public BillingSummaryDetails build() {

            return new BillingSummaryDetails(
                volumeAmount, volumeCount, feeAmount);
        }

    }
}
