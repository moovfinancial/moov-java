/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.openapi.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class AccessToken {

    /**
     * String passed to the authorization server to gain access to the system.
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * Number of seconds for which the token is valid.
     */
    @JsonProperty("expires_in")
    private int expiresIn;

    /**
     * String passed to the authorization server to gain access to the system.
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    /**
     * A space-delimited list of [scopes](https://docs.moov.io/api/authentication/scopes/) that are allowed.
     */
    @JsonProperty("scope")
    private String scope;

    /**
     * Type of token returned.
     * 
     *   - opaque: A token following a proprietary format.
     *   - jwt: A JSON Web Token (JWT), a self-contained token that contains claims about the user and is cryptographically signed.
     */
    @JsonProperty("token_type")
    private TokenType tokenType;

    @JsonCreator
    public AccessToken(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("expires_in") int expiresIn,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("scope") String scope,
            @JsonProperty("token_type") TokenType tokenType) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(expiresIn, "expiresIn");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(scope, "scope");
        Utils.checkNotNull(tokenType, "tokenType");
        this.accessToken = accessToken;
        this.expiresIn = expiresIn;
        this.refreshToken = refreshToken;
        this.scope = scope;
        this.tokenType = tokenType;
    }

    /**
     * String passed to the authorization server to gain access to the system.
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * Number of seconds for which the token is valid.
     */
    @JsonIgnore
    public int expiresIn() {
        return expiresIn;
    }

    /**
     * String passed to the authorization server to gain access to the system.
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    /**
     * A space-delimited list of [scopes](https://docs.moov.io/api/authentication/scopes/) that are allowed.
     */
    @JsonIgnore
    public String scope() {
        return scope;
    }

    /**
     * Type of token returned.
     * 
     *   - opaque: A token following a proprietary format.
     *   - jwt: A JSON Web Token (JWT), a self-contained token that contains claims about the user and is cryptographically signed.
     */
    @JsonIgnore
    public TokenType tokenType() {
        return tokenType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * String passed to the authorization server to gain access to the system.
     */
    public AccessToken withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Number of seconds for which the token is valid.
     */
    public AccessToken withExpiresIn(int expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = expiresIn;
        return this;
    }

    /**
     * String passed to the authorization server to gain access to the system.
     */
    public AccessToken withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * A space-delimited list of [scopes](https://docs.moov.io/api/authentication/scopes/) that are allowed.
     */
    public AccessToken withScope(String scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = scope;
        return this;
    }

    /**
     * Type of token returned.
     * 
     *   - opaque: A token following a proprietary format.
     *   - jwt: A JSON Web Token (JWT), a self-contained token that contains claims about the user and is cryptographically signed.
     */
    public AccessToken withTokenType(TokenType tokenType) {
        Utils.checkNotNull(tokenType, "tokenType");
        this.tokenType = tokenType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessToken other = (AccessToken) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.expiresIn, other.expiresIn) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.scope, other.scope) &&
            Objects.deepEquals(this.tokenType, other.tokenType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            expiresIn,
            refreshToken,
            scope,
            tokenType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccessToken.class,
                "accessToken", accessToken,
                "expiresIn", expiresIn,
                "refreshToken", refreshToken,
                "scope", scope,
                "tokenType", tokenType);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private Integer expiresIn;
 
        private String refreshToken;
 
        private String scope;
 
        private TokenType tokenType;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * String passed to the authorization server to gain access to the system.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Number of seconds for which the token is valid.
         */
        public Builder expiresIn(int expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * String passed to the authorization server to gain access to the system.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * A space-delimited list of [scopes](https://docs.moov.io/api/authentication/scopes/) that are allowed.
         */
        public Builder scope(String scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = scope;
            return this;
        }

        /**
         * Type of token returned.
         * 
         *   - opaque: A token following a proprietary format.
         *   - jwt: A JSON Web Token (JWT), a self-contained token that contains claims about the user and is cryptographically signed.
         */
        public Builder tokenType(TokenType tokenType) {
            Utils.checkNotNull(tokenType, "tokenType");
            this.tokenType = tokenType;
            return this;
        }
        
        public AccessToken build() {
            return new AccessToken(
                accessToken,
                expiresIn,
                refreshToken,
                scope,
                tokenType);
        }
    }
}

