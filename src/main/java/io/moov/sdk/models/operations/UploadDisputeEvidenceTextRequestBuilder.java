/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.operations;

import static io.moov.sdk.operations.Operations.RequestOperation;

import io.moov.sdk.SDKConfiguration;
import io.moov.sdk.models.components.CreateEvidenceText;
import io.moov.sdk.operations.UploadDisputeEvidenceText;
import io.moov.sdk.utils.Headers;
import io.moov.sdk.utils.Utils;
import java.lang.String;

public class UploadDisputeEvidenceTextRequestBuilder {

    private String accountID;
    private String disputeID;
    private CreateEvidenceText createEvidenceText;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public UploadDisputeEvidenceTextRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public UploadDisputeEvidenceTextRequestBuilder accountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    public UploadDisputeEvidenceTextRequestBuilder disputeID(String disputeID) {
        Utils.checkNotNull(disputeID, "disputeID");
        this.disputeID = disputeID;
        return this;
    }

    public UploadDisputeEvidenceTextRequestBuilder createEvidenceText(CreateEvidenceText createEvidenceText) {
        Utils.checkNotNull(createEvidenceText, "createEvidenceText");
        this.createEvidenceText = createEvidenceText;
        return this;
    }


    private UploadDisputeEvidenceTextRequest buildRequest() {

        UploadDisputeEvidenceTextRequest request = new UploadDisputeEvidenceTextRequest(accountID,
            disputeID,
            createEvidenceText);

        return request;
    }

    public UploadDisputeEvidenceTextResponse call() {
        
        RequestOperation<UploadDisputeEvidenceTextRequest, UploadDisputeEvidenceTextResponse> operation
              = new UploadDisputeEvidenceText.Sync(sdkConfiguration, _headers);
        UploadDisputeEvidenceTextRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
