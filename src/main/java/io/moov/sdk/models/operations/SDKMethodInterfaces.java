/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk.models.operations;

import io.moov.sdk.models.components.AccountCountries;
import io.moov.sdk.models.components.AccountWaitFor;
import io.moov.sdk.models.components.AddCapabilities;
import io.moov.sdk.models.components.AuthTokenRequest;
import io.moov.sdk.models.components.BankAccountWaitFor;
import io.moov.sdk.models.components.Brand;
import io.moov.sdk.models.components.CapabilityID;
import io.moov.sdk.models.components.CompleteBankAccountVerification;
import io.moov.sdk.models.components.CompleteMicroDeposits;
import io.moov.sdk.models.components.CreateAccount;
import io.moov.sdk.models.components.CreateAccountUpdate;
import io.moov.sdk.models.components.CreateApplePaySession;
import io.moov.sdk.models.components.CreateEvidenceFileMultiPart;
import io.moov.sdk.models.components.CreateEvidenceText;
import io.moov.sdk.models.components.CreateFeePlanAgreement;
import io.moov.sdk.models.components.CreatePaymentLink;
import io.moov.sdk.models.components.CreateRepresentative;
import io.moov.sdk.models.components.CreateSweepConfig;
import io.moov.sdk.models.components.E2EEToken;
import io.moov.sdk.models.components.FeePlanAgreementStatus;
import io.moov.sdk.models.components.FileUploadRequestMultiPart;
import io.moov.sdk.models.components.LinkApplePay;
import io.moov.sdk.models.components.LinkBankAccount;
import io.moov.sdk.models.components.LinkCard;
import io.moov.sdk.models.components.LinkCardWaitFor;
import io.moov.sdk.models.components.OnboardingInviteRequest;
import io.moov.sdk.models.components.PatchSweepConfig;
import io.moov.sdk.models.components.PaymentMethodType;
import io.moov.sdk.models.components.RegisterApplePayMerchantDomains;
import io.moov.sdk.models.components.RequestCard;
import io.moov.sdk.models.components.RevokeTokenRequest;
import io.moov.sdk.models.components.UpdateApplePayMerchantDomains;
import io.moov.sdk.models.components.UpdateBrand;
import io.moov.sdk.models.components.UpdateCard;
import io.moov.sdk.models.components.UpdateIssuedCard;
import io.moov.sdk.models.components.UpdatePaymentLink;
import io.moov.sdk.models.components.UpdateRepresentative;
import io.moov.sdk.models.components.UpdateUnderwriting;
import io.moov.sdk.models.components.UpsertSchedule;
import io.moov.sdk.models.components.Versions;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallCreateAccount {
        CreateAccountResponse create(
            CreateAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<? extends AccountWaitFor> xWaitFor,
            CreateAccount createAccount) throws Exception;
    }


    public interface MethodCallListAccounts {
        ListAccountsResponse list(
            ListAccountsRequest request,
            ListAccountsSecurity security) throws Exception;
    }


    public interface MethodCallGetAccount {
        GetAccountResponse get(
            GetAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallUpdateAccount {
        UpdateAccountResponse update(
            UpdateAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateAccountUpdate createAccountUpdate) throws Exception;
    }


    public interface MethodCallDisconnectAccount {
        DisconnectAccountResponse disconnect(
            DisconnectAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetAccountCountries {
        GetAccountCountriesResponse getCountries(
            GetAccountCountriesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallAssignAccountCountries {
        AssignAccountCountriesResponse assignCountries(
            AssignAccountCountriesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            AccountCountries accountCountries) throws Exception;
    }


    public interface MethodCallGetMerchantProcessingAgreement {
        GetMerchantProcessingAgreementResponse getMerchantProcessingAgreement(
            GetMerchantProcessingAgreementSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetTermsOfServiceToken {
        GetTermsOfServiceTokenResponse getTermsOfServiceToken(
            Optional<? extends Versions> xMoovVersion,
            Optional<String> origin,
            Optional<String> referer) throws Exception;
    }


    public interface MethodCallListAdjustments {
        ListAdjustmentsResponse list(
            ListAdjustmentsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Optional<String> walletID) throws Exception;
    }


    public interface MethodCallGetAdjustment {
        GetAdjustmentResponse get(
            GetAdjustmentSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String adjustmentID) throws Exception;
    }


    public interface MethodCallRegisterApplePayMerchantDomains {
        RegisterApplePayMerchantDomainsResponse registerMerchantDomains(
            RegisterApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            RegisterApplePayMerchantDomains registerApplePayMerchantDomains) throws Exception;
    }


    public interface MethodCallUpdateApplePayMerchantDomains {
        UpdateApplePayMerchantDomainsResponse updateMerchantDomains(
            UpdateApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            UpdateApplePayMerchantDomains updateApplePayMerchantDomains) throws Exception;
    }


    public interface MethodCallGetApplePayMerchantDomains {
        GetApplePayMerchantDomainsResponse getMerchantDomains(
            GetApplePayMerchantDomainsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallCreateApplePaySession {
        CreateApplePaySessionResponse createSession(
            CreateApplePaySessionSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateApplePaySession createApplePaySession) throws Exception;
    }


    public interface MethodCallLinkApplePayToken {
        LinkApplePayTokenResponse linkToken(
            LinkApplePayTokenSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            LinkApplePay linkApplePay) throws Exception;
    }


    public interface MethodCallLinkBankAccount {
        LinkBankAccountResponse link(
            LinkBankAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<? extends BankAccountWaitFor> xWaitFor,
            String accountID,
            LinkBankAccount linkBankAccount) throws Exception;
    }


    public interface MethodCallListBankAccounts {
        ListBankAccountsResponse list(
            ListBankAccountsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetBankAccount {
        GetBankAccountResponse get(
            GetBankAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallDisableBankAccount {
        DisableBankAccountResponse disable(
            DisableBankAccountSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallInitiateMicroDeposits {
        InitiateMicroDepositsResponse initiateMicroDeposits(
            InitiateMicroDepositsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallCompleteMicroDeposits {
        CompleteMicroDepositsResponse completeMicroDeposits(
            CompleteMicroDepositsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID,
            CompleteMicroDeposits completeMicroDeposits) throws Exception;
    }


    public interface MethodCallGetBankAccountVerification {
        GetBankAccountVerificationResponse getVerification(
            GetBankAccountVerificationSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallInitiateBankAccountVerification {
        InitiateBankAccountVerificationResponse initiateVerification(
            InitiateBankAccountVerificationSecurity security,
            Optional<? extends Versions> xMoovVersion,
            BankAccountWaitFor xWaitFor,
            String accountID,
            String bankAccountID) throws Exception;
    }


    public interface MethodCallCompleteBankAccountVerification {
        CompleteBankAccountVerificationResponse completeVerification(
            CompleteBankAccountVerificationSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String bankAccountID,
            CompleteBankAccountVerification completeBankAccountVerification) throws Exception;
    }


    public interface MethodCallCreateBrand {
        CreateBrandResponse create(
            CreateBrandSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Brand brand) throws Exception;
    }


    public interface MethodCallGetBrand {
        GetBrandResponse get(
            GetBrandSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallUpdateBrand {
        UpdateBrandResponse update(
            UpdateBrandSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            UpdateBrand updateBrand) throws Exception;
    }


    public interface MethodCallListCapabilities {
        ListCapabilitiesResponse list(
            ListCapabilitiesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallRequestCapabilities {
        RequestCapabilitiesResponse request(
            RequestCapabilitiesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            AddCapabilities addCapabilities) throws Exception;
    }


    public interface MethodCallGetCapability {
        GetCapabilityResponse get(
            GetCapabilitySecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CapabilityID capabilityID) throws Exception;
    }


    public interface MethodCallDisableCapability {
        DisableCapabilityResponse disable(
            DisableCapabilitySecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CapabilityID capabilityID) throws Exception;
    }


    public interface MethodCallLinkCard {
        LinkCardResponse link(
            LinkCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<? extends LinkCardWaitFor> xWaitFor,
            String accountID,
            LinkCard linkCard) throws Exception;
    }


    public interface MethodCallListCards {
        ListCardsResponse list(
            ListCardsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetCard {
        GetCardResponse get(
            GetCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID) throws Exception;
    }


    public interface MethodCallUpdateCard {
        UpdateCardResponse update(
            UpdateCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID,
            UpdateCard updateCard) throws Exception;
    }


    public interface MethodCallDisableCard {
        DisableCardResponse disable(
            DisableCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardID) throws Exception;
    }


    public interface MethodCallListDisputes {
        ListDisputesResponse list(
            ListDisputesRequest request,
            ListDisputesSecurity security) throws Exception;
    }


    public interface MethodCallGetDispute {
        GetDisputeResponse get(
            GetDisputeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }


    public interface MethodCallAcceptDispute {
        AcceptDisputeResponse accept(
            AcceptDisputeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }


    public interface MethodCallListDisputeEvidence {
        ListDisputeEvidenceResponse listEvidence(
            ListDisputeEvidenceSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }


    public interface MethodCallUploadDisputeEvidenceFile {
        UploadDisputeEvidenceFileResponse uploadEvidenceFile(
            UploadDisputeEvidenceFileSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            CreateEvidenceFileMultiPart createEvidenceFileMultiPart) throws Exception;
    }


    public interface MethodCallUploadDisputeEvidenceText {
        UploadDisputeEvidenceTextResponse uploadEvidenceText(
            UploadDisputeEvidenceTextSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            CreateEvidenceText createEvidenceText) throws Exception;
    }


    public interface MethodCallSubmitDisputeEvidence {
        SubmitDisputeEvidenceResponse submitEvidence(
            SubmitDisputeEvidenceSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID) throws Exception;
    }


    public interface MethodCallGetDisputeEvidence {
        GetDisputeEvidenceResponse getEvidence(
            GetDisputeEvidenceSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }


    public interface MethodCallUpdateDisputeEvidence {
        UpdateDisputeEvidenceResponse updateEvidence(
            UpdateDisputeEvidenceRequest request,
            UpdateDisputeEvidenceSecurity security) throws Exception;
    }


    public interface MethodCallDeleteDisputeEvidenceFile {
        DeleteDisputeEvidenceFileResponse deleteEvidence(
            DeleteDisputeEvidenceFileSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }


    public interface MethodCallGetDisputeEvidenceData {
        GetDisputeEvidenceDataResponse getEvidenceData(
            GetDisputeEvidenceDataSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String disputeID,
            String evidenceID) throws Exception;
    }


    public interface MethodCallListFeePlanAgreements {
        ListFeePlanAgreementsResponse listFeePlanAgreements(
            ListFeePlanAgreementsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Optional<? extends List<String>> agreementID,
            Optional<? extends List<FeePlanAgreementStatus>> status) throws Exception;
    }


    public interface MethodCallCreateFeePlanAgreements {
        CreateFeePlanAgreementsResponse createFeePlanAgreements(
            CreateFeePlanAgreementsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateFeePlanAgreement createFeePlanAgreement) throws Exception;
    }


    public interface MethodCallListFeePlans {
        ListFeePlansResponse listFeePlans(
            ListFeePlansSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Optional<? extends List<String>> planIDs) throws Exception;
    }


    public interface MethodCallListPartnerPricing {
        ListPartnerPricingResponse listPartnerPricing(
            ListPartnerPricingSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Optional<? extends List<String>> planIDs) throws Exception;
    }


    public interface MethodCallListPartnerPricingAgreements {
        ListPartnerPricingAgreementsResponse listPartnerPricingAgreements(
            ListPartnerPricingAgreementsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Optional<? extends List<String>> agreementID,
            Optional<? extends List<FeePlanAgreementStatus>> status) throws Exception;
    }


    public interface MethodCallUploadFile {
        UploadFileResponse upload(
            UploadFileSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            FileUploadRequestMultiPart fileUploadRequestMultiPart) throws Exception;
    }


    public interface MethodCallListFiles {
        ListFilesResponse list(
            ListFilesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetFileDetails {
        GetFileDetailsResponse get(
            GetFileDetailsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String fileID) throws Exception;
    }


    public interface MethodCallCreatePaymentLink {
        CreatePaymentLinkResponse create(
            CreatePaymentLinkSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreatePaymentLink createPaymentLink) throws Exception;
    }


    public interface MethodCallListPaymentLinks {
        ListPaymentLinksResponse list(
            ListPaymentLinksSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetPaymentLink {
        GetPaymentLinkResponse get(
            GetPaymentLinkSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }


    public interface MethodCallUpdatePaymentLink {
        UpdatePaymentLinkResponse update(
            UpdatePaymentLinkSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentLinkCode,
            UpdatePaymentLink updatePaymentLink) throws Exception;
    }


    public interface MethodCallDisablePaymentLink {
        DisablePaymentLinkResponse disable(
            DisablePaymentLinkSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }


    public interface MethodCallGetPaymentLinkQRCode {
        GetPaymentLinkQRCodeResponse getQRCode(
            GetPaymentLinkQRCodeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentLinkCode) throws Exception;
    }


    public interface MethodCallListPaymentMethods {
        ListPaymentMethodsResponse list(
            ListPaymentMethodsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            Optional<String> sourceID,
            Optional<? extends PaymentMethodType> paymentMethodType) throws Exception;
    }


    public interface MethodCallGetPaymentMethod {
        GetPaymentMethodResponse get(
            GetPaymentMethodSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String paymentMethodID) throws Exception;
    }


    public interface MethodCallCreateRepresentative {
        CreateRepresentativeResponse create(
            CreateRepresentativeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateRepresentative createRepresentative) throws Exception;
    }


    public interface MethodCallListRepresentatives {
        ListRepresentativesResponse list(
            ListRepresentativesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallDeleteRepresentative {
        DeleteRepresentativeResponse delete(
            DeleteRepresentativeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String representativeID) throws Exception;
    }


    public interface MethodCallGetRepresentative {
        GetRepresentativeResponse get(
            GetRepresentativeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String representativeID) throws Exception;
    }


    public interface MethodCallUpdateRepresentative {
        UpdateRepresentativeResponse update(
            UpdateRepresentativeSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String representativeID,
            UpdateRepresentative updateRepresentative) throws Exception;
    }


    public interface MethodCallCreateSchedule {
        CreateScheduleResponse create(
            CreateScheduleSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            UpsertSchedule upsertSchedule) throws Exception;
    }


    public interface MethodCallListSchedules {
        ListSchedulesResponse list(
            ListSchedulesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            Optional<Long> skip,
            Optional<Long> count,
            String accountID) throws Exception;
    }


    public interface MethodCallUpdateSchedule {
        UpdateScheduleResponse update(
            UpdateScheduleSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String scheduleID,
            UpsertSchedule upsertSchedule) throws Exception;
    }


    public interface MethodCallGetSchedules {
        GetSchedulesResponse get(
            GetSchedulesSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String scheduleID) throws Exception;
    }


    public interface MethodCallCancelSchedule {
        CancelScheduleResponse cancel(
            CancelScheduleSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String scheduleID) throws Exception;
    }


    public interface MethodCallGetScheduledOccurrence {
        GetScheduledOccurrenceResponse getOccurrance(
            GetScheduledOccurrenceSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String scheduleID,
            String occurrenceFilter) throws Exception;
    }


    public interface MethodCallCreateSweepConfig {
        CreateSweepConfigResponse createConfig(
            CreateSweepConfigSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            CreateSweepConfig createSweepConfig) throws Exception;
    }


    public interface MethodCallListSweepConfigs {
        ListSweepConfigsResponse listConfigs(
            ListSweepConfigsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetSweepConfig {
        GetSweepConfigResponse getConfig(
            GetSweepConfigSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String sweepConfigID) throws Exception;
    }


    public interface MethodCallUpdateSweepConfig {
        UpdateSweepConfigResponse updateConfig(
            UpdateSweepConfigSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String sweepConfigID,
            PatchSweepConfig patchSweepConfig) throws Exception;
    }


    public interface MethodCallListSweeps {
        ListSweepsResponse list(
            ListSweepsRequest request,
            ListSweepsSecurity security) throws Exception;
    }


    public interface MethodCallGetSweep {
        GetSweepResponse get(
            GetSweepSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String walletID,
            String sweepID) throws Exception;
    }


    public interface MethodCallCreateTransfer {
        CreateTransferResponse create(
            CreateTransferRequest request,
            CreateTransferSecurity security) throws Exception;
    }


    public interface MethodCallListTransfers {
        ListTransfersResponse list(
            ListTransfersRequest request,
            ListTransfersSecurity security) throws Exception;
    }


    public interface MethodCallGetTransfer {
        GetTransferResponse get(
            GetTransferSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String transferID,
            String accountID) throws Exception;
    }


    public interface MethodCallUpdateTransfer {
        UpdateTransferResponse update(
            UpdateTransferSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String transferID,
            String accountID) throws Exception;
    }


    public interface MethodCallInitiateRefund {
        InitiateRefundResponse initiateRefund(
            InitiateRefundRequest request,
            InitiateRefundSecurity security) throws Exception;
    }


    public interface MethodCallListRefunds {
        ListRefundsResponse listRefunds(
            ListRefundsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String transferID) throws Exception;
    }


    public interface MethodCallGetRefund {
        GetRefundResponse getRefund(
            GetRefundSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String transferID,
            String accountID,
            String refundID) throws Exception;
    }


    public interface MethodCallCreateReversal {
        CreateReversalResponse createReversal(
            CreateReversalRequest request,
            CreateReversalSecurity security) throws Exception;
    }


    public interface MethodCallCreateTransferOptions {
        CreateTransferOptionsResponse generateOptions(
            CreateTransferOptionsSecurity security,
            Optional<? extends Versions> xMoovVersion) throws Exception;
    }


    public interface MethodCallGetUnderwriting {
        GetUnderwritingResponse get(
            GetUnderwritingSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallUpdateUnderwriting {
        UpdateUnderwritingResponse update(
            UpdateUnderwritingSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            UpdateUnderwriting updateUnderwriting) throws Exception;
    }


    public interface MethodCallListWallets {
        ListWalletsResponse list(
            ListWalletsSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID) throws Exception;
    }


    public interface MethodCallGetWallet {
        GetWalletResponse get(
            GetWalletSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String walletID) throws Exception;
    }


    public interface MethodCallListWalletTransactions {
        ListWalletTransactionsResponse list(
            ListWalletTransactionsRequest request,
            ListWalletTransactionsSecurity security) throws Exception;
    }


    public interface MethodCallGetWalletTransaction {
        GetWalletTransactionResponse get(
            GetWalletTransactionSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String walletID,
            String transactionID) throws Exception;
    }


    public interface MethodCallGetAvatar {
        GetAvatarResponse get(
            GetAvatarSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String uniqueID) throws Exception;
    }


    public interface MethodCallTestEndToEndToken {
        TestEndToEndTokenResponse testEncryptedToken(
            TestEndToEndTokenSecurity security,
            Optional<? extends Versions> xMoovVersion,
            E2EEToken e2EEToken) throws Exception;
    }


    public interface MethodCallGenerateEndToEndKey {
        GenerateEndToEndKeyResponse generateKey(
            Optional<? extends Versions> xMoovVersion) throws Exception;
    }


    public interface MethodCallGetEnrichmentAddress {
        GetEnrichmentAddressResponse get(
            GetEnrichmentAddressRequest request,
            GetEnrichmentAddressSecurity security) throws Exception;
    }


    public interface MethodCallGetEnrichmentProfile {
        GetEnrichmentProfileResponse get(
            GetEnrichmentProfileSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String email) throws Exception;
    }


    public interface MethodCallListIndustries {
        ListIndustriesResponse list(
            ListIndustriesSecurity security,
            Optional<? extends Versions> xMoovVersion) throws Exception;
    }


    public interface MethodCallListInstitutions {
        ListInstitutionsResponse search(
            ListInstitutionsRequest request,
            ListInstitutionsSecurity security) throws Exception;
    }


    public interface MethodCallListIssuedCardAuthorizations {
        ListIssuedCardAuthorizationsResponse listAuthorizations(
            ListIssuedCardAuthorizationsRequest request,
            ListIssuedCardAuthorizationsSecurity security) throws Exception;
    }


    public interface MethodCallGetIssuedCardAuthorization {
        GetIssuedCardAuthorizationResponse getAuthorization(
            GetIssuedCardAuthorizationSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String authorizationID) throws Exception;
    }


    public interface MethodCallListIssuedCardAuthorizationEvents {
        ListIssuedCardAuthorizationEventsResponse listAuthorizationEvents(
            ListIssuedCardAuthorizationEventsRequest request,
            ListIssuedCardAuthorizationEventsSecurity security) throws Exception;
    }


    public interface MethodCallListIssuedCardTransactions {
        ListIssuedCardTransactionsResponse list(
            ListIssuedCardTransactionsRequest request,
            ListIssuedCardTransactionsSecurity security) throws Exception;
    }


    public interface MethodCallGetIssuedCardTransaction {
        GetIssuedCardTransactionResponse get(
            GetIssuedCardTransactionSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String cardTransactionID) throws Exception;
    }


    public interface MethodCallRequestCard {
        RequestCardResponse request(
            RequestCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            RequestCard requestCard) throws Exception;
    }


    public interface MethodCallListIssuedCards {
        ListIssuedCardsResponse list(
            ListIssuedCardsRequest request,
            ListIssuedCardsSecurity security) throws Exception;
    }


    public interface MethodCallGetIssuedCard {
        GetIssuedCardResponse get(
            GetIssuedCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String issuedCardID) throws Exception;
    }


    public interface MethodCallUpdateIssuedCard {
        UpdateIssuedCardResponse update(
            UpdateIssuedCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String issuedCardID,
            UpdateIssuedCard updateIssuedCard) throws Exception;
    }


    public interface MethodCallGetFullIssuedCard {
        GetFullIssuedCardResponse getFull(
            GetFullIssuedCardSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String accountID,
            String issuedCardID) throws Exception;
    }


    public interface MethodCallRevokeAccessToken {
        RevokeAccessTokenResponse revokeAccessToken(
            Optional<? extends Versions> xMoovVersion,
            RevokeTokenRequest revokeTokenRequest) throws Exception;
    }


    public interface MethodCallCreateAccessToken {
        CreateAccessTokenResponse createAccessToken(
            Optional<? extends Versions> xMoovVersion,
            AuthTokenRequest authTokenRequest) throws Exception;
    }


    public interface MethodCallCreateOnboardingInvite {
        CreateOnboardingInviteResponse createInvite(
            CreateOnboardingInviteSecurity security,
            Optional<? extends Versions> xMoovVersion,
            OnboardingInviteRequest onboardingInviteRequest) throws Exception;
    }


    public interface MethodCallListOnboardingInvites {
        ListOnboardingInvitesResponse listInvites(
            ListOnboardingInvitesSecurity security,
            Optional<? extends Versions> xMoovVersion) throws Exception;
    }


    public interface MethodCallGetOnboardingInvite {
        GetOnboardingInviteResponse getInvite(
            GetOnboardingInviteSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String code) throws Exception;
    }


    public interface MethodCallRevokeOnboardingInvite {
        RevokeOnboardingInviteResponse revokeInvite(
            RevokeOnboardingInviteSecurity security,
            Optional<? extends Versions> xMoovVersion,
            String code) throws Exception;
    }


    public interface MethodCallPing {
        PingResponse ping(
            PingSecurity security,
            Optional<? extends Versions> xMoovVersion) throws Exception;
    }


}
