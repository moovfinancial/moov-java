/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * InstantPaymentFees
 * 
 * <p>A detailed breakdown of instant payment fees.
 */
public class InstantPaymentFees {
    /**
     * Fees for RTP credit transactions.
     */
    @JsonProperty("rtpCreditTransaction")
    private BillingCountAndAmount rtpCreditTransaction;

    /**
     * Fees for RTP declines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rtpDecline")
    private Optional<? extends BillingCountAndAmount> rtpDecline;

    /**
     * Fees for push-to-card transactions.
     */
    @JsonProperty("pushToCardTransaction")
    private BillingCountAndAmount pushToCardTransaction;

    /**
     * Fees for push-to-card declines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushToCardDecline")
    private Optional<? extends BillingCountAndAmount> pushToCardDecline;

    /**
     * Fees for pull-from-card transactions.
     */
    @JsonProperty("pullFromCardTransaction")
    private BillingCountAndAmount pullFromCardTransaction;

    /**
     * Fees for pull-from-card declines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pullFromCardDecline")
    private Optional<? extends BillingCountAndAmount> pullFromCardDecline;

    /**
     * Fees for pull-from-card refunds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pullFromCardRefund")
    private Optional<? extends BillingCountAndAmount> pullFromCardRefund;

    /**
     * Total instant payment fees.
     */
    @JsonProperty("total")
    private BillingCountAndAmount total;

    @JsonCreator
    public InstantPaymentFees(
            @JsonProperty("rtpCreditTransaction") BillingCountAndAmount rtpCreditTransaction,
            @JsonProperty("rtpDecline") Optional<? extends BillingCountAndAmount> rtpDecline,
            @JsonProperty("pushToCardTransaction") BillingCountAndAmount pushToCardTransaction,
            @JsonProperty("pushToCardDecline") Optional<? extends BillingCountAndAmount> pushToCardDecline,
            @JsonProperty("pullFromCardTransaction") BillingCountAndAmount pullFromCardTransaction,
            @JsonProperty("pullFromCardDecline") Optional<? extends BillingCountAndAmount> pullFromCardDecline,
            @JsonProperty("pullFromCardRefund") Optional<? extends BillingCountAndAmount> pullFromCardRefund,
            @JsonProperty("total") BillingCountAndAmount total) {
        Utils.checkNotNull(rtpCreditTransaction, "rtpCreditTransaction");
        Utils.checkNotNull(rtpDecline, "rtpDecline");
        Utils.checkNotNull(pushToCardTransaction, "pushToCardTransaction");
        Utils.checkNotNull(pushToCardDecline, "pushToCardDecline");
        Utils.checkNotNull(pullFromCardTransaction, "pullFromCardTransaction");
        Utils.checkNotNull(pullFromCardDecline, "pullFromCardDecline");
        Utils.checkNotNull(pullFromCardRefund, "pullFromCardRefund");
        Utils.checkNotNull(total, "total");
        this.rtpCreditTransaction = rtpCreditTransaction;
        this.rtpDecline = rtpDecline;
        this.pushToCardTransaction = pushToCardTransaction;
        this.pushToCardDecline = pushToCardDecline;
        this.pullFromCardTransaction = pullFromCardTransaction;
        this.pullFromCardDecline = pullFromCardDecline;
        this.pullFromCardRefund = pullFromCardRefund;
        this.total = total;
    }
    
    public InstantPaymentFees(
            BillingCountAndAmount rtpCreditTransaction,
            BillingCountAndAmount pushToCardTransaction,
            BillingCountAndAmount pullFromCardTransaction,
            BillingCountAndAmount total) {
        this(rtpCreditTransaction, Optional.empty(), pushToCardTransaction,
            Optional.empty(), pullFromCardTransaction, Optional.empty(),
            Optional.empty(), total);
    }

    /**
     * Fees for RTP credit transactions.
     */
    @JsonIgnore
    public BillingCountAndAmount rtpCreditTransaction() {
        return rtpCreditTransaction;
    }

    /**
     * Fees for RTP declines.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> rtpDecline() {
        return (Optional<BillingCountAndAmount>) rtpDecline;
    }

    /**
     * Fees for push-to-card transactions.
     */
    @JsonIgnore
    public BillingCountAndAmount pushToCardTransaction() {
        return pushToCardTransaction;
    }

    /**
     * Fees for push-to-card declines.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> pushToCardDecline() {
        return (Optional<BillingCountAndAmount>) pushToCardDecline;
    }

    /**
     * Fees for pull-from-card transactions.
     */
    @JsonIgnore
    public BillingCountAndAmount pullFromCardTransaction() {
        return pullFromCardTransaction;
    }

    /**
     * Fees for pull-from-card declines.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> pullFromCardDecline() {
        return (Optional<BillingCountAndAmount>) pullFromCardDecline;
    }

    /**
     * Fees for pull-from-card refunds.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillingCountAndAmount> pullFromCardRefund() {
        return (Optional<BillingCountAndAmount>) pullFromCardRefund;
    }

    /**
     * Total instant payment fees.
     */
    @JsonIgnore
    public BillingCountAndAmount total() {
        return total;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Fees for RTP credit transactions.
     */
    public InstantPaymentFees withRtpCreditTransaction(BillingCountAndAmount rtpCreditTransaction) {
        Utils.checkNotNull(rtpCreditTransaction, "rtpCreditTransaction");
        this.rtpCreditTransaction = rtpCreditTransaction;
        return this;
    }

    /**
     * Fees for RTP declines.
     */
    public InstantPaymentFees withRtpDecline(BillingCountAndAmount rtpDecline) {
        Utils.checkNotNull(rtpDecline, "rtpDecline");
        this.rtpDecline = Optional.ofNullable(rtpDecline);
        return this;
    }


    /**
     * Fees for RTP declines.
     */
    public InstantPaymentFees withRtpDecline(Optional<? extends BillingCountAndAmount> rtpDecline) {
        Utils.checkNotNull(rtpDecline, "rtpDecline");
        this.rtpDecline = rtpDecline;
        return this;
    }

    /**
     * Fees for push-to-card transactions.
     */
    public InstantPaymentFees withPushToCardTransaction(BillingCountAndAmount pushToCardTransaction) {
        Utils.checkNotNull(pushToCardTransaction, "pushToCardTransaction");
        this.pushToCardTransaction = pushToCardTransaction;
        return this;
    }

    /**
     * Fees for push-to-card declines.
     */
    public InstantPaymentFees withPushToCardDecline(BillingCountAndAmount pushToCardDecline) {
        Utils.checkNotNull(pushToCardDecline, "pushToCardDecline");
        this.pushToCardDecline = Optional.ofNullable(pushToCardDecline);
        return this;
    }


    /**
     * Fees for push-to-card declines.
     */
    public InstantPaymentFees withPushToCardDecline(Optional<? extends BillingCountAndAmount> pushToCardDecline) {
        Utils.checkNotNull(pushToCardDecline, "pushToCardDecline");
        this.pushToCardDecline = pushToCardDecline;
        return this;
    }

    /**
     * Fees for pull-from-card transactions.
     */
    public InstantPaymentFees withPullFromCardTransaction(BillingCountAndAmount pullFromCardTransaction) {
        Utils.checkNotNull(pullFromCardTransaction, "pullFromCardTransaction");
        this.pullFromCardTransaction = pullFromCardTransaction;
        return this;
    }

    /**
     * Fees for pull-from-card declines.
     */
    public InstantPaymentFees withPullFromCardDecline(BillingCountAndAmount pullFromCardDecline) {
        Utils.checkNotNull(pullFromCardDecline, "pullFromCardDecline");
        this.pullFromCardDecline = Optional.ofNullable(pullFromCardDecline);
        return this;
    }


    /**
     * Fees for pull-from-card declines.
     */
    public InstantPaymentFees withPullFromCardDecline(Optional<? extends BillingCountAndAmount> pullFromCardDecline) {
        Utils.checkNotNull(pullFromCardDecline, "pullFromCardDecline");
        this.pullFromCardDecline = pullFromCardDecline;
        return this;
    }

    /**
     * Fees for pull-from-card refunds.
     */
    public InstantPaymentFees withPullFromCardRefund(BillingCountAndAmount pullFromCardRefund) {
        Utils.checkNotNull(pullFromCardRefund, "pullFromCardRefund");
        this.pullFromCardRefund = Optional.ofNullable(pullFromCardRefund);
        return this;
    }


    /**
     * Fees for pull-from-card refunds.
     */
    public InstantPaymentFees withPullFromCardRefund(Optional<? extends BillingCountAndAmount> pullFromCardRefund) {
        Utils.checkNotNull(pullFromCardRefund, "pullFromCardRefund");
        this.pullFromCardRefund = pullFromCardRefund;
        return this;
    }

    /**
     * Total instant payment fees.
     */
    public InstantPaymentFees withTotal(BillingCountAndAmount total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstantPaymentFees other = (InstantPaymentFees) o;
        return 
            Utils.enhancedDeepEquals(this.rtpCreditTransaction, other.rtpCreditTransaction) &&
            Utils.enhancedDeepEquals(this.rtpDecline, other.rtpDecline) &&
            Utils.enhancedDeepEquals(this.pushToCardTransaction, other.pushToCardTransaction) &&
            Utils.enhancedDeepEquals(this.pushToCardDecline, other.pushToCardDecline) &&
            Utils.enhancedDeepEquals(this.pullFromCardTransaction, other.pullFromCardTransaction) &&
            Utils.enhancedDeepEquals(this.pullFromCardDecline, other.pullFromCardDecline) &&
            Utils.enhancedDeepEquals(this.pullFromCardRefund, other.pullFromCardRefund) &&
            Utils.enhancedDeepEquals(this.total, other.total);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            rtpCreditTransaction, rtpDecline, pushToCardTransaction,
            pushToCardDecline, pullFromCardTransaction, pullFromCardDecline,
            pullFromCardRefund, total);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InstantPaymentFees.class,
                "rtpCreditTransaction", rtpCreditTransaction,
                "rtpDecline", rtpDecline,
                "pushToCardTransaction", pushToCardTransaction,
                "pushToCardDecline", pushToCardDecline,
                "pullFromCardTransaction", pullFromCardTransaction,
                "pullFromCardDecline", pullFromCardDecline,
                "pullFromCardRefund", pullFromCardRefund,
                "total", total);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private BillingCountAndAmount rtpCreditTransaction;

        private Optional<? extends BillingCountAndAmount> rtpDecline = Optional.empty();

        private BillingCountAndAmount pushToCardTransaction;

        private Optional<? extends BillingCountAndAmount> pushToCardDecline = Optional.empty();

        private BillingCountAndAmount pullFromCardTransaction;

        private Optional<? extends BillingCountAndAmount> pullFromCardDecline = Optional.empty();

        private Optional<? extends BillingCountAndAmount> pullFromCardRefund = Optional.empty();

        private BillingCountAndAmount total;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Fees for RTP credit transactions.
         */
        public Builder rtpCreditTransaction(BillingCountAndAmount rtpCreditTransaction) {
            Utils.checkNotNull(rtpCreditTransaction, "rtpCreditTransaction");
            this.rtpCreditTransaction = rtpCreditTransaction;
            return this;
        }


        /**
         * Fees for RTP declines.
         */
        public Builder rtpDecline(BillingCountAndAmount rtpDecline) {
            Utils.checkNotNull(rtpDecline, "rtpDecline");
            this.rtpDecline = Optional.ofNullable(rtpDecline);
            return this;
        }

        /**
         * Fees for RTP declines.
         */
        public Builder rtpDecline(Optional<? extends BillingCountAndAmount> rtpDecline) {
            Utils.checkNotNull(rtpDecline, "rtpDecline");
            this.rtpDecline = rtpDecline;
            return this;
        }


        /**
         * Fees for push-to-card transactions.
         */
        public Builder pushToCardTransaction(BillingCountAndAmount pushToCardTransaction) {
            Utils.checkNotNull(pushToCardTransaction, "pushToCardTransaction");
            this.pushToCardTransaction = pushToCardTransaction;
            return this;
        }


        /**
         * Fees for push-to-card declines.
         */
        public Builder pushToCardDecline(BillingCountAndAmount pushToCardDecline) {
            Utils.checkNotNull(pushToCardDecline, "pushToCardDecline");
            this.pushToCardDecline = Optional.ofNullable(pushToCardDecline);
            return this;
        }

        /**
         * Fees for push-to-card declines.
         */
        public Builder pushToCardDecline(Optional<? extends BillingCountAndAmount> pushToCardDecline) {
            Utils.checkNotNull(pushToCardDecline, "pushToCardDecline");
            this.pushToCardDecline = pushToCardDecline;
            return this;
        }


        /**
         * Fees for pull-from-card transactions.
         */
        public Builder pullFromCardTransaction(BillingCountAndAmount pullFromCardTransaction) {
            Utils.checkNotNull(pullFromCardTransaction, "pullFromCardTransaction");
            this.pullFromCardTransaction = pullFromCardTransaction;
            return this;
        }


        /**
         * Fees for pull-from-card declines.
         */
        public Builder pullFromCardDecline(BillingCountAndAmount pullFromCardDecline) {
            Utils.checkNotNull(pullFromCardDecline, "pullFromCardDecline");
            this.pullFromCardDecline = Optional.ofNullable(pullFromCardDecline);
            return this;
        }

        /**
         * Fees for pull-from-card declines.
         */
        public Builder pullFromCardDecline(Optional<? extends BillingCountAndAmount> pullFromCardDecline) {
            Utils.checkNotNull(pullFromCardDecline, "pullFromCardDecline");
            this.pullFromCardDecline = pullFromCardDecline;
            return this;
        }


        /**
         * Fees for pull-from-card refunds.
         */
        public Builder pullFromCardRefund(BillingCountAndAmount pullFromCardRefund) {
            Utils.checkNotNull(pullFromCardRefund, "pullFromCardRefund");
            this.pullFromCardRefund = Optional.ofNullable(pullFromCardRefund);
            return this;
        }

        /**
         * Fees for pull-from-card refunds.
         */
        public Builder pullFromCardRefund(Optional<? extends BillingCountAndAmount> pullFromCardRefund) {
            Utils.checkNotNull(pullFromCardRefund, "pullFromCardRefund");
            this.pullFromCardRefund = pullFromCardRefund;
            return this;
        }


        /**
         * Total instant payment fees.
         */
        public Builder total(BillingCountAndAmount total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        public InstantPaymentFees build() {

            return new InstantPaymentFees(
                rtpCreditTransaction, rtpDecline, pushToCardTransaction,
                pushToCardDecline, pullFromCardTransaction, pullFromCardDecline,
                pullFromCardRefund, total);
        }

    }
}
