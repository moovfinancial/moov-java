/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.moov.sdk.utils.SpeakeasyMetadata;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class ListStatementsRequest {
    /**
     * Optional date-time which inclusively filters all statements where billing period is on or after this
     * date-time.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=billingPeriodStartDateTime")
    private Optional<OffsetDateTime> billingPeriodStartDateTime;

    /**
     * Optional date-time which exclusively filters all statements where billing period is before this
     * date-time.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=billingPeriodEndDateTime")
    private Optional<OffsetDateTime> billingPeriodEndDateTime;


    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=skip")
    private Optional<Long> skip;


    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=count")
    private Optional<Long> count;


    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountID")
    private String accountID;

    @JsonCreator
    public ListStatementsRequest(
            Optional<OffsetDateTime> billingPeriodStartDateTime,
            Optional<OffsetDateTime> billingPeriodEndDateTime,
            Optional<Long> skip,
            Optional<Long> count,
            String accountID) {
        Utils.checkNotNull(billingPeriodStartDateTime, "billingPeriodStartDateTime");
        Utils.checkNotNull(billingPeriodEndDateTime, "billingPeriodEndDateTime");
        Utils.checkNotNull(skip, "skip");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(accountID, "accountID");
        this.billingPeriodStartDateTime = billingPeriodStartDateTime;
        this.billingPeriodEndDateTime = billingPeriodEndDateTime;
        this.skip = skip;
        this.count = count;
        this.accountID = accountID;
    }
    
    public ListStatementsRequest(
            String accountID) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), accountID);
    }

    /**
     * Optional date-time which inclusively filters all statements where billing period is on or after this
     * date-time.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> billingPeriodStartDateTime() {
        return billingPeriodStartDateTime;
    }

    /**
     * Optional date-time which exclusively filters all statements where billing period is before this
     * date-time.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> billingPeriodEndDateTime() {
        return billingPeriodEndDateTime;
    }

    @JsonIgnore
    public Optional<Long> skip() {
        return skip;
    }

    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    @JsonIgnore
    public String accountID() {
        return accountID;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Optional date-time which inclusively filters all statements where billing period is on or after this
     * date-time.
     */
    public ListStatementsRequest withBillingPeriodStartDateTime(OffsetDateTime billingPeriodStartDateTime) {
        Utils.checkNotNull(billingPeriodStartDateTime, "billingPeriodStartDateTime");
        this.billingPeriodStartDateTime = Optional.ofNullable(billingPeriodStartDateTime);
        return this;
    }


    /**
     * Optional date-time which inclusively filters all statements where billing period is on or after this
     * date-time.
     */
    public ListStatementsRequest withBillingPeriodStartDateTime(Optional<OffsetDateTime> billingPeriodStartDateTime) {
        Utils.checkNotNull(billingPeriodStartDateTime, "billingPeriodStartDateTime");
        this.billingPeriodStartDateTime = billingPeriodStartDateTime;
        return this;
    }

    /**
     * Optional date-time which exclusively filters all statements where billing period is before this
     * date-time.
     */
    public ListStatementsRequest withBillingPeriodEndDateTime(OffsetDateTime billingPeriodEndDateTime) {
        Utils.checkNotNull(billingPeriodEndDateTime, "billingPeriodEndDateTime");
        this.billingPeriodEndDateTime = Optional.ofNullable(billingPeriodEndDateTime);
        return this;
    }


    /**
     * Optional date-time which exclusively filters all statements where billing period is before this
     * date-time.
     */
    public ListStatementsRequest withBillingPeriodEndDateTime(Optional<OffsetDateTime> billingPeriodEndDateTime) {
        Utils.checkNotNull(billingPeriodEndDateTime, "billingPeriodEndDateTime");
        this.billingPeriodEndDateTime = billingPeriodEndDateTime;
        return this;
    }

    public ListStatementsRequest withSkip(long skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = Optional.ofNullable(skip);
        return this;
    }


    public ListStatementsRequest withSkip(Optional<Long> skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = skip;
        return this;
    }

    public ListStatementsRequest withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    public ListStatementsRequest withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public ListStatementsRequest withAccountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListStatementsRequest other = (ListStatementsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.billingPeriodStartDateTime, other.billingPeriodStartDateTime) &&
            Utils.enhancedDeepEquals(this.billingPeriodEndDateTime, other.billingPeriodEndDateTime) &&
            Utils.enhancedDeepEquals(this.skip, other.skip) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.accountID, other.accountID);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            billingPeriodStartDateTime, billingPeriodEndDateTime, skip,
            count, accountID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListStatementsRequest.class,
                "billingPeriodStartDateTime", billingPeriodStartDateTime,
                "billingPeriodEndDateTime", billingPeriodEndDateTime,
                "skip", skip,
                "count", count,
                "accountID", accountID);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<OffsetDateTime> billingPeriodStartDateTime = Optional.empty();

        private Optional<OffsetDateTime> billingPeriodEndDateTime = Optional.empty();

        private Optional<Long> skip = Optional.empty();

        private Optional<Long> count = Optional.empty();

        private String accountID;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Optional date-time which inclusively filters all statements where billing period is on or after this
         * date-time.
         */
        public Builder billingPeriodStartDateTime(OffsetDateTime billingPeriodStartDateTime) {
            Utils.checkNotNull(billingPeriodStartDateTime, "billingPeriodStartDateTime");
            this.billingPeriodStartDateTime = Optional.ofNullable(billingPeriodStartDateTime);
            return this;
        }

        /**
         * Optional date-time which inclusively filters all statements where billing period is on or after this
         * date-time.
         */
        public Builder billingPeriodStartDateTime(Optional<OffsetDateTime> billingPeriodStartDateTime) {
            Utils.checkNotNull(billingPeriodStartDateTime, "billingPeriodStartDateTime");
            this.billingPeriodStartDateTime = billingPeriodStartDateTime;
            return this;
        }


        /**
         * Optional date-time which exclusively filters all statements where billing period is before this
         * date-time.
         */
        public Builder billingPeriodEndDateTime(OffsetDateTime billingPeriodEndDateTime) {
            Utils.checkNotNull(billingPeriodEndDateTime, "billingPeriodEndDateTime");
            this.billingPeriodEndDateTime = Optional.ofNullable(billingPeriodEndDateTime);
            return this;
        }

        /**
         * Optional date-time which exclusively filters all statements where billing period is before this
         * date-time.
         */
        public Builder billingPeriodEndDateTime(Optional<OffsetDateTime> billingPeriodEndDateTime) {
            Utils.checkNotNull(billingPeriodEndDateTime, "billingPeriodEndDateTime");
            this.billingPeriodEndDateTime = billingPeriodEndDateTime;
            return this;
        }


        public Builder skip(long skip) {
            Utils.checkNotNull(skip, "skip");
            this.skip = Optional.ofNullable(skip);
            return this;
        }

        public Builder skip(Optional<Long> skip) {
            Utils.checkNotNull(skip, "skip");
            this.skip = skip;
            return this;
        }


        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        public Builder accountID(String accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = accountID;
            return this;
        }

        public ListStatementsRequest build() {

            return new ListStatementsRequest(
                billingPeriodStartDateTime, billingPeriodEndDateTime, skip,
                count, accountID);
        }

    }
}
