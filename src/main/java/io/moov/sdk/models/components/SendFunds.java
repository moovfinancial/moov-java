/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class SendFunds {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ach")
    private Optional<? extends SendFundsAch> ach;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushToCard")
    private Optional<? extends SendFundsPushToCard> pushToCard;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rtp")
    private Optional<? extends SendFundsRtp> rtp;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instantBank")
    private Optional<? extends SendFundsInstantBank> instantBank;

    @JsonCreator
    public SendFunds(
            @JsonProperty("ach") Optional<? extends SendFundsAch> ach,
            @JsonProperty("pushToCard") Optional<? extends SendFundsPushToCard> pushToCard,
            @JsonProperty("rtp") Optional<? extends SendFundsRtp> rtp,
            @JsonProperty("instantBank") Optional<? extends SendFundsInstantBank> instantBank) {
        Utils.checkNotNull(ach, "ach");
        Utils.checkNotNull(pushToCard, "pushToCard");
        Utils.checkNotNull(rtp, "rtp");
        Utils.checkNotNull(instantBank, "instantBank");
        this.ach = ach;
        this.pushToCard = pushToCard;
        this.rtp = rtp;
        this.instantBank = instantBank;
    }
    
    public SendFunds() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SendFundsAch> ach() {
        return (Optional<SendFundsAch>) ach;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SendFundsPushToCard> pushToCard() {
        return (Optional<SendFundsPushToCard>) pushToCard;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SendFundsRtp> rtp() {
        return (Optional<SendFundsRtp>) rtp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SendFundsInstantBank> instantBank() {
        return (Optional<SendFundsInstantBank>) instantBank;
    }

    public static Builder builder() {
        return new Builder();
    }


    public SendFunds withAch(SendFundsAch ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = Optional.ofNullable(ach);
        return this;
    }


    public SendFunds withAch(Optional<? extends SendFundsAch> ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = ach;
        return this;
    }

    public SendFunds withPushToCard(SendFundsPushToCard pushToCard) {
        Utils.checkNotNull(pushToCard, "pushToCard");
        this.pushToCard = Optional.ofNullable(pushToCard);
        return this;
    }


    public SendFunds withPushToCard(Optional<? extends SendFundsPushToCard> pushToCard) {
        Utils.checkNotNull(pushToCard, "pushToCard");
        this.pushToCard = pushToCard;
        return this;
    }

    public SendFunds withRtp(SendFundsRtp rtp) {
        Utils.checkNotNull(rtp, "rtp");
        this.rtp = Optional.ofNullable(rtp);
        return this;
    }


    public SendFunds withRtp(Optional<? extends SendFundsRtp> rtp) {
        Utils.checkNotNull(rtp, "rtp");
        this.rtp = rtp;
        return this;
    }

    public SendFunds withInstantBank(SendFundsInstantBank instantBank) {
        Utils.checkNotNull(instantBank, "instantBank");
        this.instantBank = Optional.ofNullable(instantBank);
        return this;
    }


    public SendFunds withInstantBank(Optional<? extends SendFundsInstantBank> instantBank) {
        Utils.checkNotNull(instantBank, "instantBank");
        this.instantBank = instantBank;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SendFunds other = (SendFunds) o;
        return 
            Utils.enhancedDeepEquals(this.ach, other.ach) &&
            Utils.enhancedDeepEquals(this.pushToCard, other.pushToCard) &&
            Utils.enhancedDeepEquals(this.rtp, other.rtp) &&
            Utils.enhancedDeepEquals(this.instantBank, other.instantBank);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ach, pushToCard, rtp,
            instantBank);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SendFunds.class,
                "ach", ach,
                "pushToCard", pushToCard,
                "rtp", rtp,
                "instantBank", instantBank);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends SendFundsAch> ach = Optional.empty();

        private Optional<? extends SendFundsPushToCard> pushToCard = Optional.empty();

        private Optional<? extends SendFundsRtp> rtp = Optional.empty();

        private Optional<? extends SendFundsInstantBank> instantBank = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder ach(SendFundsAch ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = Optional.ofNullable(ach);
            return this;
        }

        public Builder ach(Optional<? extends SendFundsAch> ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = ach;
            return this;
        }


        public Builder pushToCard(SendFundsPushToCard pushToCard) {
            Utils.checkNotNull(pushToCard, "pushToCard");
            this.pushToCard = Optional.ofNullable(pushToCard);
            return this;
        }

        public Builder pushToCard(Optional<? extends SendFundsPushToCard> pushToCard) {
            Utils.checkNotNull(pushToCard, "pushToCard");
            this.pushToCard = pushToCard;
            return this;
        }


        public Builder rtp(SendFundsRtp rtp) {
            Utils.checkNotNull(rtp, "rtp");
            this.rtp = Optional.ofNullable(rtp);
            return this;
        }

        public Builder rtp(Optional<? extends SendFundsRtp> rtp) {
            Utils.checkNotNull(rtp, "rtp");
            this.rtp = rtp;
            return this;
        }


        public Builder instantBank(SendFundsInstantBank instantBank) {
            Utils.checkNotNull(instantBank, "instantBank");
            this.instantBank = Optional.ofNullable(instantBank);
            return this;
        }

        public Builder instantBank(Optional<? extends SendFundsInstantBank> instantBank) {
            Utils.checkNotNull(instantBank, "instantBank");
            this.instantBank = instantBank;
            return this;
        }

        public SendFunds build() {

            return new SendFunds(
                ach, pushToCard, rtp,
                instantBank);
        }

    }
}
