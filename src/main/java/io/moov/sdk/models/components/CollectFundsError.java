/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class CollectFundsError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ach")
    private Optional<? extends CollectFundsAchError> ach;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardPayments")
    private Optional<? extends CollectFundsCardPaymentsError> cardPayments;

    @JsonCreator
    public CollectFundsError(
            @JsonProperty("ach") Optional<? extends CollectFundsAchError> ach,
            @JsonProperty("cardPayments") Optional<? extends CollectFundsCardPaymentsError> cardPayments) {
        Utils.checkNotNull(ach, "ach");
        Utils.checkNotNull(cardPayments, "cardPayments");
        this.ach = ach;
        this.cardPayments = cardPayments;
    }
    
    public CollectFundsError() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CollectFundsAchError> ach() {
        return (Optional<CollectFundsAchError>) ach;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CollectFundsCardPaymentsError> cardPayments() {
        return (Optional<CollectFundsCardPaymentsError>) cardPayments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CollectFundsError withAch(CollectFundsAchError ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = Optional.ofNullable(ach);
        return this;
    }

    public CollectFundsError withAch(Optional<? extends CollectFundsAchError> ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = ach;
        return this;
    }

    public CollectFundsError withCardPayments(CollectFundsCardPaymentsError cardPayments) {
        Utils.checkNotNull(cardPayments, "cardPayments");
        this.cardPayments = Optional.ofNullable(cardPayments);
        return this;
    }

    public CollectFundsError withCardPayments(Optional<? extends CollectFundsCardPaymentsError> cardPayments) {
        Utils.checkNotNull(cardPayments, "cardPayments");
        this.cardPayments = cardPayments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CollectFundsError other = (CollectFundsError) o;
        return 
            Objects.deepEquals(this.ach, other.ach) &&
            Objects.deepEquals(this.cardPayments, other.cardPayments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ach,
            cardPayments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CollectFundsError.class,
                "ach", ach,
                "cardPayments", cardPayments);
    }
    
    public final static class Builder {
 
        private Optional<? extends CollectFundsAchError> ach = Optional.empty();
 
        private Optional<? extends CollectFundsCardPaymentsError> cardPayments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ach(CollectFundsAchError ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = Optional.ofNullable(ach);
            return this;
        }

        public Builder ach(Optional<? extends CollectFundsAchError> ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = ach;
            return this;
        }

        public Builder cardPayments(CollectFundsCardPaymentsError cardPayments) {
            Utils.checkNotNull(cardPayments, "cardPayments");
            this.cardPayments = Optional.ofNullable(cardPayments);
            return this;
        }

        public Builder cardPayments(Optional<? extends CollectFundsCardPaymentsError> cardPayments) {
            Utils.checkNotNull(cardPayments, "cardPayments");
            this.cardPayments = cardPayments;
            return this;
        }
        
        public CollectFundsError build() {
            return new CollectFundsError(
                ach,
                cardPayments);
        }
    }
}
