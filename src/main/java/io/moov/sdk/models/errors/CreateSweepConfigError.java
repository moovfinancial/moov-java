/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.net.http.HttpResponse;
import java.util.Optional;

@SuppressWarnings("serial")
public class CreateSweepConfigError extends MoovError {

    @Nullable
    private final Data data;

    @Nullable
    private final Throwable deserializationException;

    public CreateSweepConfigError(
                int code,
                byte[] body,
                HttpResponse<?> rawResponse,
                @Nullable Data data,
                @Nullable Throwable deserializationException) {
        super("API error occurred", code, body, rawResponse, null);
        this.data = data;
        this.deserializationException = deserializationException;
    }

    /**
    * Parse a response into an instance of CreateSweepConfigError. If deserialization of the response body fails,
    * the resulting CreateSweepConfigError instance will have a null data() value and a non-null deserializationException().
    */
    public static CreateSweepConfigError from(HttpResponse<InputStream> response) {
        try {
            byte[] bytes = Utils.extractByteArrayFromBody(response);
            Data data = Utils.mapper().readValue(bytes, Data.class);
            return new CreateSweepConfigError(response.statusCode(), bytes, response, data, null);
        } catch (Exception e) {
            return new CreateSweepConfigError(response.statusCode(), null, response, null, e);
        }
    }

    @Deprecated
    public Optional<String> walletID() {
        return data().flatMap(Data::walletID);
    }

    @Deprecated
    public Optional<String> status() {
        return data().flatMap(Data::status);
    }

    @Deprecated
    public Optional<String> pushPaymentMethodID() {
        return data().flatMap(Data::pushPaymentMethodID);
    }

    @Deprecated
    public Optional<String> pullPaymentMethodID() {
        return data().flatMap(Data::pullPaymentMethodID);
    }

    @Deprecated
    public Optional<String> statementDescriptor() {
        return data().flatMap(Data::statementDescriptor);
    }

    @Deprecated
    public Optional<String> minimumBalance() {
        return data().flatMap(Data::minimumBalance);
    }

    public Optional<Data> data() {
        return Optional.ofNullable(data);
    }

    /**
     * Returns the exception if an error occurs while deserializing the response body.
     */
    public Optional<Throwable> deserializationException() {
        return Optional.ofNullable(deserializationException);
    }

    public static class Data {

        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("walletID")
        private Optional<String> walletID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("status")
        private Optional<String> status;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("pushPaymentMethodID")
        private Optional<String> pushPaymentMethodID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("pullPaymentMethodID")
        private Optional<String> pullPaymentMethodID;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("statementDescriptor")
        private Optional<String> statementDescriptor;


        @JsonInclude(Include.NON_ABSENT)
        @JsonProperty("minimumBalance")
        private Optional<String> minimumBalance;

        @JsonCreator
        public Data(
                @JsonProperty("walletID") Optional<String> walletID,
                @JsonProperty("status") Optional<String> status,
                @JsonProperty("pushPaymentMethodID") Optional<String> pushPaymentMethodID,
                @JsonProperty("pullPaymentMethodID") Optional<String> pullPaymentMethodID,
                @JsonProperty("statementDescriptor") Optional<String> statementDescriptor,
                @JsonProperty("minimumBalance") Optional<String> minimumBalance) {
            Utils.checkNotNull(walletID, "walletID");
            Utils.checkNotNull(status, "status");
            Utils.checkNotNull(pushPaymentMethodID, "pushPaymentMethodID");
            Utils.checkNotNull(pullPaymentMethodID, "pullPaymentMethodID");
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            Utils.checkNotNull(minimumBalance, "minimumBalance");
            this.walletID = walletID;
            this.status = status;
            this.pushPaymentMethodID = pushPaymentMethodID;
            this.pullPaymentMethodID = pullPaymentMethodID;
            this.statementDescriptor = statementDescriptor;
            this.minimumBalance = minimumBalance;
        }
        
        public Data() {
            this(Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty(), Optional.empty(), Optional.empty());
        }

        @JsonIgnore
        public Optional<String> walletID() {
            return walletID;
        }

        @JsonIgnore
        public Optional<String> status() {
            return status;
        }

        @JsonIgnore
        public Optional<String> pushPaymentMethodID() {
            return pushPaymentMethodID;
        }

        @JsonIgnore
        public Optional<String> pullPaymentMethodID() {
            return pullPaymentMethodID;
        }

        @JsonIgnore
        public Optional<String> statementDescriptor() {
            return statementDescriptor;
        }

        @JsonIgnore
        public Optional<String> minimumBalance() {
            return minimumBalance;
        }

        public static Builder builder() {
            return new Builder();
        }


        public Data withWalletID(String walletID) {
            Utils.checkNotNull(walletID, "walletID");
            this.walletID = Optional.ofNullable(walletID);
            return this;
        }


        public Data withWalletID(Optional<String> walletID) {
            Utils.checkNotNull(walletID, "walletID");
            this.walletID = walletID;
            return this;
        }

        public Data withStatus(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }


        public Data withStatus(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Data withPushPaymentMethodID(String pushPaymentMethodID) {
            Utils.checkNotNull(pushPaymentMethodID, "pushPaymentMethodID");
            this.pushPaymentMethodID = Optional.ofNullable(pushPaymentMethodID);
            return this;
        }


        public Data withPushPaymentMethodID(Optional<String> pushPaymentMethodID) {
            Utils.checkNotNull(pushPaymentMethodID, "pushPaymentMethodID");
            this.pushPaymentMethodID = pushPaymentMethodID;
            return this;
        }

        public Data withPullPaymentMethodID(String pullPaymentMethodID) {
            Utils.checkNotNull(pullPaymentMethodID, "pullPaymentMethodID");
            this.pullPaymentMethodID = Optional.ofNullable(pullPaymentMethodID);
            return this;
        }


        public Data withPullPaymentMethodID(Optional<String> pullPaymentMethodID) {
            Utils.checkNotNull(pullPaymentMethodID, "pullPaymentMethodID");
            this.pullPaymentMethodID = pullPaymentMethodID;
            return this;
        }

        public Data withStatementDescriptor(String statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = Optional.ofNullable(statementDescriptor);
            return this;
        }


        public Data withStatementDescriptor(Optional<String> statementDescriptor) {
            Utils.checkNotNull(statementDescriptor, "statementDescriptor");
            this.statementDescriptor = statementDescriptor;
            return this;
        }

        public Data withMinimumBalance(String minimumBalance) {
            Utils.checkNotNull(minimumBalance, "minimumBalance");
            this.minimumBalance = Optional.ofNullable(minimumBalance);
            return this;
        }


        public Data withMinimumBalance(Optional<String> minimumBalance) {
            Utils.checkNotNull(minimumBalance, "minimumBalance");
            this.minimumBalance = minimumBalance;
            return this;
        }

        @Override
        public boolean equals(java.lang.Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Data other = (Data) o;
            return 
                Utils.enhancedDeepEquals(this.walletID, other.walletID) &&
                Utils.enhancedDeepEquals(this.status, other.status) &&
                Utils.enhancedDeepEquals(this.pushPaymentMethodID, other.pushPaymentMethodID) &&
                Utils.enhancedDeepEquals(this.pullPaymentMethodID, other.pullPaymentMethodID) &&
                Utils.enhancedDeepEquals(this.statementDescriptor, other.statementDescriptor) &&
                Utils.enhancedDeepEquals(this.minimumBalance, other.minimumBalance);
        }
        
        @Override
        public int hashCode() {
            return Utils.enhancedHash(
                walletID, status, pushPaymentMethodID,
                pullPaymentMethodID, statementDescriptor, minimumBalance);
        }
        
        @Override
        public String toString() {
            return Utils.toString(Data.class,
                    "walletID", walletID,
                    "status", status,
                    "pushPaymentMethodID", pushPaymentMethodID,
                    "pullPaymentMethodID", pullPaymentMethodID,
                    "statementDescriptor", statementDescriptor,
                    "minimumBalance", minimumBalance);
        }

        @SuppressWarnings("UnusedReturnValue")
        public final static class Builder {

            private Optional<String> walletID = Optional.empty();

            private Optional<String> status = Optional.empty();

            private Optional<String> pushPaymentMethodID = Optional.empty();

            private Optional<String> pullPaymentMethodID = Optional.empty();

            private Optional<String> statementDescriptor = Optional.empty();

            private Optional<String> minimumBalance = Optional.empty();

            private Builder() {
              // force use of static builder() method
            }


            public Builder walletID(String walletID) {
                Utils.checkNotNull(walletID, "walletID");
                this.walletID = Optional.ofNullable(walletID);
                return this;
            }

            public Builder walletID(Optional<String> walletID) {
                Utils.checkNotNull(walletID, "walletID");
                this.walletID = walletID;
                return this;
            }


            public Builder status(String status) {
                Utils.checkNotNull(status, "status");
                this.status = Optional.ofNullable(status);
                return this;
            }

            public Builder status(Optional<String> status) {
                Utils.checkNotNull(status, "status");
                this.status = status;
                return this;
            }


            public Builder pushPaymentMethodID(String pushPaymentMethodID) {
                Utils.checkNotNull(pushPaymentMethodID, "pushPaymentMethodID");
                this.pushPaymentMethodID = Optional.ofNullable(pushPaymentMethodID);
                return this;
            }

            public Builder pushPaymentMethodID(Optional<String> pushPaymentMethodID) {
                Utils.checkNotNull(pushPaymentMethodID, "pushPaymentMethodID");
                this.pushPaymentMethodID = pushPaymentMethodID;
                return this;
            }


            public Builder pullPaymentMethodID(String pullPaymentMethodID) {
                Utils.checkNotNull(pullPaymentMethodID, "pullPaymentMethodID");
                this.pullPaymentMethodID = Optional.ofNullable(pullPaymentMethodID);
                return this;
            }

            public Builder pullPaymentMethodID(Optional<String> pullPaymentMethodID) {
                Utils.checkNotNull(pullPaymentMethodID, "pullPaymentMethodID");
                this.pullPaymentMethodID = pullPaymentMethodID;
                return this;
            }


            public Builder statementDescriptor(String statementDescriptor) {
                Utils.checkNotNull(statementDescriptor, "statementDescriptor");
                this.statementDescriptor = Optional.ofNullable(statementDescriptor);
                return this;
            }

            public Builder statementDescriptor(Optional<String> statementDescriptor) {
                Utils.checkNotNull(statementDescriptor, "statementDescriptor");
                this.statementDescriptor = statementDescriptor;
                return this;
            }


            public Builder minimumBalance(String minimumBalance) {
                Utils.checkNotNull(minimumBalance, "minimumBalance");
                this.minimumBalance = Optional.ofNullable(minimumBalance);
                return this;
            }

            public Builder minimumBalance(Optional<String> minimumBalance) {
                Utils.checkNotNull(minimumBalance, "minimumBalance");
                this.minimumBalance = minimumBalance;
                return this;
            }

            public Data build() {

                return new Data(
                    walletID, status, pushPaymentMethodID,
                    pullPaymentMethodID, statementDescriptor, minimumBalance);
            }

        }
    }

}

