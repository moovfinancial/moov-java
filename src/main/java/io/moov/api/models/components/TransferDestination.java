/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.api.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class TransferDestination {

    @JsonProperty("paymentMethodID")
    private String paymentMethodID;

    @JsonProperty("paymentMethodType")
    private String paymentMethodType;

    @JsonProperty("account")
    private TransferAccount account;

    /**
     * Describes a bank account linked to a Moov account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccount")
    private Optional<? extends BankAccount> bankAccount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wallet")
    private Optional<? extends Object> wallet;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card")
    private Optional<? extends Object> card;

    /**
     * ACH specific details about the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("achDetails")
    private Optional<? extends ACHTransactionDetails> achDetails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applePay")
    private Optional<? extends Object> applePay;

    /**
     * Card-specific details about the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardDetails")
    private Optional<? extends CardTransactionDetails> cardDetails;

    /**
     * RTP specific details about the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rtpDetails")
    private Optional<? extends RTPTransactionDetails> rtpDetails;

    @JsonCreator
    public TransferDestination(
            @JsonProperty("paymentMethodID") String paymentMethodID,
            @JsonProperty("paymentMethodType") String paymentMethodType,
            @JsonProperty("account") TransferAccount account,
            @JsonProperty("bankAccount") Optional<? extends BankAccount> bankAccount,
            @JsonProperty("wallet") Optional<? extends Object> wallet,
            @JsonProperty("card") Optional<? extends Object> card,
            @JsonProperty("achDetails") Optional<? extends ACHTransactionDetails> achDetails,
            @JsonProperty("applePay") Optional<? extends Object> applePay,
            @JsonProperty("cardDetails") Optional<? extends CardTransactionDetails> cardDetails,
            @JsonProperty("rtpDetails") Optional<? extends RTPTransactionDetails> rtpDetails) {
        Utils.checkNotNull(paymentMethodID, "paymentMethodID");
        Utils.checkNotNull(paymentMethodType, "paymentMethodType");
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(bankAccount, "bankAccount");
        Utils.checkNotNull(wallet, "wallet");
        Utils.checkNotNull(card, "card");
        Utils.checkNotNull(achDetails, "achDetails");
        Utils.checkNotNull(applePay, "applePay");
        Utils.checkNotNull(cardDetails, "cardDetails");
        Utils.checkNotNull(rtpDetails, "rtpDetails");
        this.paymentMethodID = paymentMethodID;
        this.paymentMethodType = paymentMethodType;
        this.account = account;
        this.bankAccount = bankAccount;
        this.wallet = wallet;
        this.card = card;
        this.achDetails = achDetails;
        this.applePay = applePay;
        this.cardDetails = cardDetails;
        this.rtpDetails = rtpDetails;
    }
    
    public TransferDestination(
            String paymentMethodID,
            String paymentMethodType,
            TransferAccount account) {
        this(paymentMethodID, paymentMethodType, account, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String paymentMethodID() {
        return paymentMethodID;
    }

    @JsonIgnore
    public String paymentMethodType() {
        return paymentMethodType;
    }

    @JsonIgnore
    public TransferAccount account() {
        return account;
    }

    /**
     * Describes a bank account linked to a Moov account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BankAccount> bankAccount() {
        return (Optional<BankAccount>) bankAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> wallet() {
        return (Optional<Object>) wallet;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> card() {
        return (Optional<Object>) card;
    }

    /**
     * ACH specific details about the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ACHTransactionDetails> achDetails() {
        return (Optional<ACHTransactionDetails>) achDetails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> applePay() {
        return (Optional<Object>) applePay;
    }

    /**
     * Card-specific details about the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CardTransactionDetails> cardDetails() {
        return (Optional<CardTransactionDetails>) cardDetails;
    }

    /**
     * RTP specific details about the transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RTPTransactionDetails> rtpDetails() {
        return (Optional<RTPTransactionDetails>) rtpDetails;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TransferDestination withPaymentMethodID(String paymentMethodID) {
        Utils.checkNotNull(paymentMethodID, "paymentMethodID");
        this.paymentMethodID = paymentMethodID;
        return this;
    }

    public TransferDestination withPaymentMethodType(String paymentMethodType) {
        Utils.checkNotNull(paymentMethodType, "paymentMethodType");
        this.paymentMethodType = paymentMethodType;
        return this;
    }

    public TransferDestination withAccount(TransferAccount account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    /**
     * Describes a bank account linked to a Moov account.
     */
    public TransferDestination withBankAccount(BankAccount bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = Optional.ofNullable(bankAccount);
        return this;
    }

    /**
     * Describes a bank account linked to a Moov account.
     */
    public TransferDestination withBankAccount(Optional<? extends BankAccount> bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = bankAccount;
        return this;
    }

    public TransferDestination withWallet(Object wallet) {
        Utils.checkNotNull(wallet, "wallet");
        this.wallet = Optional.ofNullable(wallet);
        return this;
    }

    public TransferDestination withWallet(Optional<? extends Object> wallet) {
        Utils.checkNotNull(wallet, "wallet");
        this.wallet = wallet;
        return this;
    }

    public TransferDestination withCard(Object card) {
        Utils.checkNotNull(card, "card");
        this.card = Optional.ofNullable(card);
        return this;
    }

    public TransferDestination withCard(Optional<? extends Object> card) {
        Utils.checkNotNull(card, "card");
        this.card = card;
        return this;
    }

    /**
     * ACH specific details about the transaction.
     */
    public TransferDestination withAchDetails(ACHTransactionDetails achDetails) {
        Utils.checkNotNull(achDetails, "achDetails");
        this.achDetails = Optional.ofNullable(achDetails);
        return this;
    }

    /**
     * ACH specific details about the transaction.
     */
    public TransferDestination withAchDetails(Optional<? extends ACHTransactionDetails> achDetails) {
        Utils.checkNotNull(achDetails, "achDetails");
        this.achDetails = achDetails;
        return this;
    }

    public TransferDestination withApplePay(Object applePay) {
        Utils.checkNotNull(applePay, "applePay");
        this.applePay = Optional.ofNullable(applePay);
        return this;
    }

    public TransferDestination withApplePay(Optional<? extends Object> applePay) {
        Utils.checkNotNull(applePay, "applePay");
        this.applePay = applePay;
        return this;
    }

    /**
     * Card-specific details about the transaction.
     */
    public TransferDestination withCardDetails(CardTransactionDetails cardDetails) {
        Utils.checkNotNull(cardDetails, "cardDetails");
        this.cardDetails = Optional.ofNullable(cardDetails);
        return this;
    }

    /**
     * Card-specific details about the transaction.
     */
    public TransferDestination withCardDetails(Optional<? extends CardTransactionDetails> cardDetails) {
        Utils.checkNotNull(cardDetails, "cardDetails");
        this.cardDetails = cardDetails;
        return this;
    }

    /**
     * RTP specific details about the transaction.
     */
    public TransferDestination withRtpDetails(RTPTransactionDetails rtpDetails) {
        Utils.checkNotNull(rtpDetails, "rtpDetails");
        this.rtpDetails = Optional.ofNullable(rtpDetails);
        return this;
    }

    /**
     * RTP specific details about the transaction.
     */
    public TransferDestination withRtpDetails(Optional<? extends RTPTransactionDetails> rtpDetails) {
        Utils.checkNotNull(rtpDetails, "rtpDetails");
        this.rtpDetails = rtpDetails;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferDestination other = (TransferDestination) o;
        return 
            Objects.deepEquals(this.paymentMethodID, other.paymentMethodID) &&
            Objects.deepEquals(this.paymentMethodType, other.paymentMethodType) &&
            Objects.deepEquals(this.account, other.account) &&
            Objects.deepEquals(this.bankAccount, other.bankAccount) &&
            Objects.deepEquals(this.wallet, other.wallet) &&
            Objects.deepEquals(this.card, other.card) &&
            Objects.deepEquals(this.achDetails, other.achDetails) &&
            Objects.deepEquals(this.applePay, other.applePay) &&
            Objects.deepEquals(this.cardDetails, other.cardDetails) &&
            Objects.deepEquals(this.rtpDetails, other.rtpDetails);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            paymentMethodID,
            paymentMethodType,
            account,
            bankAccount,
            wallet,
            card,
            achDetails,
            applePay,
            cardDetails,
            rtpDetails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransferDestination.class,
                "paymentMethodID", paymentMethodID,
                "paymentMethodType", paymentMethodType,
                "account", account,
                "bankAccount", bankAccount,
                "wallet", wallet,
                "card", card,
                "achDetails", achDetails,
                "applePay", applePay,
                "cardDetails", cardDetails,
                "rtpDetails", rtpDetails);
    }
    
    public final static class Builder {
 
        private String paymentMethodID;
 
        private String paymentMethodType;
 
        private TransferAccount account;
 
        private Optional<? extends BankAccount> bankAccount = Optional.empty();
 
        private Optional<? extends Object> wallet = Optional.empty();
 
        private Optional<? extends Object> card = Optional.empty();
 
        private Optional<? extends ACHTransactionDetails> achDetails = Optional.empty();
 
        private Optional<? extends Object> applePay = Optional.empty();
 
        private Optional<? extends CardTransactionDetails> cardDetails = Optional.empty();
 
        private Optional<? extends RTPTransactionDetails> rtpDetails = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder paymentMethodID(String paymentMethodID) {
            Utils.checkNotNull(paymentMethodID, "paymentMethodID");
            this.paymentMethodID = paymentMethodID;
            return this;
        }

        public Builder paymentMethodType(String paymentMethodType) {
            Utils.checkNotNull(paymentMethodType, "paymentMethodType");
            this.paymentMethodType = paymentMethodType;
            return this;
        }

        public Builder account(TransferAccount account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        /**
         * Describes a bank account linked to a Moov account.
         */
        public Builder bankAccount(BankAccount bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        /**
         * Describes a bank account linked to a Moov account.
         */
        public Builder bankAccount(Optional<? extends BankAccount> bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = bankAccount;
            return this;
        }

        public Builder wallet(Object wallet) {
            Utils.checkNotNull(wallet, "wallet");
            this.wallet = Optional.ofNullable(wallet);
            return this;
        }

        public Builder wallet(Optional<? extends Object> wallet) {
            Utils.checkNotNull(wallet, "wallet");
            this.wallet = wallet;
            return this;
        }

        public Builder card(Object card) {
            Utils.checkNotNull(card, "card");
            this.card = Optional.ofNullable(card);
            return this;
        }

        public Builder card(Optional<? extends Object> card) {
            Utils.checkNotNull(card, "card");
            this.card = card;
            return this;
        }

        /**
         * ACH specific details about the transaction.
         */
        public Builder achDetails(ACHTransactionDetails achDetails) {
            Utils.checkNotNull(achDetails, "achDetails");
            this.achDetails = Optional.ofNullable(achDetails);
            return this;
        }

        /**
         * ACH specific details about the transaction.
         */
        public Builder achDetails(Optional<? extends ACHTransactionDetails> achDetails) {
            Utils.checkNotNull(achDetails, "achDetails");
            this.achDetails = achDetails;
            return this;
        }

        public Builder applePay(Object applePay) {
            Utils.checkNotNull(applePay, "applePay");
            this.applePay = Optional.ofNullable(applePay);
            return this;
        }

        public Builder applePay(Optional<? extends Object> applePay) {
            Utils.checkNotNull(applePay, "applePay");
            this.applePay = applePay;
            return this;
        }

        /**
         * Card-specific details about the transaction.
         */
        public Builder cardDetails(CardTransactionDetails cardDetails) {
            Utils.checkNotNull(cardDetails, "cardDetails");
            this.cardDetails = Optional.ofNullable(cardDetails);
            return this;
        }

        /**
         * Card-specific details about the transaction.
         */
        public Builder cardDetails(Optional<? extends CardTransactionDetails> cardDetails) {
            Utils.checkNotNull(cardDetails, "cardDetails");
            this.cardDetails = cardDetails;
            return this;
        }

        /**
         * RTP specific details about the transaction.
         */
        public Builder rtpDetails(RTPTransactionDetails rtpDetails) {
            Utils.checkNotNull(rtpDetails, "rtpDetails");
            this.rtpDetails = Optional.ofNullable(rtpDetails);
            return this;
        }

        /**
         * RTP specific details about the transaction.
         */
        public Builder rtpDetails(Optional<? extends RTPTransactionDetails> rtpDetails) {
            Utils.checkNotNull(rtpDetails, "rtpDetails");
            this.rtpDetails = rtpDetails;
            return this;
        }
        
        public TransferDestination build() {
            return new TransferDestination(
                paymentMethodID,
                paymentMethodType,
                account,
                bankAccount,
                wallet,
                card,
                achDetails,
                applePay,
                cardDetails,
                rtpDetails);
        }
    }
}

