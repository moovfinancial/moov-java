/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class CreateReversal {

    /**
     * Amount to reverse in cents. Partial amounts will automatically trigger a refund instead of a cancellation.
     */
    @JsonProperty("amount")
    private long amount;

    @JsonCreator
    public CreateReversal(
            @JsonProperty("amount") long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
    }

    /**
     * Amount to reverse in cents. Partial amounts will automatically trigger a refund instead of a cancellation.
     */
    @JsonIgnore
    public long amount() {
        return amount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Amount to reverse in cents. Partial amounts will automatically trigger a refund instead of a cancellation.
     */
    public CreateReversal withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateReversal other = (CreateReversal) o;
        return 
            Objects.deepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateReversal.class,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private Long amount;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Amount to reverse in cents. Partial amounts will automatically trigger a refund instead of a cancellation.
         */
        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public CreateReversal build() {
            return new CreateReversal(
                amount);
        }
    }
}

