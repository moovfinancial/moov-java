/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class PaymentMethodsWallet {

    @JsonProperty("walletID")
    private String walletID;

    @JsonCreator
    public PaymentMethodsWallet(
            @JsonProperty("walletID") String walletID) {
        Utils.checkNotNull(walletID, "walletID");
        this.walletID = walletID;
    }

    @JsonIgnore
    public String walletID() {
        return walletID;
    }

    public static Builder builder() {
        return new Builder();
    }


    public PaymentMethodsWallet withWalletID(String walletID) {
        Utils.checkNotNull(walletID, "walletID");
        this.walletID = walletID;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentMethodsWallet other = (PaymentMethodsWallet) o;
        return 
            Utils.enhancedDeepEquals(this.walletID, other.walletID);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            walletID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentMethodsWallet.class,
                "walletID", walletID);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String walletID;

        private Builder() {
          // force use of static builder() method
        }


        public Builder walletID(String walletID) {
            Utils.checkNotNull(walletID, "walletID");
            this.walletID = walletID;
            return this;
        }

        public PaymentMethodsWallet build() {

            return new PaymentMethodsWallet(
                walletID);
        }

    }
}
