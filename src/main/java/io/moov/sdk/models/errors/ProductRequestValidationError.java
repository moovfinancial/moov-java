/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.models.components.AmountDecimalValidationError;
import io.moov.sdk.models.components.AssignProductImageValidationError;
import io.moov.sdk.models.components.ProductOptionGroupValidationError;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;


@SuppressWarnings("serial")
public class ProductRequestValidationError extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("basePrice")
    private Optional<? extends AmountDecimalValidationError> basePrice;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private Optional<? extends Map<String, AssignProductImageValidationError>> images;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optionGroups")
    private Optional<? extends Map<String, ProductOptionGroupValidationError>> optionGroups;

    @JsonCreator
    public ProductRequestValidationError(
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("basePrice") Optional<? extends AmountDecimalValidationError> basePrice,
            @JsonProperty("images") Optional<? extends Map<String, AssignProductImageValidationError>> images,
            @JsonProperty("optionGroups") Optional<? extends Map<String, ProductOptionGroupValidationError>> optionGroups) {
        super("API error occurred");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(basePrice, "basePrice");
        Utils.checkNotNull(images, "images");
        Utils.checkNotNull(optionGroups, "optionGroups");
        this.title = title;
        this.description = description;
        this.basePrice = basePrice;
        this.images = images;
        this.optionGroups = optionGroups;
    }
    
    public ProductRequestValidationError() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountDecimalValidationError> basePrice() {
        return (Optional<AmountDecimalValidationError>) basePrice;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, AssignProductImageValidationError>> images() {
        return (Optional<Map<String, AssignProductImageValidationError>>) images;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, ProductOptionGroupValidationError>> optionGroups() {
        return (Optional<Map<String, ProductOptionGroupValidationError>>) optionGroups;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ProductRequestValidationError withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }


    public ProductRequestValidationError withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public ProductRequestValidationError withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public ProductRequestValidationError withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ProductRequestValidationError withBasePrice(AmountDecimalValidationError basePrice) {
        Utils.checkNotNull(basePrice, "basePrice");
        this.basePrice = Optional.ofNullable(basePrice);
        return this;
    }


    public ProductRequestValidationError withBasePrice(Optional<? extends AmountDecimalValidationError> basePrice) {
        Utils.checkNotNull(basePrice, "basePrice");
        this.basePrice = basePrice;
        return this;
    }

    public ProductRequestValidationError withImages(Map<String, AssignProductImageValidationError> images) {
        Utils.checkNotNull(images, "images");
        this.images = Optional.ofNullable(images);
        return this;
    }


    public ProductRequestValidationError withImages(Optional<? extends Map<String, AssignProductImageValidationError>> images) {
        Utils.checkNotNull(images, "images");
        this.images = images;
        return this;
    }

    public ProductRequestValidationError withOptionGroups(Map<String, ProductOptionGroupValidationError> optionGroups) {
        Utils.checkNotNull(optionGroups, "optionGroups");
        this.optionGroups = Optional.ofNullable(optionGroups);
        return this;
    }


    public ProductRequestValidationError withOptionGroups(Optional<? extends Map<String, ProductOptionGroupValidationError>> optionGroups) {
        Utils.checkNotNull(optionGroups, "optionGroups");
        this.optionGroups = optionGroups;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductRequestValidationError other = (ProductRequestValidationError) o;
        return 
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.basePrice, other.basePrice) &&
            Utils.enhancedDeepEquals(this.images, other.images) &&
            Utils.enhancedDeepEquals(this.optionGroups, other.optionGroups);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            title, description, basePrice,
            images, optionGroups);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductRequestValidationError.class,
                "title", title,
                "description", description,
                "basePrice", basePrice,
                "images", images,
                "optionGroups", optionGroups);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> title = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<? extends AmountDecimalValidationError> basePrice = Optional.empty();

        private Optional<? extends Map<String, AssignProductImageValidationError>> images = Optional.empty();

        private Optional<? extends Map<String, ProductOptionGroupValidationError>> optionGroups = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder basePrice(AmountDecimalValidationError basePrice) {
            Utils.checkNotNull(basePrice, "basePrice");
            this.basePrice = Optional.ofNullable(basePrice);
            return this;
        }

        public Builder basePrice(Optional<? extends AmountDecimalValidationError> basePrice) {
            Utils.checkNotNull(basePrice, "basePrice");
            this.basePrice = basePrice;
            return this;
        }


        public Builder images(Map<String, AssignProductImageValidationError> images) {
            Utils.checkNotNull(images, "images");
            this.images = Optional.ofNullable(images);
            return this;
        }

        public Builder images(Optional<? extends Map<String, AssignProductImageValidationError>> images) {
            Utils.checkNotNull(images, "images");
            this.images = images;
            return this;
        }


        public Builder optionGroups(Map<String, ProductOptionGroupValidationError> optionGroups) {
            Utils.checkNotNull(optionGroups, "optionGroups");
            this.optionGroups = Optional.ofNullable(optionGroups);
            return this;
        }

        public Builder optionGroups(Optional<? extends Map<String, ProductOptionGroupValidationError>> optionGroups) {
            Utils.checkNotNull(optionGroups, "optionGroups");
            this.optionGroups = optionGroups;
            return this;
        }

        public ProductRequestValidationError build() {

            return new ProductRequestValidationError(
                title, description, basePrice,
                images, optionGroups);
        }

    }
}

