/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.moov.sdk.utils.OneOfDeserializer;
import io.moov.sdk.utils.TypedObject;
import io.moov.sdk.utils.Utils.JsonShape;
import io.moov.sdk.utils.Utils.TypeReferenceWithShape;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;

/**
 * WebhookData
 * 
 * <p>The data for the webhook event. The contents are based on the event type.
 */
@JsonDeserialize(using = WebhookData._Deserializer.class)
public class WebhookData {

    @JsonValue
    private TypedObject value;
    
    private WebhookData(TypedObject value) {
        this.value = value;
    }

    public static WebhookData of(WebhookDataAccountCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataAccountCreated>(){}));
    }

    public static WebhookData of(WebhookDataAccountUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataAccountUpdated>(){}));
    }

    public static WebhookData of(WebhookDataAccountDeleted value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataAccountDeleted>(){}));
    }

    public static WebhookData of(WebhookDataBalanceUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataBalanceUpdated>(){}));
    }

    public static WebhookData of(WebhookDataBankAccountCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataBankAccountCreated>(){}));
    }

    public static WebhookData of(WebhookDataBankAccountUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataBankAccountUpdated>(){}));
    }

    public static WebhookData of(WebhookDataBankAccountDeleted value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataBankAccountDeleted>(){}));
    }

    public static WebhookData of(WebhookDataCancellationCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataCancellationCreated>(){}));
    }

    public static WebhookData of(WebhookDataCancellationUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataCancellationUpdated>(){}));
    }

    public static WebhookData of(WebhookDataCardAutoUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataCardAutoUpdated>(){}));
    }

    public static WebhookData of(WebhookDataCapabilityRequested value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataCapabilityRequested>(){}));
    }

    public static WebhookData of(WebhookDataCapabilityUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataCapabilityUpdated>(){}));
    }

    public static WebhookData of(WebhookDataDisputeCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataDisputeCreated>(){}));
    }

    public static WebhookData of(WebhookDataDisputeUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataDisputeUpdated>(){}));
    }

    public static WebhookData of(WebhookDataNetworkIDUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataNetworkIDUpdated>(){}));
    }

    public static WebhookData of(WebhookDataPaymentMethodEnabled value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataPaymentMethodEnabled>(){}));
    }

    public static WebhookData of(WebhookDataPaymentMethodDisabled value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataPaymentMethodDisabled>(){}));
    }

    public static WebhookData of(WebhookDataRefundCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataRefundCreated>(){}));
    }

    public static WebhookData of(WebhookDataRefundUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataRefundUpdated>(){}));
    }

    public static WebhookData of(WebhookDataRepresentativeCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataRepresentativeCreated>(){}));
    }

    public static WebhookData of(WebhookDataRepresentativeUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataRepresentativeUpdated>(){}));
    }

    public static WebhookData of(WebhookDataRepresentativeDisabled value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataRepresentativeDisabled>(){}));
    }

    public static WebhookData of(WebhookDataSweepCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataSweepCreated>(){}));
    }

    public static WebhookData of(WebhookDataSweepUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataSweepUpdated>(){}));
    }

    public static WebhookData of(WebhookDataTerminalApplicationCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataTerminalApplicationCreated>(){}));
    }

    public static WebhookData of(WebhookDataTerminalApplicationUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataTerminalApplicationUpdated>(){}));
    }

    public static WebhookData of(WebhookDataTransferCreated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataTransferCreated>(){}));
    }

    public static WebhookData of(WebhookDataTransferUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataTransferUpdated>(){}));
    }

    public static WebhookData of(WebhookDataWalletTransactionUpdated value) {
        Utils.checkNotNull(value, "value");
        return new WebhookData(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<WebhookDataWalletTransactionUpdated>(){}));
    }
    
    /**
     * Returns an instance of one of these types:
     * <ul>
     * <li>{@code io.moov.sdk.models.components.WebhookDataAccountCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataAccountUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataAccountDeleted}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataBalanceUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataBankAccountCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataBankAccountUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataBankAccountDeleted}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataCancellationCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataCancellationUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataCardAutoUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataCapabilityRequested}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataCapabilityUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataDisputeCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataDisputeUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataNetworkIDUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataPaymentMethodEnabled}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataPaymentMethodDisabled}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataRefundCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataRefundUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataRepresentativeCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataRepresentativeUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataRepresentativeDisabled}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataSweepCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataSweepUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataTerminalApplicationCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataTerminalApplicationUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataTransferCreated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataTransferUpdated}</li>
     * <li>{@code io.moov.sdk.models.components.WebhookDataWalletTransactionUpdated}</li>
     * </ul>
     * 
     * <p>Use {@code instanceof} to determine what type is returned. For example:
     * 
     * <pre>
     * if (obj.value() instanceof String) {
     *     String answer = (String) obj.value();
     *     System.out.println("answer=" + answer);
     * }
     * </pre>
     * 
     * @return value of oneOf type
     **/ 
    public java.lang.Object value() {
        return value.value();
    }    
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookData other = (WebhookData) o;
        return Utils.enhancedDeepEquals(this.value.value(), other.value.value()); 
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(value.value());
    }
    
    @SuppressWarnings("serial")
    public static final class _Deserializer extends OneOfDeserializer<WebhookData> {

        public _Deserializer() {
            super(WebhookData.class, false,
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataTransferUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataNetworkIDUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataDisputeUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataDisputeCreated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataWalletTransactionUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataBankAccountUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataTransferCreated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataSweepUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataRefundUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataCapabilityUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataCardAutoUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataRefundCreated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataPaymentMethodDisabled>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataPaymentMethodEnabled>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataCancellationUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataCapabilityRequested>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataCancellationCreated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataRepresentativeUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataRepresentativeDisabled>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataSweepCreated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataTerminalApplicationCreated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataAccountCreated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataBankAccountDeleted>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataTerminalApplicationUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataBankAccountCreated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataBalanceUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataAccountDeleted>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataAccountUpdated>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<WebhookDataRepresentativeCreated>() {}, JsonShape.DEFAULT));
        }
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookData.class,
                "value", value);
    }
 
}

