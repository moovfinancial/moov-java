/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * ACHFees
 * 
 * <p>A detailed breakdown of ACH fees.
 */
public class ACHFees {
    /**
     * Fees for standard credit transfers.
     */
    @JsonProperty("standardCredit")
    private BillingCountAndAmount standardCredit;

    /**
     * Fees for same-day credit transfers.
     */
    @JsonProperty("sameDayCredit")
    private BillingCountAndAmount sameDayCredit;

    /**
     * Fees for debit transfers.
     */
    @JsonProperty("debits")
    private BillingCountAndAmount debits;

    /**
     * Fees for authorized returns.
     */
    @JsonProperty("return")
    private BillingCountAndAmount return_;

    /**
     * Fees for unauthorized returns.
     */
    @JsonProperty("unauthorizedReturn")
    private BillingCountAndAmount unauthorizedReturn;

    /**
     * Fees for notices of change.
     */
    @JsonProperty("noticeOfChange")
    private BillingCountAndAmount noticeOfChange;

    /**
     * Total ACH fees.
     */
    @JsonProperty("total")
    private BillingCountAndAmount total;

    @JsonCreator
    public ACHFees(
            @JsonProperty("standardCredit") BillingCountAndAmount standardCredit,
            @JsonProperty("sameDayCredit") BillingCountAndAmount sameDayCredit,
            @JsonProperty("debits") BillingCountAndAmount debits,
            @JsonProperty("return") BillingCountAndAmount return_,
            @JsonProperty("unauthorizedReturn") BillingCountAndAmount unauthorizedReturn,
            @JsonProperty("noticeOfChange") BillingCountAndAmount noticeOfChange,
            @JsonProperty("total") BillingCountAndAmount total) {
        Utils.checkNotNull(standardCredit, "standardCredit");
        Utils.checkNotNull(sameDayCredit, "sameDayCredit");
        Utils.checkNotNull(debits, "debits");
        Utils.checkNotNull(return_, "return_");
        Utils.checkNotNull(unauthorizedReturn, "unauthorizedReturn");
        Utils.checkNotNull(noticeOfChange, "noticeOfChange");
        Utils.checkNotNull(total, "total");
        this.standardCredit = standardCredit;
        this.sameDayCredit = sameDayCredit;
        this.debits = debits;
        this.return_ = return_;
        this.unauthorizedReturn = unauthorizedReturn;
        this.noticeOfChange = noticeOfChange;
        this.total = total;
    }

    /**
     * Fees for standard credit transfers.
     */
    @JsonIgnore
    public BillingCountAndAmount standardCredit() {
        return standardCredit;
    }

    /**
     * Fees for same-day credit transfers.
     */
    @JsonIgnore
    public BillingCountAndAmount sameDayCredit() {
        return sameDayCredit;
    }

    /**
     * Fees for debit transfers.
     */
    @JsonIgnore
    public BillingCountAndAmount debits() {
        return debits;
    }

    /**
     * Fees for authorized returns.
     */
    @JsonIgnore
    public BillingCountAndAmount return_() {
        return return_;
    }

    /**
     * Fees for unauthorized returns.
     */
    @JsonIgnore
    public BillingCountAndAmount unauthorizedReturn() {
        return unauthorizedReturn;
    }

    /**
     * Fees for notices of change.
     */
    @JsonIgnore
    public BillingCountAndAmount noticeOfChange() {
        return noticeOfChange;
    }

    /**
     * Total ACH fees.
     */
    @JsonIgnore
    public BillingCountAndAmount total() {
        return total;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Fees for standard credit transfers.
     */
    public ACHFees withStandardCredit(BillingCountAndAmount standardCredit) {
        Utils.checkNotNull(standardCredit, "standardCredit");
        this.standardCredit = standardCredit;
        return this;
    }

    /**
     * Fees for same-day credit transfers.
     */
    public ACHFees withSameDayCredit(BillingCountAndAmount sameDayCredit) {
        Utils.checkNotNull(sameDayCredit, "sameDayCredit");
        this.sameDayCredit = sameDayCredit;
        return this;
    }

    /**
     * Fees for debit transfers.
     */
    public ACHFees withDebits(BillingCountAndAmount debits) {
        Utils.checkNotNull(debits, "debits");
        this.debits = debits;
        return this;
    }

    /**
     * Fees for authorized returns.
     */
    public ACHFees withReturn(BillingCountAndAmount return_) {
        Utils.checkNotNull(return_, "return_");
        this.return_ = return_;
        return this;
    }

    /**
     * Fees for unauthorized returns.
     */
    public ACHFees withUnauthorizedReturn(BillingCountAndAmount unauthorizedReturn) {
        Utils.checkNotNull(unauthorizedReturn, "unauthorizedReturn");
        this.unauthorizedReturn = unauthorizedReturn;
        return this;
    }

    /**
     * Fees for notices of change.
     */
    public ACHFees withNoticeOfChange(BillingCountAndAmount noticeOfChange) {
        Utils.checkNotNull(noticeOfChange, "noticeOfChange");
        this.noticeOfChange = noticeOfChange;
        return this;
    }

    /**
     * Total ACH fees.
     */
    public ACHFees withTotal(BillingCountAndAmount total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ACHFees other = (ACHFees) o;
        return 
            Utils.enhancedDeepEquals(this.standardCredit, other.standardCredit) &&
            Utils.enhancedDeepEquals(this.sameDayCredit, other.sameDayCredit) &&
            Utils.enhancedDeepEquals(this.debits, other.debits) &&
            Utils.enhancedDeepEquals(this.return_, other.return_) &&
            Utils.enhancedDeepEquals(this.unauthorizedReturn, other.unauthorizedReturn) &&
            Utils.enhancedDeepEquals(this.noticeOfChange, other.noticeOfChange) &&
            Utils.enhancedDeepEquals(this.total, other.total);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            standardCredit, sameDayCredit, debits,
            return_, unauthorizedReturn, noticeOfChange,
            total);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ACHFees.class,
                "standardCredit", standardCredit,
                "sameDayCredit", sameDayCredit,
                "debits", debits,
                "return_", return_,
                "unauthorizedReturn", unauthorizedReturn,
                "noticeOfChange", noticeOfChange,
                "total", total);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private BillingCountAndAmount standardCredit;

        private BillingCountAndAmount sameDayCredit;

        private BillingCountAndAmount debits;

        private BillingCountAndAmount return_;

        private BillingCountAndAmount unauthorizedReturn;

        private BillingCountAndAmount noticeOfChange;

        private BillingCountAndAmount total;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Fees for standard credit transfers.
         */
        public Builder standardCredit(BillingCountAndAmount standardCredit) {
            Utils.checkNotNull(standardCredit, "standardCredit");
            this.standardCredit = standardCredit;
            return this;
        }


        /**
         * Fees for same-day credit transfers.
         */
        public Builder sameDayCredit(BillingCountAndAmount sameDayCredit) {
            Utils.checkNotNull(sameDayCredit, "sameDayCredit");
            this.sameDayCredit = sameDayCredit;
            return this;
        }


        /**
         * Fees for debit transfers.
         */
        public Builder debits(BillingCountAndAmount debits) {
            Utils.checkNotNull(debits, "debits");
            this.debits = debits;
            return this;
        }


        /**
         * Fees for authorized returns.
         */
        public Builder return_(BillingCountAndAmount return_) {
            Utils.checkNotNull(return_, "return_");
            this.return_ = return_;
            return this;
        }


        /**
         * Fees for unauthorized returns.
         */
        public Builder unauthorizedReturn(BillingCountAndAmount unauthorizedReturn) {
            Utils.checkNotNull(unauthorizedReturn, "unauthorizedReturn");
            this.unauthorizedReturn = unauthorizedReturn;
            return this;
        }


        /**
         * Fees for notices of change.
         */
        public Builder noticeOfChange(BillingCountAndAmount noticeOfChange) {
            Utils.checkNotNull(noticeOfChange, "noticeOfChange");
            this.noticeOfChange = noticeOfChange;
            return this;
        }


        /**
         * Total ACH fees.
         */
        public Builder total(BillingCountAndAmount total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        public ACHFees build() {

            return new ACHFees(
                standardCredit, sameDayCredit, debits,
                return_, unauthorizedReturn, noticeOfChange,
                total);
        }

    }
}
