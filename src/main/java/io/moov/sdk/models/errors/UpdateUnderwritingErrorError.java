/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.moov.sdk.models.errors;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.models.components.CardVolumeDistributionError;
import io.moov.sdk.models.components.FulfillmentDetailsError;
import io.moov.sdk.models.components.VolumeByCustomerTypeError;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UpdateUnderwritingErrorError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("averageMonthlyTransactionVolume")
    private Optional<String> averageMonthlyTransactionVolume;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("averageTransactionSize")
    private Optional<String> averageTransactionSize;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxTransactionSize")
    private Optional<String> maxTransactionSize;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeByCustomerType")
    private Optional<? extends VolumeByCustomerTypeError> volumeByCustomerType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardVolumeDistribution")
    private Optional<? extends CardVolumeDistributionError> cardVolumeDistribution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fulfillment")
    private Optional<? extends FulfillmentDetailsError> fulfillment;

    @JsonCreator
    public UpdateUnderwritingErrorError(
            @JsonProperty("averageMonthlyTransactionVolume") Optional<String> averageMonthlyTransactionVolume,
            @JsonProperty("averageTransactionSize") Optional<String> averageTransactionSize,
            @JsonProperty("maxTransactionSize") Optional<String> maxTransactionSize,
            @JsonProperty("volumeByCustomerType") Optional<? extends VolumeByCustomerTypeError> volumeByCustomerType,
            @JsonProperty("cardVolumeDistribution") Optional<? extends CardVolumeDistributionError> cardVolumeDistribution,
            @JsonProperty("fulfillment") Optional<? extends FulfillmentDetailsError> fulfillment) {
        Utils.checkNotNull(averageMonthlyTransactionVolume, "averageMonthlyTransactionVolume");
        Utils.checkNotNull(averageTransactionSize, "averageTransactionSize");
        Utils.checkNotNull(maxTransactionSize, "maxTransactionSize");
        Utils.checkNotNull(volumeByCustomerType, "volumeByCustomerType");
        Utils.checkNotNull(cardVolumeDistribution, "cardVolumeDistribution");
        Utils.checkNotNull(fulfillment, "fulfillment");
        this.averageMonthlyTransactionVolume = averageMonthlyTransactionVolume;
        this.averageTransactionSize = averageTransactionSize;
        this.maxTransactionSize = maxTransactionSize;
        this.volumeByCustomerType = volumeByCustomerType;
        this.cardVolumeDistribution = cardVolumeDistribution;
        this.fulfillment = fulfillment;
    }
    
    public UpdateUnderwritingErrorError() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> averageMonthlyTransactionVolume() {
        return averageMonthlyTransactionVolume;
    }

    @JsonIgnore
    public Optional<String> averageTransactionSize() {
        return averageTransactionSize;
    }

    @JsonIgnore
    public Optional<String> maxTransactionSize() {
        return maxTransactionSize;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VolumeByCustomerTypeError> volumeByCustomerType() {
        return (Optional<VolumeByCustomerTypeError>) volumeByCustomerType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CardVolumeDistributionError> cardVolumeDistribution() {
        return (Optional<CardVolumeDistributionError>) cardVolumeDistribution;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FulfillmentDetailsError> fulfillment() {
        return (Optional<FulfillmentDetailsError>) fulfillment;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateUnderwritingErrorError withAverageMonthlyTransactionVolume(String averageMonthlyTransactionVolume) {
        Utils.checkNotNull(averageMonthlyTransactionVolume, "averageMonthlyTransactionVolume");
        this.averageMonthlyTransactionVolume = Optional.ofNullable(averageMonthlyTransactionVolume);
        return this;
    }

    public UpdateUnderwritingErrorError withAverageMonthlyTransactionVolume(Optional<String> averageMonthlyTransactionVolume) {
        Utils.checkNotNull(averageMonthlyTransactionVolume, "averageMonthlyTransactionVolume");
        this.averageMonthlyTransactionVolume = averageMonthlyTransactionVolume;
        return this;
    }

    public UpdateUnderwritingErrorError withAverageTransactionSize(String averageTransactionSize) {
        Utils.checkNotNull(averageTransactionSize, "averageTransactionSize");
        this.averageTransactionSize = Optional.ofNullable(averageTransactionSize);
        return this;
    }

    public UpdateUnderwritingErrorError withAverageTransactionSize(Optional<String> averageTransactionSize) {
        Utils.checkNotNull(averageTransactionSize, "averageTransactionSize");
        this.averageTransactionSize = averageTransactionSize;
        return this;
    }

    public UpdateUnderwritingErrorError withMaxTransactionSize(String maxTransactionSize) {
        Utils.checkNotNull(maxTransactionSize, "maxTransactionSize");
        this.maxTransactionSize = Optional.ofNullable(maxTransactionSize);
        return this;
    }

    public UpdateUnderwritingErrorError withMaxTransactionSize(Optional<String> maxTransactionSize) {
        Utils.checkNotNull(maxTransactionSize, "maxTransactionSize");
        this.maxTransactionSize = maxTransactionSize;
        return this;
    }

    public UpdateUnderwritingErrorError withVolumeByCustomerType(VolumeByCustomerTypeError volumeByCustomerType) {
        Utils.checkNotNull(volumeByCustomerType, "volumeByCustomerType");
        this.volumeByCustomerType = Optional.ofNullable(volumeByCustomerType);
        return this;
    }

    public UpdateUnderwritingErrorError withVolumeByCustomerType(Optional<? extends VolumeByCustomerTypeError> volumeByCustomerType) {
        Utils.checkNotNull(volumeByCustomerType, "volumeByCustomerType");
        this.volumeByCustomerType = volumeByCustomerType;
        return this;
    }

    public UpdateUnderwritingErrorError withCardVolumeDistribution(CardVolumeDistributionError cardVolumeDistribution) {
        Utils.checkNotNull(cardVolumeDistribution, "cardVolumeDistribution");
        this.cardVolumeDistribution = Optional.ofNullable(cardVolumeDistribution);
        return this;
    }

    public UpdateUnderwritingErrorError withCardVolumeDistribution(Optional<? extends CardVolumeDistributionError> cardVolumeDistribution) {
        Utils.checkNotNull(cardVolumeDistribution, "cardVolumeDistribution");
        this.cardVolumeDistribution = cardVolumeDistribution;
        return this;
    }

    public UpdateUnderwritingErrorError withFulfillment(FulfillmentDetailsError fulfillment) {
        Utils.checkNotNull(fulfillment, "fulfillment");
        this.fulfillment = Optional.ofNullable(fulfillment);
        return this;
    }

    public UpdateUnderwritingErrorError withFulfillment(Optional<? extends FulfillmentDetailsError> fulfillment) {
        Utils.checkNotNull(fulfillment, "fulfillment");
        this.fulfillment = fulfillment;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateUnderwritingErrorError other = (UpdateUnderwritingErrorError) o;
        return 
            Objects.deepEquals(this.averageMonthlyTransactionVolume, other.averageMonthlyTransactionVolume) &&
            Objects.deepEquals(this.averageTransactionSize, other.averageTransactionSize) &&
            Objects.deepEquals(this.maxTransactionSize, other.maxTransactionSize) &&
            Objects.deepEquals(this.volumeByCustomerType, other.volumeByCustomerType) &&
            Objects.deepEquals(this.cardVolumeDistribution, other.cardVolumeDistribution) &&
            Objects.deepEquals(this.fulfillment, other.fulfillment);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            averageMonthlyTransactionVolume,
            averageTransactionSize,
            maxTransactionSize,
            volumeByCustomerType,
            cardVolumeDistribution,
            fulfillment);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateUnderwritingErrorError.class,
                "averageMonthlyTransactionVolume", averageMonthlyTransactionVolume,
                "averageTransactionSize", averageTransactionSize,
                "maxTransactionSize", maxTransactionSize,
                "volumeByCustomerType", volumeByCustomerType,
                "cardVolumeDistribution", cardVolumeDistribution,
                "fulfillment", fulfillment);
    }
    
    public final static class Builder {
 
        private Optional<String> averageMonthlyTransactionVolume = Optional.empty();
 
        private Optional<String> averageTransactionSize = Optional.empty();
 
        private Optional<String> maxTransactionSize = Optional.empty();
 
        private Optional<? extends VolumeByCustomerTypeError> volumeByCustomerType = Optional.empty();
 
        private Optional<? extends CardVolumeDistributionError> cardVolumeDistribution = Optional.empty();
 
        private Optional<? extends FulfillmentDetailsError> fulfillment = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder averageMonthlyTransactionVolume(String averageMonthlyTransactionVolume) {
            Utils.checkNotNull(averageMonthlyTransactionVolume, "averageMonthlyTransactionVolume");
            this.averageMonthlyTransactionVolume = Optional.ofNullable(averageMonthlyTransactionVolume);
            return this;
        }

        public Builder averageMonthlyTransactionVolume(Optional<String> averageMonthlyTransactionVolume) {
            Utils.checkNotNull(averageMonthlyTransactionVolume, "averageMonthlyTransactionVolume");
            this.averageMonthlyTransactionVolume = averageMonthlyTransactionVolume;
            return this;
        }

        public Builder averageTransactionSize(String averageTransactionSize) {
            Utils.checkNotNull(averageTransactionSize, "averageTransactionSize");
            this.averageTransactionSize = Optional.ofNullable(averageTransactionSize);
            return this;
        }

        public Builder averageTransactionSize(Optional<String> averageTransactionSize) {
            Utils.checkNotNull(averageTransactionSize, "averageTransactionSize");
            this.averageTransactionSize = averageTransactionSize;
            return this;
        }

        public Builder maxTransactionSize(String maxTransactionSize) {
            Utils.checkNotNull(maxTransactionSize, "maxTransactionSize");
            this.maxTransactionSize = Optional.ofNullable(maxTransactionSize);
            return this;
        }

        public Builder maxTransactionSize(Optional<String> maxTransactionSize) {
            Utils.checkNotNull(maxTransactionSize, "maxTransactionSize");
            this.maxTransactionSize = maxTransactionSize;
            return this;
        }

        public Builder volumeByCustomerType(VolumeByCustomerTypeError volumeByCustomerType) {
            Utils.checkNotNull(volumeByCustomerType, "volumeByCustomerType");
            this.volumeByCustomerType = Optional.ofNullable(volumeByCustomerType);
            return this;
        }

        public Builder volumeByCustomerType(Optional<? extends VolumeByCustomerTypeError> volumeByCustomerType) {
            Utils.checkNotNull(volumeByCustomerType, "volumeByCustomerType");
            this.volumeByCustomerType = volumeByCustomerType;
            return this;
        }

        public Builder cardVolumeDistribution(CardVolumeDistributionError cardVolumeDistribution) {
            Utils.checkNotNull(cardVolumeDistribution, "cardVolumeDistribution");
            this.cardVolumeDistribution = Optional.ofNullable(cardVolumeDistribution);
            return this;
        }

        public Builder cardVolumeDistribution(Optional<? extends CardVolumeDistributionError> cardVolumeDistribution) {
            Utils.checkNotNull(cardVolumeDistribution, "cardVolumeDistribution");
            this.cardVolumeDistribution = cardVolumeDistribution;
            return this;
        }

        public Builder fulfillment(FulfillmentDetailsError fulfillment) {
            Utils.checkNotNull(fulfillment, "fulfillment");
            this.fulfillment = Optional.ofNullable(fulfillment);
            return this;
        }

        public Builder fulfillment(Optional<? extends FulfillmentDetailsError> fulfillment) {
            Utils.checkNotNull(fulfillment, "fulfillment");
            this.fulfillment = fulfillment;
            return this;
        }
        
        public UpdateUnderwritingErrorError build() {
            return new UpdateUnderwritingErrorError(
                averageMonthlyTransactionVolume,
                averageTransactionSize,
                maxTransactionSize,
                volumeByCustomerType,
                cardVolumeDistribution,
                fulfillment);
        }
    }
}

