/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * PlatformFees
 * 
 * <p>A detailed breakdown of platform fees.
 */
public class PlatformFees {
    /**
     * Fees associated with wallet services.
     */
    @JsonProperty("walletFee")
    private AmountDecimal walletFee;

    /**
     * Fees for PCI compliance.
     */
    @JsonProperty("merchantPCIFee")
    private AmountDecimal merchantPCIFee;

    /**
     * Total platform fees.
     */
    @JsonProperty("total")
    private AmountDecimal total;

    @JsonCreator
    public PlatformFees(
            @JsonProperty("walletFee") AmountDecimal walletFee,
            @JsonProperty("merchantPCIFee") AmountDecimal merchantPCIFee,
            @JsonProperty("total") AmountDecimal total) {
        Utils.checkNotNull(walletFee, "walletFee");
        Utils.checkNotNull(merchantPCIFee, "merchantPCIFee");
        Utils.checkNotNull(total, "total");
        this.walletFee = walletFee;
        this.merchantPCIFee = merchantPCIFee;
        this.total = total;
    }

    /**
     * Fees associated with wallet services.
     */
    @JsonIgnore
    public AmountDecimal walletFee() {
        return walletFee;
    }

    /**
     * Fees for PCI compliance.
     */
    @JsonIgnore
    public AmountDecimal merchantPCIFee() {
        return merchantPCIFee;
    }

    /**
     * Total platform fees.
     */
    @JsonIgnore
    public AmountDecimal total() {
        return total;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Fees associated with wallet services.
     */
    public PlatformFees withWalletFee(AmountDecimal walletFee) {
        Utils.checkNotNull(walletFee, "walletFee");
        this.walletFee = walletFee;
        return this;
    }

    /**
     * Fees for PCI compliance.
     */
    public PlatformFees withMerchantPCIFee(AmountDecimal merchantPCIFee) {
        Utils.checkNotNull(merchantPCIFee, "merchantPCIFee");
        this.merchantPCIFee = merchantPCIFee;
        return this;
    }

    /**
     * Total platform fees.
     */
    public PlatformFees withTotal(AmountDecimal total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlatformFees other = (PlatformFees) o;
        return 
            Utils.enhancedDeepEquals(this.walletFee, other.walletFee) &&
            Utils.enhancedDeepEquals(this.merchantPCIFee, other.merchantPCIFee) &&
            Utils.enhancedDeepEquals(this.total, other.total);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            walletFee, merchantPCIFee, total);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PlatformFees.class,
                "walletFee", walletFee,
                "merchantPCIFee", merchantPCIFee,
                "total", total);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AmountDecimal walletFee;

        private AmountDecimal merchantPCIFee;

        private AmountDecimal total;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Fees associated with wallet services.
         */
        public Builder walletFee(AmountDecimal walletFee) {
            Utils.checkNotNull(walletFee, "walletFee");
            this.walletFee = walletFee;
            return this;
        }


        /**
         * Fees for PCI compliance.
         */
        public Builder merchantPCIFee(AmountDecimal merchantPCIFee) {
            Utils.checkNotNull(merchantPCIFee, "merchantPCIFee");
            this.merchantPCIFee = merchantPCIFee;
            return this;
        }


        /**
         * Total platform fees.
         */
        public Builder total(AmountDecimal total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        public PlatformFees build() {

            return new PlatformFees(
                walletFee, merchantPCIFee, total);
        }

    }
}
