/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

@SuppressWarnings("serial")
public class AccountTerminalApplicationError extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminalApplicationID")
    private Optional<String> terminalApplicationID;

    @JsonCreator
    public AccountTerminalApplicationError(
            @JsonProperty("terminalApplicationID") Optional<String> terminalApplicationID) {
        super("API error occurred");
        Utils.checkNotNull(terminalApplicationID, "terminalApplicationID");
        this.terminalApplicationID = terminalApplicationID;
    }
    
    public AccountTerminalApplicationError() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> terminalApplicationID() {
        return terminalApplicationID;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AccountTerminalApplicationError withTerminalApplicationID(String terminalApplicationID) {
        Utils.checkNotNull(terminalApplicationID, "terminalApplicationID");
        this.terminalApplicationID = Optional.ofNullable(terminalApplicationID);
        return this;
    }

    public AccountTerminalApplicationError withTerminalApplicationID(Optional<String> terminalApplicationID) {
        Utils.checkNotNull(terminalApplicationID, "terminalApplicationID");
        this.terminalApplicationID = terminalApplicationID;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountTerminalApplicationError other = (AccountTerminalApplicationError) o;
        return 
            Utils.enhancedDeepEquals(this.terminalApplicationID, other.terminalApplicationID);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            terminalApplicationID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountTerminalApplicationError.class,
                "terminalApplicationID", terminalApplicationID);
    }
    
    public final static class Builder {
 
        private Optional<String> terminalApplicationID = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder terminalApplicationID(String terminalApplicationID) {
            Utils.checkNotNull(terminalApplicationID, "terminalApplicationID");
            this.terminalApplicationID = Optional.ofNullable(terminalApplicationID);
            return this;
        }

        public Builder terminalApplicationID(Optional<String> terminalApplicationID) {
            Utils.checkNotNull(terminalApplicationID, "terminalApplicationID");
            this.terminalApplicationID = terminalApplicationID;
            return this;
        }
        
        public AccountTerminalApplicationError build() {
            return new AccountTerminalApplicationError(
                terminalApplicationID);
        }
    }
}

