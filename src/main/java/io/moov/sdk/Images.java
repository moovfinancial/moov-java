/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk;

import static io.moov.sdk.operations.Operations.RequestOperation;

import io.moov.sdk.models.operations.DeleteImageRequest;
import io.moov.sdk.models.operations.DeleteImageRequestBuilder;
import io.moov.sdk.models.operations.DeleteImageResponse;
import io.moov.sdk.models.operations.GetImageMetadataRequest;
import io.moov.sdk.models.operations.GetImageMetadataRequestBuilder;
import io.moov.sdk.models.operations.GetImageMetadataResponse;
import io.moov.sdk.models.operations.GetPublicImageRequest;
import io.moov.sdk.models.operations.GetPublicImageRequestBuilder;
import io.moov.sdk.models.operations.GetPublicImageResponse;
import io.moov.sdk.models.operations.ListImageMetadataRequest;
import io.moov.sdk.models.operations.ListImageMetadataRequestBuilder;
import io.moov.sdk.models.operations.ListImageMetadataResponse;
import io.moov.sdk.operations.DeleteImage;
import io.moov.sdk.operations.GetImageMetadata;
import io.moov.sdk.operations.GetPublicImage;
import io.moov.sdk.operations.ListImageMetadata;
import io.moov.sdk.utils.Headers;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Images {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    Images(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List metadata for all images in the specified account.
     * 
     * @return The call builder
     */
    public ListImageMetadataRequestBuilder list() {
        return new ListImageMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * List metadata for all images in the specified account.
     * 
     * @param accountID 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListImageMetadataResponse list(String accountID) throws Exception {
        ListImageMetadataRequest request =
            ListImageMetadataRequest
                .builder()
                .accountID(accountID)
                .build();
        RequestOperation<ListImageMetadataRequest, ListImageMetadataResponse> operation
              = new ListImageMetadata.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve metadata for a specific image by its ID.
     * 
     * @return The call builder
     */
    public GetImageMetadataRequestBuilder getMetadata() {
        return new GetImageMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve metadata for a specific image by its ID.
     * 
     * @param accountID 
     * @param imageID 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetImageMetadataResponse getMetadata(String accountID, String imageID) throws Exception {
        GetImageMetadataRequest request =
            GetImageMetadataRequest
                .builder()
                .accountID(accountID)
                .imageID(imageID)
                .build();
        RequestOperation<GetImageMetadataRequest, GetImageMetadataResponse> operation
              = new GetImageMetadata.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Permanently delete an image by its ID.
     * 
     * @return The call builder
     */
    public DeleteImageRequestBuilder delete() {
        return new DeleteImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Permanently delete an image by its ID.
     * 
     * @param accountID 
     * @param imageID 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteImageResponse delete(String accountID, String imageID) throws Exception {
        DeleteImageRequest request =
            DeleteImageRequest
                .builder()
                .accountID(accountID)
                .imageID(imageID)
                .build();
        RequestOperation<DeleteImageRequest, DeleteImageResponse> operation
              = new DeleteImage.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get an image by its public ID.
     * 
     * @return The call builder
     */
    public GetPublicImageRequestBuilder getPublic() {
        return new GetPublicImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Get an image by its public ID.
     * 
     * @param publicID 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPublicImageResponse getPublic(String publicID) throws Exception {
        return getPublic(Optional.empty(), publicID, Optional.empty());
    }

    /**
     * Get an image by its public ID.
     * 
     * @param ifNoneMatch 
     * @param publicID 
     * @param size Optional parameter to request a resized version of the image (WxH).
     *         
     *         If either dimension is 0, the image will be scaled proportionally based on
     *         the non-zero dimension. Dimensions are capped at 2048 pixels. A default size
     *         of 400x400 will be used if this parameter is omitted.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPublicImageResponse getPublic(
            Optional<String> ifNoneMatch, String publicID,
            Optional<String> size) throws Exception {
        GetPublicImageRequest request =
            GetPublicImageRequest
                .builder()
                .ifNoneMatch(ifNoneMatch)
                .publicID(publicID)
                .size(size)
                .build();
        RequestOperation<GetPublicImageRequest, GetPublicImageResponse> operation
              = new GetPublicImage.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
