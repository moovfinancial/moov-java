/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.net.http.HttpResponse;
import java.util.Optional;

@SuppressWarnings("serial")
public class RepresentativeValidationError extends MoovError {

    @Nullable
    private final Data data;

    @Nullable
    private final Throwable deserializationException;

    public RepresentativeValidationError(
                int code,
                byte[] body,
                HttpResponse<?> rawResponse,
                @Nullable Data data,
                @Nullable Throwable deserializationException) {
        super("API error occurred", code, body, rawResponse, null);
        this.data = data;
        this.deserializationException = deserializationException;
    }

    /**
    * Parse a response into an instance of RepresentativeValidationError. If deserialization of the response body fails,
    * the resulting RepresentativeValidationError instance will have a null data() value and a non-null deserializationException().
    */
    public static RepresentativeValidationError from(HttpResponse<InputStream> response) {
        try {
            byte[] bytes = Utils.extractByteArrayFromBody(response);
            Data data = Utils.mapper().readValue(bytes, Data.class);
            return new RepresentativeValidationError(response.statusCode(), bytes, response, data, null);
        } catch (Exception e) {
            return new RepresentativeValidationError(response.statusCode(), null, response, null, e);
        }
    }

    @Deprecated
    public Optional<Error> error() {
        return data().map(Data::error);
    }

    public Optional<Data> data() {
        return Optional.ofNullable(data);
    }

    /**
     * Returns the exception if an error occurs while deserializing the response body.
     */
    public Optional<Throwable> deserializationException() {
        return Optional.ofNullable(deserializationException);
    }

    public static class Data {

        @JsonProperty("error")
        private Error error;

        @JsonCreator
        public Data(
                @JsonProperty("error") Error error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
        }

        @JsonIgnore
        public Error error() {
            return error;
        }

        public static Builder builder() {
            return new Builder();
        }


        public Data withError(Error error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        @Override
        public boolean equals(java.lang.Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Data other = (Data) o;
            return 
                Utils.enhancedDeepEquals(this.error, other.error);
        }
        
        @Override
        public int hashCode() {
            return Utils.enhancedHash(
                error);
        }
        
        @Override
        public String toString() {
            return Utils.toString(Data.class,
                    "error", error);
        }

        @SuppressWarnings("UnusedReturnValue")
        public final static class Builder {

            private Error error;

            private Builder() {
              // force use of static builder() method
            }


            public Builder error(Error error) {
                Utils.checkNotNull(error, "error");
                this.error = error;
                return this;
            }

            public Data build() {

                return new Data(
                    error);
            }

        }
    }

}

