/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class ReversedWithCancellation {

    @JsonProperty("cancellation")
    private Cancellation cancellation;

    @JsonCreator
    public ReversedWithCancellation(
            @JsonProperty("cancellation") Cancellation cancellation) {
        Utils.checkNotNull(cancellation, "cancellation");
        this.cancellation = cancellation;
    }

    @JsonIgnore
    public Cancellation cancellation() {
        return cancellation;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ReversedWithCancellation withCancellation(Cancellation cancellation) {
        Utils.checkNotNull(cancellation, "cancellation");
        this.cancellation = cancellation;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReversedWithCancellation other = (ReversedWithCancellation) o;
        return 
            Objects.deepEquals(this.cancellation, other.cancellation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cancellation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReversedWithCancellation.class,
                "cancellation", cancellation);
    }
    
    public final static class Builder {
 
        private Cancellation cancellation;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder cancellation(Cancellation cancellation) {
            Utils.checkNotNull(cancellation, "cancellation");
            this.cancellation = cancellation;
            return this;
        }
        
        public ReversedWithCancellation build() {
            return new ReversedWithCancellation(
                cancellation);
        }
    }
}

