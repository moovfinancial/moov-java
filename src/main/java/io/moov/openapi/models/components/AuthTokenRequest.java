/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class AuthTokenRequest {

    /**
     * The type of grant being requested.
     */
    @JsonProperty("grant_type")
    private GrantType grantType;

    /**
     * A space delimited list of scopes
     */
    @JsonProperty("scopes")
    private String scopes;

    @JsonCreator
    public AuthTokenRequest(
            @JsonProperty("grant_type") GrantType grantType,
            @JsonProperty("scopes") String scopes) {
        Utils.checkNotNull(grantType, "grantType");
        Utils.checkNotNull(scopes, "scopes");
        this.grantType = grantType;
        this.scopes = scopes;
    }

    /**
     * The type of grant being requested.
     */
    @JsonIgnore
    public GrantType grantType() {
        return grantType;
    }

    /**
     * A space delimited list of scopes
     */
    @JsonIgnore
    public String scopes() {
        return scopes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The type of grant being requested.
     */
    public AuthTokenRequest withGrantType(GrantType grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }

    /**
     * A space delimited list of scopes
     */
    public AuthTokenRequest withScopes(String scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenRequest other = (AuthTokenRequest) o;
        return 
            Objects.deepEquals(this.grantType, other.grantType) &&
            Objects.deepEquals(this.scopes, other.scopes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            grantType,
            scopes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenRequest.class,
                "grantType", grantType,
                "scopes", scopes);
    }
    
    public final static class Builder {
 
        private GrantType grantType;
 
        private String scopes;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of grant being requested.
         */
        public Builder grantType(GrantType grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }

        /**
         * A space delimited list of scopes
         */
        public Builder scopes(String scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }
        
        public AuthTokenRequest build() {
            return new AuthTokenRequest(
                grantType,
                scopes);
        }
    }
}

