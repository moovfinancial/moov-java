/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.moov.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.openapi.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class CardVolumeDistribution {

    @JsonProperty("ecommercePercentage")
    private int ecommercePercentage;

    @JsonProperty("cardPresentPercentage")
    private int cardPresentPercentage;

    @JsonProperty("mailOrPhonePercentage")
    private int mailOrPhonePercentage;

    @JsonProperty("debtRepaymentPercentage")
    private int debtRepaymentPercentage;

    @JsonCreator
    public CardVolumeDistribution(
            @JsonProperty("ecommercePercentage") int ecommercePercentage,
            @JsonProperty("cardPresentPercentage") int cardPresentPercentage,
            @JsonProperty("mailOrPhonePercentage") int mailOrPhonePercentage,
            @JsonProperty("debtRepaymentPercentage") int debtRepaymentPercentage) {
        Utils.checkNotNull(ecommercePercentage, "ecommercePercentage");
        Utils.checkNotNull(cardPresentPercentage, "cardPresentPercentage");
        Utils.checkNotNull(mailOrPhonePercentage, "mailOrPhonePercentage");
        Utils.checkNotNull(debtRepaymentPercentage, "debtRepaymentPercentage");
        this.ecommercePercentage = ecommercePercentage;
        this.cardPresentPercentage = cardPresentPercentage;
        this.mailOrPhonePercentage = mailOrPhonePercentage;
        this.debtRepaymentPercentage = debtRepaymentPercentage;
    }

    @JsonIgnore
    public int ecommercePercentage() {
        return ecommercePercentage;
    }

    @JsonIgnore
    public int cardPresentPercentage() {
        return cardPresentPercentage;
    }

    @JsonIgnore
    public int mailOrPhonePercentage() {
        return mailOrPhonePercentage;
    }

    @JsonIgnore
    public int debtRepaymentPercentage() {
        return debtRepaymentPercentage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CardVolumeDistribution withEcommercePercentage(int ecommercePercentage) {
        Utils.checkNotNull(ecommercePercentage, "ecommercePercentage");
        this.ecommercePercentage = ecommercePercentage;
        return this;
    }

    public CardVolumeDistribution withCardPresentPercentage(int cardPresentPercentage) {
        Utils.checkNotNull(cardPresentPercentage, "cardPresentPercentage");
        this.cardPresentPercentage = cardPresentPercentage;
        return this;
    }

    public CardVolumeDistribution withMailOrPhonePercentage(int mailOrPhonePercentage) {
        Utils.checkNotNull(mailOrPhonePercentage, "mailOrPhonePercentage");
        this.mailOrPhonePercentage = mailOrPhonePercentage;
        return this;
    }

    public CardVolumeDistribution withDebtRepaymentPercentage(int debtRepaymentPercentage) {
        Utils.checkNotNull(debtRepaymentPercentage, "debtRepaymentPercentage");
        this.debtRepaymentPercentage = debtRepaymentPercentage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CardVolumeDistribution other = (CardVolumeDistribution) o;
        return 
            Objects.deepEquals(this.ecommercePercentage, other.ecommercePercentage) &&
            Objects.deepEquals(this.cardPresentPercentage, other.cardPresentPercentage) &&
            Objects.deepEquals(this.mailOrPhonePercentage, other.mailOrPhonePercentage) &&
            Objects.deepEquals(this.debtRepaymentPercentage, other.debtRepaymentPercentage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ecommercePercentage,
            cardPresentPercentage,
            mailOrPhonePercentage,
            debtRepaymentPercentage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CardVolumeDistribution.class,
                "ecommercePercentage", ecommercePercentage,
                "cardPresentPercentage", cardPresentPercentage,
                "mailOrPhonePercentage", mailOrPhonePercentage,
                "debtRepaymentPercentage", debtRepaymentPercentage);
    }
    
    public final static class Builder {
 
        private Integer ecommercePercentage;
 
        private Integer cardPresentPercentage;
 
        private Integer mailOrPhonePercentage;
 
        private Integer debtRepaymentPercentage;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ecommercePercentage(int ecommercePercentage) {
            Utils.checkNotNull(ecommercePercentage, "ecommercePercentage");
            this.ecommercePercentage = ecommercePercentage;
            return this;
        }

        public Builder cardPresentPercentage(int cardPresentPercentage) {
            Utils.checkNotNull(cardPresentPercentage, "cardPresentPercentage");
            this.cardPresentPercentage = cardPresentPercentage;
            return this;
        }

        public Builder mailOrPhonePercentage(int mailOrPhonePercentage) {
            Utils.checkNotNull(mailOrPhonePercentage, "mailOrPhonePercentage");
            this.mailOrPhonePercentage = mailOrPhonePercentage;
            return this;
        }

        public Builder debtRepaymentPercentage(int debtRepaymentPercentage) {
            Utils.checkNotNull(debtRepaymentPercentage, "debtRepaymentPercentage");
            this.debtRepaymentPercentage = debtRepaymentPercentage;
            return this;
        }
        
        public CardVolumeDistribution build() {
            return new CardVolumeDistribution(
                ecommercePercentage,
                cardPresentPercentage,
                mailOrPhonePercentage,
                debtRepaymentPercentage);
        }
    }
}

