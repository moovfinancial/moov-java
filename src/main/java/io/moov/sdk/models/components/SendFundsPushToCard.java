/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class SendFundsPushToCard {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimatedActivity")
    private Optional<? extends EstimatedActivity> estimatedActivity;

    @JsonCreator
    public SendFundsPushToCard(
            @JsonProperty("estimatedActivity") Optional<? extends EstimatedActivity> estimatedActivity) {
        Utils.checkNotNull(estimatedActivity, "estimatedActivity");
        this.estimatedActivity = estimatedActivity;
    }
    
    public SendFundsPushToCard() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EstimatedActivity> estimatedActivity() {
        return (Optional<EstimatedActivity>) estimatedActivity;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SendFundsPushToCard withEstimatedActivity(EstimatedActivity estimatedActivity) {
        Utils.checkNotNull(estimatedActivity, "estimatedActivity");
        this.estimatedActivity = Optional.ofNullable(estimatedActivity);
        return this;
    }

    public SendFundsPushToCard withEstimatedActivity(Optional<? extends EstimatedActivity> estimatedActivity) {
        Utils.checkNotNull(estimatedActivity, "estimatedActivity");
        this.estimatedActivity = estimatedActivity;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SendFundsPushToCard other = (SendFundsPushToCard) o;
        return 
            Utils.enhancedDeepEquals(this.estimatedActivity, other.estimatedActivity);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            estimatedActivity);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SendFundsPushToCard.class,
                "estimatedActivity", estimatedActivity);
    }
    
    public final static class Builder {
 
        private Optional<? extends EstimatedActivity> estimatedActivity = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder estimatedActivity(EstimatedActivity estimatedActivity) {
            Utils.checkNotNull(estimatedActivity, "estimatedActivity");
            this.estimatedActivity = Optional.ofNullable(estimatedActivity);
            return this;
        }

        public Builder estimatedActivity(Optional<? extends EstimatedActivity> estimatedActivity) {
            Utils.checkNotNull(estimatedActivity, "estimatedActivity");
            this.estimatedActivity = estimatedActivity;
            return this;
        }
        
        public SendFundsPushToCard build() {
            return new SendFundsPushToCard(
                estimatedActivity);
        }
    }
}
