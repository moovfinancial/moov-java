/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class InstitutionsSearchResponse {

    @JsonProperty("ach")
    private List<ACHInstitution> ach;

    @JsonProperty("rtp")
    private List<RTPInstitution> rtp;

    @JsonProperty("wire")
    private List<WireInstitution> wire;

    @JsonCreator
    public InstitutionsSearchResponse(
            @JsonProperty("ach") List<ACHInstitution> ach,
            @JsonProperty("rtp") List<RTPInstitution> rtp,
            @JsonProperty("wire") List<WireInstitution> wire) {
        Utils.checkNotNull(ach, "ach");
        Utils.checkNotNull(rtp, "rtp");
        Utils.checkNotNull(wire, "wire");
        this.ach = ach;
        this.rtp = rtp;
        this.wire = wire;
    }

    @JsonIgnore
    public List<ACHInstitution> ach() {
        return ach;
    }

    @JsonIgnore
    public List<RTPInstitution> rtp() {
        return rtp;
    }

    @JsonIgnore
    public List<WireInstitution> wire() {
        return wire;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public InstitutionsSearchResponse withAch(List<ACHInstitution> ach) {
        Utils.checkNotNull(ach, "ach");
        this.ach = ach;
        return this;
    }

    public InstitutionsSearchResponse withRtp(List<RTPInstitution> rtp) {
        Utils.checkNotNull(rtp, "rtp");
        this.rtp = rtp;
        return this;
    }

    public InstitutionsSearchResponse withWire(List<WireInstitution> wire) {
        Utils.checkNotNull(wire, "wire");
        this.wire = wire;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstitutionsSearchResponse other = (InstitutionsSearchResponse) o;
        return 
            Utils.enhancedDeepEquals(this.ach, other.ach) &&
            Utils.enhancedDeepEquals(this.rtp, other.rtp) &&
            Utils.enhancedDeepEquals(this.wire, other.wire);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ach,
            rtp,
            wire);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InstitutionsSearchResponse.class,
                "ach", ach,
                "rtp", rtp,
                "wire", wire);
    }
    
    public final static class Builder {
 
        private List<ACHInstitution> ach;
 
        private List<RTPInstitution> rtp;
 
        private List<WireInstitution> wire;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ach(List<ACHInstitution> ach) {
            Utils.checkNotNull(ach, "ach");
            this.ach = ach;
            return this;
        }

        public Builder rtp(List<RTPInstitution> rtp) {
            Utils.checkNotNull(rtp, "rtp");
            this.rtp = rtp;
            return this;
        }

        public Builder wire(List<WireInstitution> wire) {
            Utils.checkNotNull(wire, "wire");
            this.wire = wire;
            return this;
        }
        
        public InstitutionsSearchResponse build() {
            return new InstitutionsSearchResponse(
                ach,
                rtp,
                wire);
        }
    }
}
