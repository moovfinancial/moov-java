/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.moov.sdk.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GeneratedByDisputeID {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DisputeID")
    private Optional<String> disputeID;

    @JsonCreator
    public GeneratedByDisputeID(
            @JsonProperty("DisputeID") Optional<String> disputeID) {
        Utils.checkNotNull(disputeID, "disputeID");
        this.disputeID = disputeID;
    }
    
    public GeneratedByDisputeID() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> disputeID() {
        return disputeID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GeneratedByDisputeID withDisputeID(String disputeID) {
        Utils.checkNotNull(disputeID, "disputeID");
        this.disputeID = Optional.ofNullable(disputeID);
        return this;
    }

    public GeneratedByDisputeID withDisputeID(Optional<String> disputeID) {
        Utils.checkNotNull(disputeID, "disputeID");
        this.disputeID = disputeID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeneratedByDisputeID other = (GeneratedByDisputeID) o;
        return 
            Objects.deepEquals(this.disputeID, other.disputeID);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            disputeID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GeneratedByDisputeID.class,
                "disputeID", disputeID);
    }
    
    public final static class Builder {
 
        private Optional<String> disputeID = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder disputeID(String disputeID) {
            Utils.checkNotNull(disputeID, "disputeID");
            this.disputeID = Optional.ofNullable(disputeID);
            return this;
        }

        public Builder disputeID(Optional<String> disputeID) {
            Utils.checkNotNull(disputeID, "disputeID");
            this.disputeID = disputeID;
            return this;
        }
        
        public GeneratedByDisputeID build() {
            return new GeneratedByDisputeID(
                disputeID);
        }
    }
}

