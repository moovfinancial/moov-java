/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.moov.sdk.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class IndividualNameUpdate {

    /**
     * The individual's first given name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<String> firstName;

    /**
     * The individual's second given name, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middleName")
    private Optional<String> middleName;

    /**
     * The individual's family name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<String> lastName;

    /**
     * Suffix of a given name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    private Optional<String> suffix;

    @JsonCreator
    public IndividualNameUpdate(
            @JsonProperty("firstName") Optional<String> firstName,
            @JsonProperty("middleName") Optional<String> middleName,
            @JsonProperty("lastName") Optional<String> lastName,
            @JsonProperty("suffix") Optional<String> suffix) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(suffix, "suffix");
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.suffix = suffix;
    }
    
    public IndividualNameUpdate() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The individual's first given name.
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * The individual's second given name, if any.
     */
    @JsonIgnore
    public Optional<String> middleName() {
        return middleName;
    }

    /**
     * The individual's family name.
     */
    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * Suffix of a given name.
     */
    @JsonIgnore
    public Optional<String> suffix() {
        return suffix;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The individual's first given name.
     */
    public IndividualNameUpdate withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * The individual's first given name.
     */
    public IndividualNameUpdate withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The individual's second given name, if any.
     */
    public IndividualNameUpdate withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = Optional.ofNullable(middleName);
        return this;
    }

    /**
     * The individual's second given name, if any.
     */
    public IndividualNameUpdate withMiddleName(Optional<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * The individual's family name.
     */
    public IndividualNameUpdate withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * The individual's family name.
     */
    public IndividualNameUpdate withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Suffix of a given name.
     */
    public IndividualNameUpdate withSuffix(String suffix) {
        Utils.checkNotNull(suffix, "suffix");
        this.suffix = Optional.ofNullable(suffix);
        return this;
    }

    /**
     * Suffix of a given name.
     */
    public IndividualNameUpdate withSuffix(Optional<String> suffix) {
        Utils.checkNotNull(suffix, "suffix");
        this.suffix = suffix;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndividualNameUpdate other = (IndividualNameUpdate) o;
        return 
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.middleName, other.middleName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.suffix, other.suffix);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            firstName,
            middleName,
            lastName,
            suffix);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IndividualNameUpdate.class,
                "firstName", firstName,
                "middleName", middleName,
                "lastName", lastName,
                "suffix", suffix);
    }
    
    public final static class Builder {
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> middleName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<String> suffix = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The individual's first given name.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * The individual's first given name.
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The individual's second given name, if any.
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = Optional.ofNullable(middleName);
            return this;
        }

        /**
         * The individual's second given name, if any.
         */
        public Builder middleName(Optional<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        /**
         * The individual's family name.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * The individual's family name.
         */
        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Suffix of a given name.
         */
        public Builder suffix(String suffix) {
            Utils.checkNotNull(suffix, "suffix");
            this.suffix = Optional.ofNullable(suffix);
            return this;
        }

        /**
         * Suffix of a given name.
         */
        public Builder suffix(Optional<String> suffix) {
            Utils.checkNotNull(suffix, "suffix");
            this.suffix = suffix;
            return this;
        }
        
        public IndividualNameUpdate build() {
            return new IndividualNameUpdate(
                firstName,
                middleName,
                lastName,
                suffix);
        }
    }
}

