/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.moov.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.moov.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Map;


public class CountriesErrors {

    @JsonProperty("countries")
    private Map<String, String> countries;

    @JsonCreator
    public CountriesErrors(
            @JsonProperty("countries") Map<String, String> countries) {
        countries = Utils.emptyMapIfNull(countries);
        Utils.checkNotNull(countries, "countries");
        this.countries = countries;
    }

    @JsonIgnore
    public Map<String, String> countries() {
        return countries;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CountriesErrors withCountries(Map<String, String> countries) {
        Utils.checkNotNull(countries, "countries");
        this.countries = countries;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CountriesErrors other = (CountriesErrors) o;
        return 
            Utils.enhancedDeepEquals(this.countries, other.countries);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            countries);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CountriesErrors.class,
                "countries", countries);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Map<String, String> countries;

        private Builder() {
          // force use of static builder() method
        }


        public Builder countries(Map<String, String> countries) {
            Utils.checkNotNull(countries, "countries");
            this.countries = countries;
            return this;
        }

        public CountriesErrors build() {

            return new CountriesErrors(
                countries);
        }

    }
}
